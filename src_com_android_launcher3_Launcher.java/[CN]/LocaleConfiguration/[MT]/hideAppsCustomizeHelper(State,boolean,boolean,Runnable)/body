{
  if (mStateAnimation != null) {
    mStateAnimation.setDuration(0);
    mStateAnimation.cancel();
    mStateAnimation=null;
  }
  Resources res=getResources();
  final int duration=res.getInteger(R.integer.config_appsCustomizeZoomOutTime);
  final int fadeOutDuration=res.getInteger(R.integer.config_appsCustomizeFadeOutTime);
  final float scaleFactor=(float)res.getInteger(R.integer.config_appsCustomizeZoomScaleFactor);
  final View fromView=mAppsCustomizeTabHost;
  final View toView=mWorkspace;
  Animator workspaceAnim=null;
  if (toState == State.WORKSPACE) {
    int stagger=res.getInteger(R.integer.config_appsCustomizeWorkspaceAnimationStagger);
    workspaceAnim=mWorkspace.getChangeStateAnimation(Workspace.State.NORMAL,animated,stagger);
  }
 else   if (toState == State.APPS_CUSTOMIZE_SPRING_LOADED) {
    workspaceAnim=mWorkspace.getChangeStateAnimation(Workspace.State.SPRING_LOADED,animated);
  }
  setPivotsForZoom(fromView,scaleFactor);
  updateWallpaperVisibility(true);
  showHotseat(animated);
  if (animated) {
    final LauncherViewPropertyAnimator scaleAnim=new LauncherViewPropertyAnimator(fromView);
    scaleAnim.scaleX(scaleFactor).scaleY(scaleFactor).setDuration(duration).setInterpolator(new Workspace.ZoomInInterpolator());
    final ObjectAnimator alphaAnim=LauncherAnimUtils.ofFloat(fromView,"alpha",1f,0f).setDuration(fadeOutDuration);
    alphaAnim.setInterpolator(new AccelerateDecelerateInterpolator());
    alphaAnim.addUpdateListener(new AnimatorUpdateListener(){
      @Override public void onAnimationUpdate(      ValueAnimator animation){
        float t=1f - (Float)animation.getAnimatedValue();
        dispatchOnLauncherTransitionStep(fromView,t);
        dispatchOnLauncherTransitionStep(toView,t);
      }
    }
);
    mStateAnimation=LauncherAnimUtils.createAnimatorSet();
    dispatchOnLauncherTransitionPrepare(fromView,animated,true);
    dispatchOnLauncherTransitionPrepare(toView,animated,true);
    mAppsCustomizeContent.pauseScrolling();
    mStateAnimation.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        updateWallpaperVisibility(true);
        fromView.setVisibility(View.GONE);
        dispatchOnLauncherTransitionEnd(fromView,animated,true);
        dispatchOnLauncherTransitionEnd(toView,animated,true);
        if (onCompleteRunnable != null) {
          onCompleteRunnable.run();
        }
        mAppsCustomizeContent.updateCurrentPageScroll();
        mAppsCustomizeContent.resumeScrolling();
      }
    }
);
    mStateAnimation.playTogether(scaleAnim,alphaAnim);
    if (workspaceAnim != null) {
      mStateAnimation.play(workspaceAnim);
    }
    dispatchOnLauncherTransitionStart(fromView,animated,true);
    dispatchOnLauncherTransitionStart(toView,animated,true);
    LauncherAnimUtils.startAnimationAfterNextDraw(mStateAnimation,toView);
  }
 else {
    fromView.setVisibility(View.GONE);
    dispatchOnLauncherTransitionPrepare(fromView,animated,true);
    dispatchOnLauncherTransitionStart(fromView,animated,true);
    dispatchOnLauncherTransitionEnd(fromView,animated,true);
    dispatchOnLauncherTransitionPrepare(toView,animated,true);
    dispatchOnLauncherTransitionStart(toView,animated,true);
    dispatchOnLauncherTransitionEnd(toView,animated,true);
  }
}
