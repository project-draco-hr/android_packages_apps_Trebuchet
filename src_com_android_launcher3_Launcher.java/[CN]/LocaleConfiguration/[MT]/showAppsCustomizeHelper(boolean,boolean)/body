{
  if (mStateAnimation != null) {
    mStateAnimation.setDuration(0);
    mStateAnimation.cancel();
    mStateAnimation=null;
  }
  final Resources res=getResources();
  final int duration=res.getInteger(R.integer.config_appsCustomizeZoomInTime);
  final int fadeDuration=res.getInteger(R.integer.config_appsCustomizeFadeInTime);
  final float scale=(float)res.getInteger(R.integer.config_appsCustomizeZoomScaleFactor);
  final View fromView=mWorkspace;
  final AppsCustomizeTabHost toView=mAppsCustomizeTabHost;
  final int startDelay=res.getInteger(R.integer.config_workspaceAppsCustomizeAnimationStagger);
  setPivotsForZoom(toView,scale);
  Animator workspaceAnim=mWorkspace.getChangeStateAnimation(Workspace.State.SMALL,animated);
  if (animated) {
    toView.setScaleX(scale);
    toView.setScaleY(scale);
    final LauncherViewPropertyAnimator scaleAnim=new LauncherViewPropertyAnimator(toView);
    scaleAnim.scaleX(1f).scaleY(1f).setDuration(duration).setInterpolator(new Workspace.ZoomOutInterpolator());
    toView.setVisibility(View.VISIBLE);
    toView.setAlpha(0f);
    final ObjectAnimator alphaAnim=LauncherAnimUtils.ofFloat(toView,"alpha",0f,1f).setDuration(fadeDuration);
    alphaAnim.setInterpolator(new DecelerateInterpolator(1.5f));
    alphaAnim.addUpdateListener(new AnimatorUpdateListener(){
      @Override public void onAnimationUpdate(      ValueAnimator animation){
        if (animation == null) {
          throw new RuntimeException("animation is null");
        }
        float t=(Float)animation.getAnimatedValue();
        dispatchOnLauncherTransitionStep(fromView,t);
        dispatchOnLauncherTransitionStep(toView,t);
      }
    }
);
    mStateAnimation=LauncherAnimUtils.createAnimatorSet();
    mStateAnimation.play(scaleAnim).after(startDelay);
    mStateAnimation.play(alphaAnim).after(startDelay);
    mStateAnimation.addListener(new AnimatorListenerAdapter(){
      boolean animationCancelled=false;
      @Override public void onAnimationStart(      Animator animation){
        updateWallpaperVisibility(true);
        toView.setTranslationX(0.0f);
        toView.setTranslationY(0.0f);
        toView.setVisibility(View.VISIBLE);
        toView.bringToFront();
      }
      @Override public void onAnimationEnd(      Animator animation){
        dispatchOnLauncherTransitionEnd(fromView,animated,false);
        dispatchOnLauncherTransitionEnd(toView,animated,false);
        if (!animationCancelled) {
          updateWallpaperVisibility(false);
        }
        if (mSearchDropTargetBar != null) {
          mSearchDropTargetBar.hideSearchBar(false);
        }
      }
      @Override public void onAnimationCancel(      Animator animation){
        animationCancelled=true;
      }
    }
);
    if (workspaceAnim != null) {
      mStateAnimation.play(workspaceAnim);
    }
    boolean delayAnim=false;
    dispatchOnLauncherTransitionPrepare(fromView,animated,false);
    dispatchOnLauncherTransitionPrepare(toView,animated,false);
    if ((((LauncherTransitionable)toView).getContent().getMeasuredWidth() == 0) || (mWorkspace.getMeasuredWidth() == 0) || (toView.getMeasuredWidth() == 0)) {
      delayAnim=true;
    }
    final AnimatorSet stateAnimation=mStateAnimation;
    final Runnable startAnimRunnable=new Runnable(){
      public void run(){
        if (mStateAnimation != stateAnimation)         return;
        setPivotsForZoom(toView,scale);
        dispatchOnLauncherTransitionStart(fromView,animated,false);
        dispatchOnLauncherTransitionStart(toView,animated,false);
        LauncherAnimUtils.startAnimationAfterNextDraw(mStateAnimation,toView);
      }
    }
;
    if (delayAnim) {
      final ViewTreeObserver observer=toView.getViewTreeObserver();
      observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener(){
        public void onGlobalLayout(){
          startAnimRunnable.run();
          toView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
        }
      }
);
    }
 else {
      startAnimRunnable.run();
    }
  }
 else {
    toView.setTranslationX(0.0f);
    toView.setTranslationY(0.0f);
    toView.setScaleX(1.0f);
    toView.setScaleY(1.0f);
    toView.setVisibility(View.VISIBLE);
    toView.bringToFront();
    if (!springLoaded && !LauncherAppState.getInstance().isScreenLarge()) {
      if (mSearchDropTargetBar != null) {
        mSearchDropTargetBar.hideSearchBar(false);
      }
    }
    dispatchOnLauncherTransitionPrepare(fromView,animated,false);
    dispatchOnLauncherTransitionStart(fromView,animated,false);
    dispatchOnLauncherTransitionEnd(fromView,animated,false);
    dispatchOnLauncherTransitionPrepare(toView,animated,false);
    dispatchOnLauncherTransitionStart(toView,animated,false);
    dispatchOnLauncherTransitionEnd(toView,animated,false);
    updateWallpaperVisibility(false);
  }
}
