{
  mWaitingForResult=false;
  int pendingAddWidgetId=mPendingAddWidgetId;
  mPendingAddWidgetId=-1;
  Runnable exitSpringLoaded=new Runnable(){
    @Override public void run(){
      exitSpringLoadedDragModeDelayed((resultCode != RESULT_CANCELED),EXIT_SPRINGLOADED_MODE_SHORT_TIMEOUT,null);
    }
  }
;
  if (requestCode == REQUEST_BIND_APPWIDGET) {
    final int appWidgetId=data != null ? data.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,-1) : -1;
    if (resultCode == RESULT_CANCELED) {
      completeTwoStageWidgetDrop(RESULT_CANCELED,appWidgetId);
      mWorkspace.removeExtraEmptyScreen(true,exitSpringLoaded,ON_ACTIVITY_RESULT_ANIMATION_DELAY,false);
    }
 else     if (resultCode == RESULT_OK) {
      addAppWidgetImpl(appWidgetId,mPendingAddInfo,null,mPendingAddWidgetInfo,ON_ACTIVITY_RESULT_ANIMATION_DELAY);
    }
    return;
  }
 else   if (requestCode == REQUEST_PICK_WALLPAPER) {
    if (resultCode == RESULT_OK && mWorkspace.isInOverviewMode()) {
      mWorkspace.exitOverviewMode(false);
    }
    return;
  }
  boolean isWidgetDrop=(requestCode == REQUEST_PICK_APPWIDGET || requestCode == REQUEST_CREATE_APPWIDGET);
  if (isWidgetDrop) {
    final int appWidgetId;
    int widgetId=data != null ? data.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,-1) : -1;
    if (widgetId < 0) {
      appWidgetId=pendingAddWidgetId;
    }
 else {
      appWidgetId=widgetId;
    }
    final int result;
    final Runnable onComplete;
    if (appWidgetId < 0 || resultCode == RESULT_CANCELED) {
      Log.e(TAG,"Error: appWidgetId (EXTRA_APPWIDGET_ID) was not returned from the \\" + "widget configuration activity.");
      result=RESULT_CANCELED;
      completeTwoStageWidgetDrop(result,appWidgetId);
      onComplete=new Runnable(){
        @Override public void run(){
          exitSpringLoadedDragModeDelayed(false,0,null);
        }
      }
;
    }
 else {
      result=resultCode;
      onComplete=new Runnable(){
        @Override public void run(){
          completeTwoStageWidgetDrop(result,appWidgetId);
        }
      }
;
    }
    mWorkspace.removeExtraEmptyScreen(true,onComplete,ON_ACTIVITY_RESULT_ANIMATION_DELAY,false);
    return;
  }
  if (resultCode == RESULT_OK && mPendingAddInfo.container != ItemInfo.NO_ID) {
    final PendingAddArguments args=new PendingAddArguments();
    args.requestCode=requestCode;
    args.intent=data;
    args.container=mPendingAddInfo.container;
    args.screenId=mPendingAddInfo.screenId;
    args.cellX=mPendingAddInfo.cellX;
    args.cellY=mPendingAddInfo.cellY;
    if (isWorkspaceLocked()) {
      sPendingAddList.add(args);
    }
 else {
      completeAdd(args);
    }
    mWorkspace.removeExtraEmptyScreen(true,exitSpringLoaded,ON_ACTIVITY_RESULT_ANIMATION_DELAY,false);
  }
 else   if (resultCode == RESULT_CANCELED) {
    mWorkspace.removeExtraEmptyScreen(true,exitSpringLoaded,ON_ACTIVITY_RESULT_ANIMATION_DELAY,false);
  }
  mDragLayer.clearAnimatedView();
}
