{
  if (getChildCount() == 0) {
    return;
  }
  if (DEBUG)   Log.d(TAG,"PagedView.onLayout()");
  final int childCount=getChildCount();
  int offsetX=getViewportOffsetX();
  int offsetY=getViewportOffsetY();
  mViewport.offset(offsetX,offsetY);
  final int startIndex=mIsRtl ? childCount - 1 : 0;
  final int endIndex=mIsRtl ? -1 : childCount;
  final int delta=mIsRtl ? -1 : 1;
  int verticalPadding=getPaddingTop() + getPaddingBottom();
  LayoutParams lp=(LayoutParams)getChildAt(startIndex).getLayoutParams();
  LayoutParams nextLp;
  int childLeft=offsetX + (lp.isFullScreenPage ? 0 : getPaddingLeft());
  if (mPageScrolls == null || childCount != mChildCountOnLastLayout) {
    mPageScrolls=new int[childCount];
  }
  for (int i=startIndex; i != endIndex; i+=delta) {
    final View child=getPageAt(i);
    if (child.getVisibility() != View.GONE) {
      lp=(LayoutParams)child.getLayoutParams();
      int childTop;
      if (lp.isFullScreenPage) {
        childTop=offsetY;
      }
 else {
        childTop=offsetY + getPaddingTop() + mInsets.top;
        if (mCenterPagesVertically) {
          childTop+=(getViewportHeight() - mInsets.top - mInsets.bottom- verticalPadding- child.getMeasuredHeight()) / 2;
        }
      }
      final int childWidth=child.getMeasuredWidth();
      final int childHeight=child.getMeasuredHeight();
      if (DEBUG)       Log.d(TAG,"\tlayout-child" + i + ": "+ childLeft+ ", "+ childTop);
      child.layout(childLeft,childTop,childLeft + child.getMeasuredWidth(),childTop + childHeight);
      int scrollOffsetLeft=lp.isFullScreenPage ? 0 : getPaddingLeft();
      mPageScrolls[i]=childLeft - scrollOffsetLeft - offsetX;
      int pageGap=mPageSpacing;
      int next=i + delta;
      if (next != endIndex) {
        nextLp=(LayoutParams)getPageAt(next).getLayoutParams();
      }
 else {
        nextLp=null;
      }
      if (lp.isFullScreenPage) {
        pageGap=getPaddingLeft();
      }
 else       if (nextLp != null && nextLp.isFullScreenPage) {
        pageGap=getPaddingRight();
      }
      childLeft+=childWidth + pageGap + getChildGap();
    }
  }
  if (mFirstLayout && mCurrentPage >= 0 && mCurrentPage < childCount) {
    updateCurrentPageScroll();
    mFirstLayout=false;
  }
  final LayoutTransition transition=getLayoutTransition();
  if (transition != null && transition.isRunning()) {
    transition.addTransitionListener(new LayoutTransition.TransitionListener(){
      @Override public void startTransition(      LayoutTransition transition,      ViewGroup container,      View view,      int transitionType){
      }
      @Override public void endTransition(      LayoutTransition transition,      ViewGroup container,      View view,      int transitionType){
        if (!transition.isRunning()) {
          transition.removeTransitionListener(this);
          updateMaxScrollX();
        }
      }
    }
);
  }
 else {
    updateMaxScrollX();
  }
  if (mScroller.isFinished() && mChildCountOnLastLayout != childCount) {
    if (mRestorePage != INVALID_RESTORE_PAGE) {
      setCurrentPage(mRestorePage);
      mRestorePage=INVALID_RESTORE_PAGE;
    }
 else {
      setCurrentPage(getNextPage());
    }
  }
  mChildCountOnLastLayout=childCount;
  if (isReordering(true)) {
    updateDragViewTranslationDuringDrag();
  }
}
