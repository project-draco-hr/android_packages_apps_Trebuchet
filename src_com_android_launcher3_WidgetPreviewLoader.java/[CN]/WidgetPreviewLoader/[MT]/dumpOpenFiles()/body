{
  try {
    Log.i(TAG,"DUMP OF OPEN FILES (sample rate: 1 every " + SAMPLE_RATE + "):");
    final String TYPE_APK="apk";
    final String TYPE_JAR="jar";
    final String TYPE_PIPE="pipe";
    final String TYPE_SOCKET="socket";
    final String TYPE_DB="db";
    final String TYPE_ANON_INODE="anon_inode";
    final String TYPE_DEV="dev";
    final String TYPE_NON_FS="non-fs";
    final String TYPE_OTHER="other";
    List<String> types=Arrays.asList(TYPE_APK,TYPE_JAR,TYPE_PIPE,TYPE_SOCKET,TYPE_DB,TYPE_ANON_INODE,TYPE_DEV,TYPE_NON_FS,TYPE_OTHER);
    int[] count=new int[types.size()];
    int[] duplicates=new int[types.size()];
    HashSet<String> files=new HashSet<String>();
    int total=0;
    for (int i=0; i < MAX_OPEN_FILES; i++) {
      String fd="/proc/self/fd/" + i;
      try {
        String resolved=new File(fd).getCanonicalPath();
        int type=types.indexOf(TYPE_OTHER);
        if (resolved.startsWith("/dev/")) {
          type=types.indexOf(TYPE_DEV);
        }
 else         if (resolved.endsWith(".apk")) {
          type=types.indexOf(TYPE_APK);
        }
 else         if (resolved.endsWith(".jar")) {
          type=types.indexOf(TYPE_JAR);
        }
 else         if (resolved.contains("/fd/pipe:")) {
          type=types.indexOf(TYPE_PIPE);
        }
 else         if (resolved.contains("/fd/socket:")) {
          type=types.indexOf(TYPE_SOCKET);
        }
 else         if (resolved.contains("/fd/anon_inode:")) {
          type=types.indexOf(TYPE_ANON_INODE);
        }
 else         if (resolved.endsWith(".db") || resolved.contains("/databases/")) {
          type=types.indexOf(TYPE_DB);
        }
 else         if (resolved.startsWith("/proc/") && resolved.contains("/fd/")) {
          type=types.indexOf(TYPE_NON_FS);
        }
        count[type]++;
        total++;
        if (files.contains(resolved)) {
          duplicates[type]++;
        }
        files.add(resolved);
        if (total % SAMPLE_RATE == 0) {
          Log.i(TAG," fd " + i + ": "+ resolved+ " ("+ types.get(type)+ ")");
        }
      }
 catch (      IOException e) {
      }
    }
    for (int i=0; i < types.size(); i++) {
      Log.i(TAG,String.format("Open %10s files: %4d total, %4d duplicates",types.get(i),count[i],duplicates[i]));
    }
  }
 catch (  Throwable t) {
    Log.e(TAG,"Unable to log open files.",t);
  }
}
