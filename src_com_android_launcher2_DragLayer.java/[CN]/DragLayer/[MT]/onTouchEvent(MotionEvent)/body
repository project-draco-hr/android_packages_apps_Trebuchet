{
  if (!mDragging) {
    return false;
  }
  final int action=ev.getAction();
  final float x=ev.getX();
  final float y=ev.getY();
switch (action) {
case MotionEvent.ACTION_DOWN:
    mLastMotionX=x;
  mLastMotionY=y;
if ((x < SCROLL_ZONE) || (x > getWidth() - SCROLL_ZONE)) {
  mScrollState=SCROLL_WAITING_IN_ZONE;
  postDelayed(mScrollRunnable,SCROLL_DELAY);
}
 else {
  mScrollState=SCROLL_OUTSIDE_ZONE;
}
break;
case MotionEvent.ACTION_MOVE:
final int scrollX=mScrollX;
final int scrollY=mScrollY;
final float touchX=mTouchOffsetX;
final float touchY=mTouchOffsetY;
final int offsetX=mBitmapOffsetX;
final int offsetY=mBitmapOffsetY;
int left=(int)(scrollX + mLastMotionX - touchX - offsetX);
int top=(int)(scrollY + mLastMotionY - touchY - offsetY);
final Bitmap dragBitmap=mDragBitmap;
final int width=dragBitmap.getWidth();
final int height=dragBitmap.getHeight();
final Rect rect=mRect;
rect.set(left - 1,top - 1,left + width + 1,top + height + 1);
mLastMotionX=x;
mLastMotionY=y;
left=(int)(scrollX + x - touchX - offsetX);
top=(int)(scrollY + y - touchY - offsetY);
rect.union(left - 1,top - 1,left + width + 1,top + height + 1);
mDragCenter[0]=rect.centerX();
mDragCenter[1]=rect.centerY();
if (DRAW_TARGET_SNAG && mDrawEstimated) {
rect.union(mEstimatedRect);
}
final int[] coordinates=mDropCoordinates;
DropTarget dropTarget=findDropTarget((int)x,(int)y,coordinates);
if (dropTarget != null) {
if (mLastDropTarget == dropTarget) {
dropTarget.onDragOver(mDragSource,coordinates[0],coordinates[1],(int)mTouchOffsetX,(int)mTouchOffsetY,mDragInfo);
}
 else {
if (mLastDropTarget != null) {
mLastDropTarget.onDragExit(mDragSource,coordinates[0],coordinates[1],(int)mTouchOffsetX,(int)mTouchOffsetY,mDragInfo);
}
dropTarget.onDragEnter(mDragSource,coordinates[0],coordinates[1],(int)mTouchOffsetX,(int)mTouchOffsetY,mDragInfo);
}
}
 else {
if (mLastDropTarget != null) {
mLastDropTarget.onDragExit(mDragSource,coordinates[0],coordinates[1],(int)mTouchOffsetX,(int)mTouchOffsetY,mDragInfo);
}
}
mDrawEstimated=false;
if (DRAW_TARGET_SNAG && dropTarget != null) {
Rect foundEstimate=dropTarget.estimateDropLocation(mDragSource,(int)(scrollX + mLastMotionX),(int)(scrollY + mLastMotionY),(int)mTouchOffsetX,(int)mTouchOffsetY,mDragInfo,mEstimatedRect);
if (foundEstimate != null) {
mEstimatedCenter[0]=foundEstimate.centerX();
mEstimatedCenter[1]=foundEstimate.centerY();
int deltaX=(int)Math.abs(mEstimatedCenter[0] - mDragCenter[0]);
int deltaY=(int)Math.abs(mEstimatedCenter[1] - mDragCenter[1]);
if (deltaX > mTriggerWidth || deltaY > mTriggerHeight) {
mDrawEstimated=true;
}
}
}
if (DRAW_TARGET_SNAG && mDrawEstimated) {
rect.union(mEstimatedRect);
}
invalidate(rect);
mLastDropTarget=dropTarget;
boolean inDragRegion=false;
if (mDragRegion != null) {
final RectF region=mDragRegion;
final boolean inRegion=region.contains(ev.getRawX(),ev.getRawY());
if (!mEnteredRegion && inRegion) {
mDragPaint=mTrashPaint;
mEnteredRegion=true;
inDragRegion=true;
}
 else if (mEnteredRegion && !inRegion) {
mDragPaint=null;
mEnteredRegion=false;
}
}
if (!inDragRegion && x < SCROLL_ZONE) {
if (mScrollState == SCROLL_OUTSIDE_ZONE) {
mScrollState=SCROLL_WAITING_IN_ZONE;
mScrollRunnable.setDirection(SCROLL_LEFT);
postDelayed(mScrollRunnable,SCROLL_DELAY);
}
}
 else if (!inDragRegion && x > getWidth() - SCROLL_ZONE) {
if (mScrollState == SCROLL_OUTSIDE_ZONE) {
mScrollState=SCROLL_WAITING_IN_ZONE;
mScrollRunnable.setDirection(SCROLL_RIGHT);
postDelayed(mScrollRunnable,SCROLL_DELAY);
}
}
 else {
if (mScrollState == SCROLL_WAITING_IN_ZONE) {
mScrollState=SCROLL_OUTSIDE_ZONE;
mScrollRunnable.setDirection(SCROLL_RIGHT);
removeCallbacks(mScrollRunnable);
}
}
break;
case MotionEvent.ACTION_UP:
removeCallbacks(mScrollRunnable);
if (mShouldDrop) {
drop(x,y);
mShouldDrop=false;
}
endDrag();
break;
case MotionEvent.ACTION_CANCEL:
endDrag();
}
return true;
}
