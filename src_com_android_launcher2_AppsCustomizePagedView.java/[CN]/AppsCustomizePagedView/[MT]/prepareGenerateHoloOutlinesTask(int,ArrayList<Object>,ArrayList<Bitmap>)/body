{
  Iterator<AppsCustomizeAsyncTask> iter=mRunningTasks.iterator();
  while (iter.hasNext()) {
    AppsCustomizeAsyncTask task=(AppsCustomizeAsyncTask)iter.next();
    int taskPage=task.page;
    if ((taskPage == page) && (task.dataType == AsyncTaskPageData.Type.LoadHolographicIconsData)) {
      task.cancel(false);
      iter.remove();
    }
  }
  AsyncTaskPageData pageData=new AsyncTaskPageData(page,items,images,new AsyncTaskCallback(){
    @Override public void run(    AppsCustomizeAsyncTask task,    AsyncTaskPageData data){
      task.syncThreadPriority();
      ArrayList<Bitmap> images=data.generatedImages;
      ArrayList<Bitmap> srcImages=data.sourceImages;
      int count=srcImages.size();
      Canvas c=new Canvas();
      for (int i=0; i < count && !task.isCancelled(); ++i) {
        task.syncThreadPriority();
        Bitmap b=srcImages.get(i);
        Bitmap outline=Bitmap.createBitmap(b.getWidth(),b.getHeight(),Bitmap.Config.ARGB_8888);
        c.setBitmap(outline);
        c.save();
        c.drawBitmap(b,0,0,null);
        c.restore();
        c.setBitmap(null);
        images.add(outline);
      }
    }
  }
,new AsyncTaskCallback(){
    @Override public void run(    AppsCustomizeAsyncTask task,    AsyncTaskPageData data){
      mRunningTasks.remove(task);
      if (task.isCancelled())       return;
      if (task.page > getPageCount())       return;
      if (task.pageContentType != mContentType)       return;
      onHolographicPageItemsLoaded(data);
    }
  }
);
  AppsCustomizeAsyncTask t=new AppsCustomizeAsyncTask(page,mContentType,AsyncTaskPageData.Type.LoadHolographicIconsData);
  t.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
  t.executeOnExecutor(AsyncTask.SERIAL_EXECUTOR,pageData);
  mRunningTasks.add(t);
}
