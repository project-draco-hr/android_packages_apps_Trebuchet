{
  Iterator<AppsCustomizeAsyncTask> iter=mRunningTasks.iterator();
  while (iter.hasNext()) {
    AppsCustomizeAsyncTask task=(AppsCustomizeAsyncTask)iter.next();
    int taskPage=task.page;
    if ((taskPage == page) || taskPage < getAssociatedLowerPageBound(mCurrentPage) || taskPage > getAssociatedUpperPageBound(mCurrentPage)) {
      task.cancel(false);
      iter.remove();
    }
 else {
      task.setThreadPriority(getThreadPriorityForPage(taskPage));
    }
  }
  final int sleepMs=getSleepForPage(page);
  AsyncTaskPageData pageData=new AsyncTaskPageData(page,widgets,cellWidth,cellHeight,cellCountX,new AsyncTaskCallback(){
    @Override public void run(    AppsCustomizeAsyncTask task,    AsyncTaskPageData data){
      try {
        try {
          Thread.sleep(sleepMs);
        }
 catch (        Exception e) {
        }
        loadWidgetPreviewsInBackground(task,data);
      }
  finally {
        if (task.isCancelled()) {
          data.cleanup(true);
        }
      }
    }
  }
,new AsyncTaskCallback(){
    @Override public void run(    AppsCustomizeAsyncTask task,    AsyncTaskPageData data){
      try {
        mRunningTasks.remove(task);
        if (task.isCancelled())         return;
        if (task.page > getPageCount())         return;
        if (task.pageContentType != mContentType)         return;
        onSyncWidgetPageItems(data);
      }
  finally {
        data.cleanup(task.isCancelled());
      }
    }
  }
);
  AppsCustomizeAsyncTask t=new AppsCustomizeAsyncTask(page,mContentType,AsyncTaskPageData.Type.LoadWidgetPreviewData);
  t.setThreadPriority(getThreadPriorityForPage(page));
  t.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,pageData);
  mRunningTasks.add(t);
}
