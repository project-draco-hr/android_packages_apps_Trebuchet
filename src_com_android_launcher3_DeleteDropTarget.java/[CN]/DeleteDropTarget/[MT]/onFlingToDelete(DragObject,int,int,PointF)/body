{
  final boolean isWidgets=d.dragSource instanceof WidgetsContainerView;
  final boolean isAllapps=d.dragSource instanceof AppsContainerView;
  d.dragView.setColor(0);
  d.dragView.updateInitialScaleToCurrentScale();
  if (isWidgets || isAllapps) {
    resetHoverColor();
  }
  if (mFlingDeleteMode == MODE_FLING_DELETE_TO_TRASH) {
    mSearchDropTargetBar.deferOnDragEnd();
    mSearchDropTargetBar.finishAnimations();
  }
  final ViewConfiguration config=ViewConfiguration.get(mLauncher);
  final DragLayer dragLayer=mLauncher.getDragLayer();
  final int duration=FLING_DELETE_ANIMATION_DURATION;
  final long startTime=AnimationUtils.currentAnimationTimeMillis();
  final TimeInterpolator tInterpolator=new TimeInterpolator(){
    private int mCount=-1;
    private float mOffset=0f;
    @Override public float getInterpolation(    float t){
      if (mCount < 0) {
        mCount++;
      }
 else       if (mCount == 0) {
        mOffset=Math.min(0.5f,(float)(AnimationUtils.currentAnimationTimeMillis() - startTime) / duration);
        mCount++;
      }
      return Math.min(1f,mOffset + t);
    }
  }
;
  AnimatorUpdateListener updateCb=null;
  if (mFlingDeleteMode == MODE_FLING_DELETE_TO_TRASH) {
    updateCb=createFlingToTrashAnimatorListener(dragLayer,d,vel,config);
  }
 else   if (mFlingDeleteMode == MODE_FLING_DELETE_ALONG_VECTOR) {
    updateCb=createFlingAlongVectorAnimatorListener(dragLayer,d,vel,startTime,duration,config);
  }
  deferCompleteDropIfUninstalling(d);
  Runnable onAnimationEndRunnable=new Runnable(){
    @Override public void run(){
      if (!isWidgets || !isAllapps) {
        mLauncher.exitSpringLoadedDragMode();
        completeDrop(d);
      }
      mLauncher.getDragController().onDeferredEndFling(d);
    }
  }
;
  dragLayer.animateView(d.dragView,updateCb,duration,tInterpolator,onAnimationEndRunnable,DragLayer.ANIMATION_END_DISAPPEAR,null);
}
