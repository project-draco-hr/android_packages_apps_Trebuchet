{
  int numItemsPerPage=mWidgetCountX * mWidgetCountY;
  final PagedViewGridLayout layout=(PagedViewGridLayout)getPageAt(page);
  final ArrayList<Object> items=new ArrayList<Object>();
  int contentWidth=mContentWidth - layout.getPaddingLeft() - layout.getPaddingRight();
  final int cellWidth=contentWidth / mWidgetCountX;
  int contentHeight=mContentHeight - layout.getPaddingTop() - layout.getPaddingBottom();
  final int cellHeight=contentHeight / mWidgetCountY;
  int offset=page * numItemsPerPage;
  for (int i=offset; i < Math.min(offset + numItemsPerPage,mWidgets.size()); ++i) {
    items.add(mWidgets.get(i));
  }
  layout.setColumnCount(layout.getCellCountX());
  for (int i=0; i < items.size(); ++i) {
    Object rawInfo=items.get(i);
    PendingAddItemInfo createItemInfo=null;
    PagedViewWidget widget=(PagedViewWidget)mLayoutInflater.inflate(R.layout.apps_customize_widget,layout,false);
    if (rawInfo instanceof LauncherAppWidgetProviderInfo) {
      LauncherAppWidgetProviderInfo info=(LauncherAppWidgetProviderInfo)rawInfo;
      createItemInfo=new PendingAddWidgetInfo(info,null);
      widget.applyFromAppWidgetProviderInfo(info,-1,getWidgetPreviewLoader());
      widget.setTag(createItemInfo);
      widget.setShortPressListener(this);
    }
 else     if (rawInfo instanceof ResolveInfo) {
      ResolveInfo info=(ResolveInfo)rawInfo;
      createItemInfo=new PendingAddShortcutInfo(info.activityInfo);
      createItemInfo.itemType=LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT;
      createItemInfo.componentName=new ComponentName(info.activityInfo.packageName,info.activityInfo.name);
      widget.applyFromResolveInfo(mPackageManager,info,getWidgetPreviewLoader());
      widget.setTag(createItemInfo);
    }
    widget.setOnClickListener(this);
    widget.setOnLongClickListener(this);
    widget.setOnTouchListener(this);
    widget.setOnKeyListener(mKeyListener);
    int ix=i % mWidgetCountX;
    int iy=i / mWidgetCountX;
    if (ix > 0) {
      View border=widget.findViewById(R.id.left_border);
      border.setVisibility(View.VISIBLE);
    }
    if (ix < mWidgetCountX - 1) {
      View border=widget.findViewById(R.id.right_border);
      border.setVisibility(View.VISIBLE);
    }
    GridLayout.LayoutParams lp=new GridLayout.LayoutParams(GridLayout.spec(iy,GridLayout.START),GridLayout.spec(ix,GridLayout.TOP));
    lp.width=cellWidth;
    lp.height=cellHeight;
    lp.setGravity(Gravity.TOP | Gravity.START);
    layout.addView(widget,lp);
  }
  layout.setOnLayoutListener(new Runnable(){
    public void run(){
      int maxPreviewWidth=cellWidth;
      int maxPreviewHeight=cellHeight;
      if (layout.getChildCount() > 0) {
        PagedViewWidget w=(PagedViewWidget)layout.getChildAt(0);
        int[] maxSize=w.getPreviewSize();
        maxPreviewWidth=maxSize[0];
        maxPreviewHeight=maxSize[1];
      }
      getWidgetPreviewLoader().setPreviewSize(maxPreviewWidth,maxPreviewHeight,mWidgetSpacingLayout);
      if (immediate) {
        AsyncTaskPageData data=new AsyncTaskPageData(page,items,maxPreviewWidth,maxPreviewHeight,null,null,getWidgetPreviewLoader());
        loadWidgetPreviewsInBackground(null,data);
        onSyncWidgetPageItems(data,immediate);
      }
 else {
        if (mInTransition) {
          mDeferredPrepareLoadWidgetPreviewsTasks.add(this);
        }
 else {
          prepareLoadWidgetPreviewsTask(page,items,maxPreviewWidth,maxPreviewHeight,mWidgetCountX);
        }
      }
      layout.setOnLayoutListener(null);
    }
  }
);
}
