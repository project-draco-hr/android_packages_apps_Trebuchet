{
  if (!(getParent() instanceof CellLayoutChildren))   return;
  CellLayoutChildren clc=(CellLayoutChildren)getParent();
  final CellLayout cellLayout=(CellLayout)clc.getParent();
  ObjectAnimator oa;
  if (mMode == PARTIAL_GROW) {
    PropertyValuesHolder alpha=PropertyValuesHolder.ofFloat("alpha",0);
    PropertyValuesHolder scaleX=PropertyValuesHolder.ofFloat("scaleX",0.9f);
    PropertyValuesHolder scaleY=PropertyValuesHolder.ofFloat("scaleY",0.9f);
    oa=ObjectAnimator.ofPropertyValuesHolder(this,alpha,scaleX,scaleY);
  }
 else {
    CellLayout.LayoutParams iconLp=(CellLayout.LayoutParams)mFolderIcon.getLayoutParams();
    CellLayout.LayoutParams lp=(CellLayout.LayoutParams)getLayoutParams();
    PropertyValuesHolder width=PropertyValuesHolder.ofInt("width",iconLp.width);
    PropertyValuesHolder height=PropertyValuesHolder.ofInt("height",iconLp.height);
    PropertyValuesHolder x=PropertyValuesHolder.ofInt("x",iconLp.x);
    PropertyValuesHolder y=PropertyValuesHolder.ofInt("y",iconLp.y);
    oa=ObjectAnimator.ofPropertyValuesHolder(lp,width,height,x,y);
    oa.addUpdateListener(new AnimatorUpdateListener(){
      public void onAnimationUpdate(      ValueAnimator animation){
        requestLayout();
      }
    }
);
    PropertyValuesHolder alpha=PropertyValuesHolder.ofFloat("alpha",0f);
    ObjectAnimator alphaOa=ObjectAnimator.ofPropertyValuesHolder(mContent,alpha);
    alphaOa.setDuration(mExpandDuration);
    alphaOa.setInterpolator(new DecelerateInterpolator(2.0f));
    alphaOa.start();
  }
  oa.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      onCloseComplete();
      cellLayout.removeViewWithoutMarkingCells(Folder.this);
      mState=STATE_SMALL;
    }
    @Override public void onAnimationStart(    Animator animation){
      mState=STATE_ANIMATING;
    }
  }
);
  oa.setDuration(mExpandDuration);
  oa.start();
}
