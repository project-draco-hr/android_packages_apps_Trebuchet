{
  Field[] fields=this.getClass().getFields();
  if (mBuffer == null) {
    int maxIndex=0;
    for (    Field f : fields) {
      AllocationIndex index=f.getAnnotation(AllocationIndex.class);
      if (index != null) {
        int value=index.value();
        if (value > maxIndex) {
          maxIndex=value;
        }
      }
    }
    mBuffer=new int[maxIndex + 1];
    if (true) {
      for (      Field f : fields) {
        AllocationIndex index=f.getAnnotation(AllocationIndex.class);
        if (index != null) {
          int i=index.value();
          if (mBuffer[i] != 0) {
            throw new RuntimeException("@AllocationIndex on field in class " + this.getClass().getName() + " with duplicate value "+ i+ " for field "+ f.getName()+ ". The other field is "+ fields[mBuffer[i] - 1].getName()+ '.');
          }
          mBuffer[i]=i + 1;
        }
      }
      for (int i=0; i < mBuffer.length; i++) {
        mBuffer[i]=0;
      }
    }
    mAlloc=Allocation.createSized(mRS,Element.USER_I32,mBuffer.length);
  }
  int[] buf=mBuffer;
  for (  Field f : fields) {
    AllocationIndex index=f.getAnnotation(AllocationIndex.class);
    if (index != null) {
      try {
        buf[index.value()]=f.getInt(this);
      }
 catch (      IllegalAccessException ex) {
        throw new RuntimeException(ex);
      }
    }
  }
  mAlloc.data(buf);
}
