{
  boolean enforceMinimumPagedWidths=false;
  boolean centerPagedViewCellLayouts=false;
switch (mCustomizationType) {
case WidgetCustomization:
    syncWidgetPages();
  enforceMinimumPagedWidths=true;
break;
case ShortcutCustomization:
syncListPages(mShortcutList);
centerPagedViewCellLayouts=true;
break;
case WallpaperCustomization:
syncWallpaperPages();
enforceMinimumPagedWidths=true;
break;
case ApplicationCustomization:
syncAppPages();
centerPagedViewCellLayouts=false;
break;
default :
removeAllViews();
setCurrentPage(0);
break;
}
final int childCount=getChildCount();
if (centerPagedViewCellLayouts) {
if (childCount == 1) {
PagedViewCellLayout layout=(PagedViewCellLayout)getChildAt(0);
layout.enableCenteredContent(true);
}
 else {
for (int i=0; i < childCount; ++i) {
PagedViewCellLayout layout=(PagedViewCellLayout)getChildAt(i);
layout.enableCenteredContent(false);
}
}
}
if (enforceMinimumPagedWidths && childCount > 1) {
setMinimumWidthOverride(mMinPageWidth);
}
 else {
resetMinimumWidthOverride();
}
requestLayout();
post(new Runnable(){
@Override public void run(){
setCurrentPage(Math.max(0,Math.min(childCount - 1,getCurrentPage())));
forceUpdateAdjacentPagesAlpha();
}
}
);
}
