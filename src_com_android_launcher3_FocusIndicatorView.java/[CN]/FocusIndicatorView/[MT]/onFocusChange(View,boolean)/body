{
  mPendingCall=null;
  if (!mInitiated && (getWidth() == 0)) {
    mPendingCall=Pair.create(v,hasFocus);
    invalidate();
    return;
  }
  if (!mInitiated) {
    mCommonParent=(View)this.getParent();
    computeLocationRelativeToParent(this,mCommonParent,mIndicatorPos);
    mInitiated=true;
  }
  if (hasFocus) {
    int indicatorWidth=getWidth();
    int indicatorHeight=getHeight();
    endCurrentAnimation();
    ViewAnimState nextState=new ViewAnimState();
    nextState.scaleX=v.getScaleX() * v.getWidth() / indicatorWidth;
    nextState.scaleY=v.getScaleY() * v.getHeight() / indicatorHeight;
    computeLocationRelativeToParent(v,mCommonParent,mTargetViewPos);
    nextState.x=mTargetViewPos[0] - mIndicatorPos[0] - (1 - nextState.scaleX) * indicatorWidth / 2;
    nextState.y=mTargetViewPos[1] - mIndicatorPos[1] - (1 - nextState.scaleY) * indicatorHeight / 2;
    if (getAlpha() > MIN_VISIBLE_ALPHA) {
      mTargetState=nextState;
      mCurrentAnimation=LauncherAnimUtils.ofPropertyValuesHolder(this,PropertyValuesHolder.ofFloat(View.ALPHA,1),PropertyValuesHolder.ofFloat(View.TRANSLATION_X,mTargetState.x),PropertyValuesHolder.ofFloat(View.TRANSLATION_Y,mTargetState.y),PropertyValuesHolder.ofFloat(View.SCALE_X,mTargetState.scaleX),PropertyValuesHolder.ofFloat(View.SCALE_Y,mTargetState.scaleY));
    }
 else {
      applyState(nextState);
      mCurrentAnimation=LauncherAnimUtils.ofPropertyValuesHolder(this,PropertyValuesHolder.ofFloat(View.ALPHA,1));
    }
    mLastFocusedView=v;
  }
 else {
    if (mLastFocusedView == v) {
      mLastFocusedView=null;
      endCurrentAnimation();
      mCurrentAnimation=LauncherAnimUtils.ofPropertyValuesHolder(this,PropertyValuesHolder.ofFloat(View.ALPHA,0));
    }
  }
  if (mCurrentAnimation != null) {
    mCurrentAnimation.setDuration(ANIM_DURATION).start();
  }
}
