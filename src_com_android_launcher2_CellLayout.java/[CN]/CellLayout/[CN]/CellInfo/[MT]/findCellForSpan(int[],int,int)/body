{
  if (this.cell == null && this.spanX >= spanX && this.spanY >= spanY) {
    if (cellXY != null) {
      cellXY[0]=cellX;
      cellXY[1]=cellY;
    }
    return true;
  }
  int startX=0;
  if (intersectX >= 0) {
    startX=Math.max(startX,intersectX - (spanX - 1));
  }
  int endX=mCountX - (spanX - 1);
  if (intersectX >= 0) {
    endX=Math.min(endX,intersectX + (spanX - 1));
  }
  int startY=0;
  if (intersectY >= 0) {
    startY=Math.max(startY,intersectY - (spanY - 1));
  }
  int endY=mCountY - (spanY - 1);
  if (intersectY >= 0) {
    endY=Math.min(endY,intersectY + (spanY - 1));
  }
  for (int x=startX; x < endX; x++) {
    inner:     for (int y=startY; y < endY; y++) {
      for (int i=0; i < spanX; i++) {
        for (int j=0; j < spanY; j++) {
          if (mOccupied[x + i][y + j]) {
            y+=j;
            continue inner;
          }
        }
      }
      if (cellXY != null) {
        cellXY[0]=x;
        cellXY[1]=y;
      }
      return true;
    }
  }
  return false;
}
