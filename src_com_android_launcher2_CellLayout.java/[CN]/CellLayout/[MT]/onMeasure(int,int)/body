{
  int widthSpecMode=MeasureSpec.getMode(widthMeasureSpec);
  int widthSpecSize=MeasureSpec.getSize(widthMeasureSpec);
  int heightSpecMode=MeasureSpec.getMode(heightMeasureSpec);
  int heightSpecSize=MeasureSpec.getSize(heightMeasureSpec);
  if (widthSpecMode == MeasureSpec.UNSPECIFIED || heightSpecMode == MeasureSpec.UNSPECIFIED) {
    throw new RuntimeException("CellLayout cannot have UNSPECIFIED dimensions");
  }
  final int cellWidth=mCellWidth;
  final int cellHeight=mCellHeight;
  if (mOccupied == null) {
    mOccupied=new boolean[mCountX][mCountY];
  }
  int numWidthGaps=mCountX - 1;
  int numHeightGaps=mCountY - 1;
  int vSpaceLeft=heightSpecSize - mTopPadding - mBottomPadding- (cellHeight * mCountY);
  mHeightGap=vSpaceLeft / numHeightGaps;
  int hSpaceLeft=widthSpecSize - mLeftPadding - mRightPadding- (cellWidth * mCountX);
  mWidthGap=hSpaceLeft / numWidthGaps;
  int count=getChildCount();
  for (int i=0; i < count; i++) {
    View child=getChildAt(i);
    LayoutParams lp=(LayoutParams)child.getLayoutParams();
    lp.setup(cellWidth,cellHeight,mWidthGap,mHeightGap,mLeftPadding,mTopPadding);
    int childWidthMeasureSpec=MeasureSpec.makeMeasureSpec(lp.width,MeasureSpec.EXACTLY);
    int childheightMeasureSpec=MeasureSpec.makeMeasureSpec(lp.height,MeasureSpec.EXACTLY);
    child.measure(childWidthMeasureSpec,childheightMeasureSpec);
  }
  setMeasuredDimension(widthSpecSize,heightSpecSize);
}
