{
  mIntersectingViews.clear();
  mOccupiedRect.set(cellX,cellY,cellX + spanX,cellY + spanY);
  if (ignoreView != null) {
    LayoutParams lp=(LayoutParams)ignoreView.getLayoutParams();
    lp.tmpCellX=cellX;
    lp.tmpCellY=cellY;
  }
  int childCount=mShortcutsAndWidgets.getChildCount();
  Rect r0=new Rect(cellX,cellY,cellX + spanX,cellY + spanY);
  Rect r1=new Rect();
  for (int i=0; i < childCount; i++) {
    View child=mShortcutsAndWidgets.getChildAt(i);
    if (child == ignoreView)     continue;
    LayoutParams lp=(LayoutParams)child.getLayoutParams();
    r1.set(lp.cellX,lp.cellY,lp.cellX + lp.cellHSpan,lp.cellY + lp.cellVSpan);
    if (Rect.intersects(r0,r1)) {
      if (!lp.canReorder) {
        return false;
      }
      mIntersectingViews.add(child);
    }
  }
  if (pushViewsToTempLocation(mIntersectingViews,mOccupiedRect,direction)) {
    return true;
  }
  direction[0]*=-1;
  direction[1]*=-1;
  if (pushViewsToTempLocation(mIntersectingViews,mOccupiedRect,direction)) {
    return true;
  }
  direction[0]*=-1;
  direction[1]*=-1;
  if (addViewsToTempLocation(mIntersectingViews,mOccupiedRect,direction)) {
    return true;
  }
  for (  View v : mIntersectingViews) {
    if (!addViewToTempLocation(v,mOccupiedRect,direction)) {
      return false;
    }
  }
  return true;
}
