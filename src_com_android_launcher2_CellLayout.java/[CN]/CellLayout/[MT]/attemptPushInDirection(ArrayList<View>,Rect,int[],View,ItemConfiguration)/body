{
  if ((Math.abs(direction[0]) + Math.abs(direction[1])) > 1) {
    int temp=direction[1];
    direction[1]=0;
    if (addViewsToTempLocation(intersectingViews,occupied,direction,true,ignoreView,solution)) {
      return true;
    }
    direction[1]=temp;
    temp=direction[0];
    direction[0]=0;
    if (addViewsToTempLocation(intersectingViews,occupied,direction,true,ignoreView,solution)) {
      return true;
    }
    direction[0]=temp;
    direction[0]*=-1;
    direction[1]*=-1;
    temp=direction[1];
    direction[1]=0;
    if (addViewsToTempLocation(intersectingViews,occupied,direction,true,ignoreView,solution)) {
      return true;
    }
    direction[1]=temp;
    temp=direction[0];
    direction[0]=0;
    if (addViewsToTempLocation(intersectingViews,occupied,direction,true,ignoreView,solution)) {
      return true;
    }
    direction[0]=temp;
    direction[0]*=-1;
    direction[1]*=-1;
  }
 else {
    if (addViewsToTempLocation(intersectingViews,occupied,direction,true,ignoreView,solution)) {
      return true;
    }
    direction[0]*=-1;
    direction[1]*=-1;
    if (addViewsToTempLocation(intersectingViews,occupied,direction,true,ignoreView,solution)) {
      return true;
    }
    direction[0]*=-1;
    direction[1]*=-1;
    int temp=direction[1];
    direction[1]=direction[0];
    direction[0]=temp;
    if (addViewsToTempLocation(intersectingViews,occupied,direction,true,ignoreView,solution)) {
      return true;
    }
    direction[0]*=-1;
    direction[1]*=-1;
    if (addViewsToTempLocation(intersectingViews,occupied,direction,true,ignoreView,solution)) {
      return true;
    }
    direction[0]*=-1;
    direction[1]*=-1;
    temp=direction[1];
    direction[1]=direction[0];
    direction[0]=temp;
  }
  return false;
}
