{
  CellLayoutChildren clc=getChildrenLayout();
  if (clc.indexOfChild(child) != -1 && !mOccupied[cellX][cellY]) {
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    final ItemInfo info=(ItemInfo)child.getTag();
    if (mReorderAnimators.containsKey(lp)) {
      mReorderAnimators.get(lp).cancel();
      mReorderAnimators.remove(lp);
    }
    int oldX=lp.x;
    int oldY=lp.y;
    mOccupied[lp.cellX][lp.cellY]=false;
    mOccupied[cellX][cellY]=true;
    lp.isLockedToGrid=true;
    lp.cellX=info.cellX=cellX;
    lp.cellY=info.cellY=cellY;
    clc.setupLp(lp);
    lp.isLockedToGrid=false;
    int newX=lp.x;
    int newY=lp.y;
    PropertyValuesHolder x=PropertyValuesHolder.ofInt("x",oldX,newX);
    PropertyValuesHolder y=PropertyValuesHolder.ofInt("y",oldY,newY);
    ObjectAnimator oa=ObjectAnimator.ofPropertyValuesHolder(lp,x,y);
    oa.setDuration(duration);
    mReorderAnimators.put(lp,oa);
    oa.addUpdateListener(new AnimatorUpdateListener(){
      public void onAnimationUpdate(      ValueAnimator animation){
        child.requestLayout();
      }
    }
);
    oa.addListener(new AnimatorListenerAdapter(){
      boolean cancelled=false;
      public void onAnimationEnd(      Animator animation){
        if (!cancelled) {
          lp.isLockedToGrid=true;
        }
        if (mReorderAnimators.containsKey(lp)) {
          mReorderAnimators.remove(lp);
        }
      }
      public void onAnimationCancel(      Animator animation){
        cancelled=true;
      }
    }
);
    oa.start();
    return true;
  }
  return false;
}
