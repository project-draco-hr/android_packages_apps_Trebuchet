{
  if (mBackgroundAlpha > 0.0f) {
    Drawable bg;
    if (mIsDragOverlapping) {
      bg=mActiveGlowBackground;
    }
 else {
      bg=mNormalBackground;
    }
    bg.setAlpha((int)(mBackgroundAlpha * mBackgroundAlphaMultiplier * 255));
    bg.setBounds(mBackgroundRect);
    bg.draw(canvas);
  }
  if (mCrosshairsVisibility > 0.0f) {
    final int countX=mCountX;
    final int countY=mCountY;
    final float MAX_ALPHA=0.4f;
    final int MAX_VISIBLE_DISTANCE=600;
    final float DISTANCE_MULTIPLIER=0.002f;
    final Drawable d=mCrosshairsDrawable;
    final int width=d.getIntrinsicWidth();
    final int height=d.getIntrinsicHeight();
    int x=getPaddingLeft() - (mWidthGap / 2) - (width / 2);
    for (int col=0; col <= countX; col++) {
      int y=getPaddingTop() - (mHeightGap / 2) - (height / 2);
      for (int row=0; row <= countY; row++) {
        mTmpPointF.set(x - mDragCenter.x,y - mDragCenter.y);
        float dist=mTmpPointF.length();
        float alpha=Math.min(MAX_ALPHA,DISTANCE_MULTIPLIER * (MAX_VISIBLE_DISTANCE - dist));
        if (alpha > 0.0f) {
          d.setBounds(x,y,x + width,y + height);
          d.setAlpha((int)(alpha * 255 * mCrosshairsVisibility));
          d.draw(canvas);
        }
        y+=mCellHeight + mHeightGap;
      }
      x+=mCellWidth + mWidthGap;
    }
  }
  final Paint paint=mDragOutlinePaint;
  for (int i=0; i < mDragOutlines.length; i++) {
    final float alpha=mDragOutlineAlphas[i];
    if (alpha > 0) {
      final Rect r=mDragOutlines[i];
      final Bitmap b=(Bitmap)mDragOutlineAnims[i].getTag();
      paint.setAlpha((int)(alpha + .5f));
      canvas.drawBitmap(b,null,r,paint);
    }
  }
  if (mPressedOrFocusedIcon != null) {
    final int padding=mPressedOrFocusedIcon.getPressedOrFocusedBackgroundPadding();
    final Bitmap b=mPressedOrFocusedIcon.getPressedOrFocusedBackground();
    if (b != null) {
      canvas.drawBitmap(b,mPressedOrFocusedIcon.getLeft() + getPaddingLeft() - padding,mPressedOrFocusedIcon.getTop() + getPaddingTop() - padding,null);
    }
  }
  if (DEBUG_VISUALIZE_OCCUPIED) {
    int[] pt=new int[2];
    ColorDrawable cd=new ColorDrawable(Color.RED);
    cd.setBounds(0,0,80,80);
    for (int i=0; i < mCountX; i++) {
      for (int j=0; j < mCountY; j++) {
        if (mOccupied[i][j]) {
          cellToPoint(i,j,pt);
          canvas.save();
          canvas.translate(pt[0],pt[1]);
          cd.draw(canvas);
          canvas.restore();
        }
      }
    }
  }
  for (int i=0; i < mFolderOuterRings.size(); i++) {
    FolderRingAnimator fra=mFolderOuterRings.get(i);
    Drawable d=FolderRingAnimator.sSharedOuterRingDrawable;
    int width=(int)fra.getOuterRingSize();
    int height=width;
    cellToPoint(fra.mCellX,fra.mCellY,mTempLocation);
    int centerX=mTempLocation[0] + mCellWidth / 2;
    int centerY=mTempLocation[1] + FolderRingAnimator.sPreviewSize / 2;
    canvas.save();
    canvas.translate(centerX - width / 2,centerY - height / 2);
    d.setBounds(0,0,width,height);
    d.draw(canvas);
    canvas.restore();
    d=FolderRingAnimator.sSharedInnerRingDrawable;
    width=(int)fra.getInnerRingSize();
    height=width;
    cellToPoint(fra.mCellX,fra.mCellY,mTempLocation);
    centerX=mTempLocation[0] + mCellWidth / 2;
    centerY=mTempLocation[1] + FolderRingAnimator.sPreviewSize / 2;
    canvas.save();
    canvas.translate(centerX - width / 2,centerY - width / 2);
    d.setBounds(0,0,width,height);
    d.draw(canvas);
    canvas.restore();
  }
  if (mFolderLeaveBehindCell[0] >= 0 && mFolderLeaveBehindCell[1] >= 0) {
    Drawable d=FolderIcon.sSharedFolderLeaveBehind;
    int width=d.getIntrinsicWidth();
    int height=d.getIntrinsicHeight();
    cellToPoint(mFolderLeaveBehindCell[0],mFolderLeaveBehindCell[1],mTempLocation);
    int centerX=mTempLocation[0] + mCellWidth / 2;
    int centerY=mTempLocation[1] + FolderRingAnimator.sPreviewSize / 2;
    canvas.save();
    canvas.translate(centerX - width / 2,centerY - width / 2);
    d.setBounds(0,0,width,height);
    d.draw(canvas);
    canvas.restore();
  }
}
