{
  if (LauncherApplication.isScreenXLarge() && mBackgroundAlpha > 0.0f) {
    Drawable bg;
    boolean mini=getScaleX() < 0.5f;
    if (mIsDragOverlapping) {
      bg=mini ? mActiveBackgroundMini : mActiveGlowBackground;
    }
 else     if (mIsDragOccuring && mAcceptsDrops) {
      bg=mini ? mActiveBackgroundMini : mActiveBackground;
    }
 else     if (mIsDefaultDropTarget && mini) {
      bg=mNormalGlowBackgroundMini;
    }
 else {
      bg=mini ? mNormalBackgroundMini : mNormalBackground;
    }
    bg.setAlpha((int)(mBackgroundAlpha * mBackgroundAlphaMultiplier * 255));
    bg.setBounds(mBackgroundRect);
    bg.draw(canvas);
    if (mini && mIsDragOverlapping) {
      boolean modifiedClipRect=false;
      if (mGlowBackgroundScale > 1.0f) {
        float marginFraction=(mGlowBackgroundScale - 1.0f) / 2.0f;
        Rect clipRect=canvas.getClipBounds();
        int marginX=(int)(marginFraction * (clipRect.right - clipRect.left));
        int marginY=(int)(marginFraction * (clipRect.bottom - clipRect.top));
        canvas.save(Canvas.CLIP_SAVE_FLAG);
        canvas.clipRect(-marginX,-marginY,getWidth() + marginX,getHeight() + marginY,Region.Op.REPLACE);
        modifiedClipRect=true;
      }
      mActiveGlowBackgroundMini.setAlpha((int)(mBackgroundAlpha * mGlowBackgroundAlpha * 255));
      mActiveGlowBackgroundMini.setBounds(mGlowBackgroundRect);
      mActiveGlowBackgroundMini.draw(canvas);
      if (modifiedClipRect) {
        canvas.restore();
      }
    }
  }
  if (mCrosshairsVisibility > 0.0f) {
    final int countX=mCountX;
    final int countY=mCountY;
    final float MAX_ALPHA=0.4f;
    final int MAX_VISIBLE_DISTANCE=600;
    final float DISTANCE_MULTIPLIER=0.002f;
    final Drawable d=mCrosshairsDrawable;
    final int width=d.getIntrinsicWidth();
    final int height=d.getIntrinsicHeight();
    int x=getLeftPadding() - (mWidthGap / 2) - (width / 2);
    for (int col=0; col <= countX; col++) {
      int y=getTopPadding() - (mHeightGap / 2) - (height / 2);
      for (int row=0; row <= countY; row++) {
        mTmpPointF.set(x - mDragCenter.x,y - mDragCenter.y);
        float dist=mTmpPointF.length();
        float alpha=Math.min(MAX_ALPHA,DISTANCE_MULTIPLIER * (MAX_VISIBLE_DISTANCE - dist));
        if (alpha > 0.0f) {
          d.setBounds(x,y,x + width,y + height);
          d.setAlpha((int)(alpha * 255 * mCrosshairsVisibility));
          d.draw(canvas);
        }
        y+=mCellHeight + mHeightGap;
      }
      x+=mCellWidth + mWidthGap;
    }
  }
  final Paint paint=mDragOutlinePaint;
  for (int i=0; i < mDragOutlines.length; i++) {
    final float alpha=mDragOutlineAlphas[i];
    if (alpha > 0) {
      final Point p=mDragOutlines[i];
      final Bitmap b=(Bitmap)mDragOutlineAnims[i].getTag();
      paint.setAlpha((int)(alpha + .5f));
      canvas.drawBitmap(b,p.x,p.y,paint);
    }
  }
  if (mPressedOrFocusedIcon != null) {
    final int padding=mPressedOrFocusedIcon.getPressedOrFocusedBackgroundPadding();
    final Bitmap b=mPressedOrFocusedIcon.getPressedOrFocusedBackground();
    if (b != null) {
      canvas.drawBitmap(b,mPressedOrFocusedIcon.getLeft() - padding,mPressedOrFocusedIcon.getTop() - padding,null);
    }
  }
}
