{
  int fileSize=(int)oldState.getStatSize();
  int remaining=fileSize;
  byte[] buffer=null;
  Journal journal=new Journal();
  if (remaining < MAX_JOURNAL_SIZE) {
    FileInputStream inStream=new FileInputStream(oldState.getFileDescriptor());
    int offset=0;
    buffer=new byte[remaining];
    while (remaining > 0) {
      int bytesRead=0;
      try {
        bytesRead=inStream.read(buffer,offset,remaining);
      }
 catch (      IOException e) {
        Log.w(TAG,"failed to read the journal",e);
        buffer=null;
        remaining=0;
      }
      if (bytesRead > 0) {
        remaining-=bytesRead;
      }
 else {
        Log.w(TAG,"failed to read the journal");
        buffer=null;
        remaining=0;
      }
    }
    if (buffer != null) {
      try {
        MessageNano.mergeFrom(journal,readCheckedBytes(buffer,0,fileSize));
      }
 catch (      InvalidProtocolBufferNanoException e) {
        Log.d(TAG,"failed to read the journal",e);
        journal.clear();
      }
    }
    try {
      inStream.close();
    }
 catch (    IOException e) {
      Log.d(TAG,"failed to close the journal",e);
    }
  }
  return journal;
}
