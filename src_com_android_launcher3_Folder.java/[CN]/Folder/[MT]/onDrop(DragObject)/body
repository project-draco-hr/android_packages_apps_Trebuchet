{
  Runnable cleanUpRunnable=null;
  if (d.dragSource != mLauncher.getWorkspace() && !(d.dragSource instanceof Folder)) {
    cleanUpRunnable=new Runnable(){
      @Override public void run(){
        mLauncher.exitSpringLoadedDragModeDelayed(true,Launcher.EXIT_SPRINGLOADED_MODE_SHORT_TIMEOUT,null);
      }
    }
;
  }
  if (!mContent.rankOnCurrentPage(mEmptyCellRank)) {
    mTargetRank=getTargetRank(d,null);
    mReorderAlarmListener.onAlarm(mReorderAlarm);
    mOnScrollHintAlarm.cancelAlarm();
    mScrollPauseAlarm.cancelAlarm();
  }
  mContent.completePendingPageChanges();
  View currentDragView;
  ShortcutInfo si=mCurrentDragInfo;
  if (mIsExternalDrag) {
    currentDragView=mContent.createAndAddViewForRank(si,mEmptyCellRank);
    LauncherModel.addOrMoveItemInDatabase(mLauncher,si,mInfo.id,0,si.cellX,si.cellY);
    if (d.dragSource != this) {
      updateItemLocationsInDatabaseBatch();
    }
    mIsExternalDrag=false;
  }
 else {
    currentDragView=mCurrentDragView;
    mContent.addViewForRank(currentDragView,si,mEmptyCellRank);
  }
  if (d.dragView.hasDrawn()) {
    float scaleX=getScaleX();
    float scaleY=getScaleY();
    setScaleX(1.0f);
    setScaleY(1.0f);
    mLauncher.getDragLayer().animateViewIntoPosition(d.dragView,currentDragView,cleanUpRunnable,null);
    setScaleX(scaleX);
    setScaleY(scaleY);
  }
 else {
    d.deferDragViewCleanupPostAnimation=false;
    currentDragView.setVisibility(VISIBLE);
  }
  mItemsInvalidated=true;
  rearrangeChildren();
  mSuppressOnAdd=true;
  mInfo.add(si);
  mSuppressOnAdd=false;
  mCurrentDragInfo=null;
  mDragInProgress=false;
}
