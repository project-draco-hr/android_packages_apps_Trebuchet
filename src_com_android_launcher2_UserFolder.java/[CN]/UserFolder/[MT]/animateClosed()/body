{
  if (!(getParent() instanceof CellLayoutChildren))   return;
  CellLayoutChildren clc=(CellLayoutChildren)getParent();
  final CellLayout cellLayout=(CellLayout)clc.getParent();
  FolderIcon fi=(FolderIcon)cellLayout.getChildAt(mInfo.cellX,mInfo.cellY);
  CellLayout.LayoutParams iconLp=(CellLayout.LayoutParams)fi.getLayoutParams();
  CellLayout.LayoutParams lp=(CellLayout.LayoutParams)getLayoutParams();
  PropertyValuesHolder width=PropertyValuesHolder.ofInt("width",iconLp.width);
  PropertyValuesHolder height=PropertyValuesHolder.ofInt("height",iconLp.height);
  PropertyValuesHolder x=PropertyValuesHolder.ofInt("x",iconLp.x);
  PropertyValuesHolder y=PropertyValuesHolder.ofInt("y",iconLp.y);
  ObjectAnimator oa=ObjectAnimator.ofPropertyValuesHolder(lp,width,height,x,y);
  oa.addUpdateListener(new AnimatorUpdateListener(){
    public void onAnimationUpdate(    ValueAnimator animation){
      requestLayout();
    }
  }
);
  PropertyValuesHolder alpha=PropertyValuesHolder.ofFloat("alpha",0f);
  ObjectAnimator oaContentAlpha=ObjectAnimator.ofPropertyValuesHolder(mContent,alpha);
  AnimatorSet set=new AnimatorSet();
  set.playTogether(oa,oaContentAlpha);
  set.setDuration(mExpandDuration);
  set.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      cellLayout.removeViewWithoutMarkingCells(UserFolder.this);
      mState=STATE_OPEN;
    }
    @Override public void onAnimationStart(    Animator animation){
      mState=STATE_ANIMATING;
    }
  }
);
  set.start();
}
