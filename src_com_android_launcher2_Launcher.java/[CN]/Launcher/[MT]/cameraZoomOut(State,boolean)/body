{
  final Resources res=getResources();
  final int duration=res.getInteger(R.integer.config_allAppsZoomInTime);
  final float scale=(float)res.getInteger(R.integer.config_allAppsZoomScaleFactor);
  final boolean toAllApps=(toState == State.ALL_APPS);
  final View toView=toAllApps ? (View)mAllAppsGrid : mHomeCustomizationDrawer;
  final int startDelay=res.getInteger(R.integer.config_workspaceShrinkTime) - duration;
  setPivotsForZoom(toView,toState,scale);
  Animator scaleAnim=new PropertyAnimator(duration,toView,new PropertyValuesHolder<Float>("scaleX",scale,1.0f),new PropertyValuesHolder<Float>("scaleY",scale,1.0f));
  scaleAnim.setInterpolator(new DecelerateInterpolator());
  scaleAnim.addListener(new AnimatableListenerAdapter(){
    public void onAnimationStart(    Animatable animation){
      toView.setTranslationX(0.0f);
      toView.setTranslationY(0.0f);
      toView.setVisibility(View.VISIBLE);
      if (!animated)       animation.end();
    }
  }
);
  Sequencer toolbarHideAnim=new Sequencer();
  Sequencer toolbarShowAnim=new Sequencer();
  getToolbarButtonAnimations(toState,toolbarShowAnim,toolbarHideAnim);
  Sequencer s=new Sequencer();
  s.playTogether(scaleAnim,toolbarHideAnim);
  s.play(scaleAnim).after(startDelay);
  final int fadeInTime=res.getInteger(R.integer.config_toolbarButtonFadeInTime);
  s.play(toolbarShowAnim).after(duration + startDelay - fadeInTime);
  if (toState == State.ALL_APPS) {
    mWorkspace.shrinkToBottom(animated);
  }
 else {
    mWorkspace.shrinkToTop(animated);
  }
  s.start();
}
