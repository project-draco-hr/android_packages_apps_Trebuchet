{
  if (mHotseatConfig == null) {
    mHotseatConfig=getResources().getStringArray(R.array.hotseats);
    if (mHotseatConfig.length > 0) {
      mHotseats=new Intent[mHotseatConfig.length];
      mHotseatLabels=new CharSequence[mHotseatConfig.length];
      mHotseatIcons=new Drawable[mHotseatConfig.length];
    }
 else {
      mHotseats=null;
      mHotseatIcons=null;
      mHotseatLabels=null;
    }
    TypedArray hotseatIconDrawables=getResources().obtainTypedArray(R.array.hotseat_icons);
    for (int i=0; i < mHotseatConfig.length; i++) {
      try {
        mHotseatIcons[i]=hotseatIconDrawables.getDrawable(i);
      }
 catch (      ArrayIndexOutOfBoundsException ex) {
        Log.w(TAG,"Missing hotseat_icons array item #" + i);
        mHotseatIcons[i]=null;
      }
    }
    hotseatIconDrawables.recycle();
  }
  PackageManager pm=getPackageManager();
  for (int i=0; i < mHotseatConfig.length; i++) {
    Intent intent=null;
    if (mHotseatConfig[i].equals("*BROWSER*")) {
      String defaultUri=getString(R.string.default_browser_url);
      intent=new Intent(Intent.ACTION_VIEW,((defaultUri != null) ? Uri.parse(defaultUri) : getDefaultBrowserUri())).addCategory(Intent.CATEGORY_BROWSABLE);
    }
 else {
      try {
        intent=Intent.parseUri(mHotseatConfig[i],0);
      }
 catch (      java.net.URISyntaxException ex) {
        Log.w(TAG,"Invalid hotseat intent: " + mHotseatConfig[i]);
      }
    }
    if (intent == null) {
      mHotseats[i]=null;
      mHotseatLabels[i]=getText(R.string.activity_not_found);
      continue;
    }
    if (LOGD) {
      Log.d(TAG,"loadHotseats: hotseat " + i + " initial intent=["+ intent.toUri(Intent.URI_INTENT_SCHEME)+ "]");
    }
    ResolveInfo bestMatch=pm.resolveActivity(intent,PackageManager.MATCH_DEFAULT_ONLY);
    List<ResolveInfo> allMatches=pm.queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY);
    if (LOGD) {
      Log.d(TAG,"Best match for intent: " + bestMatch);
      Log.d(TAG,"All matches: ");
      for (      ResolveInfo ri : allMatches) {
        Log.d(TAG,"  --> " + ri);
      }
    }
    if (allMatches.size() == 0 || bestMatch == null) {
      mHotseats[i]=intent;
      mHotseatLabels[i]=getText(R.string.activity_not_found);
    }
 else {
      boolean found=false;
      for (      ResolveInfo ri : allMatches) {
        if (bestMatch.activityInfo.name.equals(ri.activityInfo.name) && bestMatch.activityInfo.applicationInfo.packageName.equals(ri.activityInfo.applicationInfo.packageName)) {
          found=true;
          break;
        }
      }
      if (!found) {
        if (LOGD)         Log.d(TAG,"Multiple options, no default yet");
        mHotseats[i]=intent;
        mHotseatLabels[i]=getText(R.string.title_select_shortcut);
      }
 else {
        ComponentName com=new ComponentName(bestMatch.activityInfo.applicationInfo.packageName,bestMatch.activityInfo.name);
        mHotseats[i]=new Intent(Intent.ACTION_MAIN).setComponent(com);
        mHotseatLabels[i]=bestMatch.activityInfo.loadLabel(pm);
      }
    }
    if (LOGD) {
      Log.d(TAG,"loadHotseats: hotseat " + i + " final intent=["+ ((mHotseats[i] == null) ? "null" : mHotseats[i].toUri(Intent.URI_INTENT_SCHEME))+ "] label=["+ mHotseatLabels[i]+ "]");
    }
  }
}
