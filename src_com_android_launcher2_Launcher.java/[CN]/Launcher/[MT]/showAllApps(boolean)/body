{
  boolean unshrinkWorkspace=false;
  hideCustomizationDrawer(unshrinkWorkspace);
  if (LauncherApplication.isScreenXLarge()) {
    mWorkspace.shrinkToBottom(animated);
  }
  if (LauncherApplication.isScreenXLarge() && animated) {
    final View allApps=(View)mAllAppsGrid;
    final Resources res=getResources();
    final int duration=res.getInteger(R.integer.config_allAppsZoomInTime);
    final float scale=(float)res.getInteger(R.integer.config_allAppsZoomScaleFactor);
    final int height=allApps.getHeight();
    final int startDelay=res.getInteger(R.integer.config_workspaceShrinkTime) - duration;
    Interpolator interp=new DecelerateInterpolator(2.0f);
    allApps.setPivotX(allApps.getWidth() / 2.0f);
    allApps.setPivotY(height);
    Animator scaleXAnim=new PropertyAnimator(duration,allApps,"scaleX",scale,1.0f);
    scaleXAnim.setInterpolator(interp);
    scaleXAnim.addListener(new AnimatableListenerAdapter(){
      public void onAnimationStart(      Animatable animation){
        mAllAppsGrid.zoom(1.0f,false);
      }
    }
);
    Animator scaleYAnim=new PropertyAnimator(duration,allApps,"scaleY",scale,1.0f);
    scaleYAnim.setInterpolator(interp);
    float oldY=(-allApps.getHeight() * 0.2f);
    Animator yAnim=new PropertyAnimator(duration,allApps,"y",oldY,0.0f);
    yAnim.setInterpolator(interp);
    Sequencer s=new Sequencer();
    s.playTogether(scaleXAnim,scaleYAnim,yAnim);
    s.play(scaleXAnim).after(startDelay);
    s.start();
  }
 else {
    mAllAppsGrid.zoom(1.0f,animated);
  }
  ((View)mAllAppsGrid).setFocusable(true);
  ((View)mAllAppsGrid).requestFocus();
  mDeleteZone.setVisibility(View.GONE);
}
