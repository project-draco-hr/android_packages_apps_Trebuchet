{
  Resources res=getResources();
  final boolean fromAllApps=(fromState == State.ALL_APPS);
  int duration=fromAllApps ? res.getInteger(R.integer.config_allAppsZoomOutTime) : res.getInteger(R.integer.config_customizeZoomOutTime);
  final float scaleFactor=fromAllApps ? (float)res.getInteger(R.integer.config_allAppsZoomScaleFactor) : (float)res.getInteger(R.integer.config_customizeZoomScaleFactor);
  final View fromView=fromAllApps ? (View)mAllAppsGrid : mHomeCustomizationDrawer;
  mCustomizePagedView.endChoiceMode();
  mAllAppsPagedView.endChoiceMode();
  setPivotsForZoom(fromView,fromState,scaleFactor);
  if (!springLoaded) {
    mWorkspace.unshrink(animated);
  }
  if (animated) {
    if (mStateAnimation != null)     mStateAnimation.cancel();
    mStateAnimation=new AnimatorSet();
    final float oldScaleX=fromView.getScaleX();
    final float oldScaleY=fromView.getScaleY();
    ValueAnimator scaleAnim=ValueAnimator.ofFloat(0f,1f).setDuration(duration);
    scaleAnim.setInterpolator(new Workspace.ZoomInInterpolator());
    scaleAnim.addUpdateListener(new AnimatorUpdateListener(){
      public void onAnimationUpdate(      ValueAnimator animation){
        final float b=(Float)animation.getAnimatedValue();
        final float a=1f - b;
        ((View)fromView.getParent()).fastInvalidate();
        fromView.setFastScaleX(a * oldScaleX + b * scaleFactor);
        fromView.setFastScaleY(a * oldScaleY + b * scaleFactor);
      }
    }
);
    ValueAnimator alphaAnim=ValueAnimator.ofFloat(0f,1f);
    alphaAnim.setDuration(res.getInteger(R.integer.config_allAppsFadeOutTime));
    alphaAnim.setInterpolator(new DecelerateInterpolator(1.5f));
    alphaAnim.addUpdateListener(new AnimatorUpdateListener(){
      public void onAnimationUpdate(      ValueAnimator animation){
        final float b=(Float)animation.getAnimatedValue();
        final float a=1f - b;
        fromView.setFastAlpha(a * 1f + b * 0f);
      }
    }
);
    if (fromView instanceof LauncherAnimatable) {
      ((LauncherAnimatable)fromView).onLauncherAnimationStart();
    }
    alphaAnim.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        fromView.setVisibility(View.GONE);
        if (fromView instanceof LauncherAnimatable) {
          ((LauncherAnimatable)fromView).onLauncherAnimationEnd();
        }
      }
    }
);
    AnimatorSet toolbarHideAnim=new AnimatorSet();
    AnimatorSet toolbarShowAnim=new AnimatorSet();
    if (!springLoaded) {
      hideAndShowToolbarButtons(State.WORKSPACE,toolbarShowAnim,toolbarHideAnim);
    }
    mStateAnimation.playTogether(scaleAnim,toolbarHideAnim,alphaAnim);
    final int fadeInTime=res.getInteger(R.integer.config_toolbarButtonFadeInTime);
    final int unshrinkTime=res.getInteger(R.integer.config_workspaceUnshrinkTime);
    mStateAnimation.play(toolbarShowAnim).after(unshrinkTime - fadeInTime);
    mStateAnimation.start();
  }
 else {
    fromView.setVisibility(View.GONE);
    if (!springLoaded) {
      hideAndShowToolbarButtons(State.WORKSPACE,null,null);
    }
  }
}
