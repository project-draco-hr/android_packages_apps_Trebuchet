{
  if (mStateAnimation != null) {
    mStateAnimation.cancel();
    mStateAnimation=null;
  }
  Resources res=getResources();
  final Launcher instance=this;
  final int duration=res.getInteger(R.integer.config_appsCustomizeZoomOutTime);
  final float scaleFactor=(float)res.getInteger(R.integer.config_appsCustomizeZoomScaleFactor);
  final View fromView=mAppsCustomizeTabHost;
  Animator workspaceAnim=null;
  if (toState == State.WORKSPACE) {
    int stagger=res.getInteger(R.integer.config_appsCustomizeWorkspaceAnimationStagger);
    workspaceAnim=mWorkspace.getChangeStateAnimation(Workspace.State.NORMAL,animated,stagger);
  }
 else   if (toState == State.APPS_CUSTOMIZE_SPRING_LOADED) {
    workspaceAnim=mWorkspace.getChangeStateAnimation(Workspace.State.SPRING_LOADED,animated);
  }
  setPivotsForZoom(fromView,scaleFactor);
  updateWallpaperVisibility(true);
  showHotseat(animated);
  if (animated) {
    final float oldScaleX=fromView.getScaleX();
    final float oldScaleY=fromView.getScaleY();
    ValueAnimator scaleAnim=ValueAnimator.ofFloat(0f,1f).setDuration(duration);
    scaleAnim.setInterpolator(new Workspace.ZoomInInterpolator());
    scaleAnim.addUpdateListener(new LauncherAnimatorUpdateListener(){
      public void onAnimationUpdate(      float a,      float b){
        fromView.setScaleX(a * oldScaleX + b * scaleFactor);
        fromView.setScaleY(a * oldScaleY + b * scaleFactor);
      }
    }
);
    final ValueAnimator alphaAnim=ValueAnimator.ofFloat(0f,1f);
    alphaAnim.setDuration(res.getInteger(R.integer.config_appsCustomizeFadeOutTime));
    alphaAnim.setInterpolator(new AccelerateDecelerateInterpolator());
    alphaAnim.addUpdateListener(new LauncherAnimatorUpdateListener(){
      public void onAnimationUpdate(      float a,      float b){
        fromView.setAlpha(a * 1f + b * 0f);
      }
    }
);
    if (fromView instanceof LauncherTransitionable) {
      ((LauncherTransitionable)fromView).onLauncherTransitionStart(instance,alphaAnim,true);
    }
    alphaAnim.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        updateWallpaperVisibility(true);
        fromView.setVisibility(View.GONE);
        if (fromView instanceof LauncherTransitionable) {
          ((LauncherTransitionable)fromView).onLauncherTransitionEnd(instance,alphaAnim,true);
        }
        mWorkspace.hideScrollingIndicator(false);
      }
    }
);
    mStateAnimation=new AnimatorSet();
    mStateAnimation.playTogether(scaleAnim,alphaAnim);
    if (workspaceAnim != null) {
      mStateAnimation.play(workspaceAnim);
    }
    mStateAnimation.start();
  }
 else {
    fromView.setVisibility(View.GONE);
    if (fromView instanceof LauncherTransitionable) {
      ((LauncherTransitionable)fromView).onLauncherTransitionStart(instance,null,true);
      ((LauncherTransitionable)fromView).onLauncherTransitionEnd(instance,null,true);
    }
    mWorkspace.hideScrollingIndicator(false);
  }
}
