{
  final Resources res=getResources();
  final boolean toAllApps=(toState == State.ALL_APPS) || (toState == State.APPS_CUSTOMIZE);
  final int duration=(toAllApps ? res.getInteger(R.integer.config_appsCustomizeZoomInTime) : res.getInteger(R.integer.config_customizeZoomInTime));
  final int fadeDuration=(toAllApps ? res.getInteger(R.integer.config_appsCustomizeFadeInTime) : res.getInteger(R.integer.config_customizeFadeInTime));
  final float scale=toAllApps ? (float)res.getInteger(R.integer.config_appsCustomizeZoomScaleFactor) : (float)res.getInteger(R.integer.config_customizeZoomScaleFactor);
  View tmpView;
  if (toAllApps) {
    tmpView=(LauncherApplication.isScreenXLarge()) ? (View)mAllAppsGrid : mAppsCustomizeTabHost;
  }
 else {
    tmpView=mHomeCustomizationDrawer;
  }
  final View toView=tmpView;
  setPivotsForZoom(toView,toState,scale);
  if (toAllApps) {
    if (!springLoaded) {
      mWorkspace.shrink(ShrinkState.BOTTOM_HIDDEN,animated);
      if (LauncherApplication.isScreenXLarge()) {
        mAllAppsPagedView.resetSuccessfulDropFlag();
      }
    }
 else {
      mWorkspace.shrink(ShrinkState.BOTTOM_VISIBLE,animated);
    }
  }
 else {
    mWorkspace.shrink(ShrinkState.TOP,animated);
  }
  if (animated) {
    final ValueAnimator scaleAnim=ValueAnimator.ofFloat(0f,1f).setDuration(duration);
    scaleAnim.setInterpolator(new Workspace.ZoomOutInterpolator());
    scaleAnim.addUpdateListener(new LauncherAnimatorUpdateListener(){
      public void onAnimationUpdate(      float a,      float b){
        ((View)toView.getParent()).fastInvalidate();
        toView.setFastScaleX(a * scale + b * 1f);
        toView.setFastScaleY(a * scale + b * 1f);
      }
    }
);
    if (toAllApps) {
      toView.setVisibility(View.VISIBLE);
      toView.setFastAlpha(0f);
      ValueAnimator alphaAnim=ValueAnimator.ofFloat(0f,1f).setDuration(fadeDuration);
      alphaAnim.setInterpolator(new DecelerateInterpolator(1.5f));
      alphaAnim.addUpdateListener(new LauncherAnimatorUpdateListener(){
        public void onAnimationUpdate(        float a,        float b){
          toView.setFastAlpha(a * 0f + b * 1f);
        }
      }
);
      alphaAnim.start();
    }
    if (toView instanceof LauncherTransitionable) {
      ((LauncherTransitionable)toView).onLauncherTransitionStart(scaleAnim);
    }
    scaleAnim.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationStart(      Animator animation){
        toView.setTranslationX(0.0f);
        toView.setTranslationY(0.0f);
        toView.setVisibility(View.VISIBLE);
        toView.bringToFront();
        if (!toAllApps) {
          toView.setFastAlpha(1.0f);
        }
      }
      @Override public void onAnimationEnd(      Animator animation){
        toView.setScaleX(1.0f);
        toView.setScaleY(1.0f);
        if (toView instanceof LauncherTransitionable) {
          ((LauncherTransitionable)toView).onLauncherTransitionEnd(scaleAnim);
        }
      }
    }
);
    AnimatorSet toolbarHideAnim=new AnimatorSet();
    AnimatorSet toolbarShowAnim=new AnimatorSet();
    hideAndShowToolbarButtons(toState,toolbarShowAnim,toolbarHideAnim);
    final int startDelay=0;
    if (mStateAnimation != null)     mStateAnimation.cancel();
    mStateAnimation=new AnimatorSet();
    mStateAnimation.playTogether(scaleAnim,toolbarHideAnim);
    mStateAnimation.play(scaleAnim).after(startDelay);
    final int fadeInTime=res.getInteger(R.integer.config_toolbarButtonFadeInTime);
    mStateAnimation.play(toolbarShowAnim).after(duration + startDelay - fadeInTime);
    mStateAnimation.start();
  }
 else {
    toView.setTranslationX(0.0f);
    toView.setTranslationY(0.0f);
    toView.setScaleX(1.0f);
    toView.setScaleY(1.0f);
    toView.setVisibility(View.VISIBLE);
    toView.bringToFront();
    if (toView instanceof LauncherTransitionable) {
      ((LauncherTransitionable)toView).onLauncherTransitionStart(null);
      ((LauncherTransitionable)toView).onLauncherTransitionEnd(null);
    }
    hideAndShowToolbarButtons(toState,null,null);
  }
}
