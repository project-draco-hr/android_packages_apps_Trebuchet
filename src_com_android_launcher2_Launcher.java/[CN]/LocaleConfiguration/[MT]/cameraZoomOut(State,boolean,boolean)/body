{
  final Resources res=getResources();
  final int duration=res.getInteger(R.integer.config_appsCustomizeZoomInTime);
  final int fadeDuration=res.getInteger(R.integer.config_appsCustomizeFadeInTime);
  final float scale=(float)res.getInteger(R.integer.config_appsCustomizeZoomScaleFactor);
  final View toView=mAppsCustomizeTabHost;
  setPivotsForZoom(toView,toState,scale);
  mWorkspace.changeState(Workspace.State.SMALL,animated);
  hideHotseat(animated);
  if (animated) {
    final ValueAnimator scaleAnim=ValueAnimator.ofFloat(0f,1f).setDuration(duration);
    scaleAnim.setInterpolator(new Workspace.ZoomOutInterpolator());
    scaleAnim.addUpdateListener(new LauncherAnimatorUpdateListener(){
      public void onAnimationUpdate(      float a,      float b){
        ((View)toView.getParent()).invalidate();
        toView.fastInvalidate();
        toView.setFastScaleX(a * scale + b * 1f);
        toView.setFastScaleY(a * scale + b * 1f);
      }
    }
);
    toView.setVisibility(View.VISIBLE);
    toView.setFastAlpha(0f);
    ValueAnimator alphaAnim=ValueAnimator.ofFloat(0f,1f).setDuration(fadeDuration);
    alphaAnim.setInterpolator(new DecelerateInterpolator(1.5f));
    alphaAnim.addUpdateListener(new LauncherAnimatorUpdateListener(){
      public void onAnimationUpdate(      float a,      float b){
        toView.setFastAlpha(a * 0f + b * 1f);
      }
    }
);
    alphaAnim.start();
    if (toView instanceof LauncherTransitionable) {
      ((LauncherTransitionable)toView).onLauncherTransitionStart(scaleAnim,false);
    }
    scaleAnim.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationStart(      Animator animation){
        updateWallpaperVisibility(true);
        toView.setTranslationX(0.0f);
        toView.setTranslationY(0.0f);
        toView.setVisibility(View.VISIBLE);
        toView.bringToFront();
      }
      @Override public void onAnimationEnd(      Animator animation){
        toView.setScaleX(1.0f);
        toView.setScaleY(1.0f);
        if (toView instanceof LauncherTransitionable) {
          ((LauncherTransitionable)toView).onLauncherTransitionEnd(scaleAnim,false);
        }
        if (!springLoaded && !LauncherApplication.isScreenLarge()) {
          mWorkspace.hideScrollingIndicator(true);
          mWorkspace.hideDockDivider(true);
          mWorkspace.showAllAppsAnimationComplete();
        }
        updateWallpaperVisibility(false);
      }
    }
);
    final int startDelay=0;
    if (mStateAnimation != null)     mStateAnimation.cancel();
    mStateAnimation=new AnimatorSet();
    mStateAnimation.play(scaleAnim).after(startDelay);
    mStateAnimation.start();
  }
 else {
    toView.setTranslationX(0.0f);
    toView.setTranslationY(0.0f);
    toView.setScaleX(1.0f);
    toView.setScaleY(1.0f);
    toView.setVisibility(View.VISIBLE);
    toView.bringToFront();
    if (toView instanceof LauncherTransitionable) {
      ((LauncherTransitionable)toView).onLauncherTransitionStart(null,false);
      ((LauncherTransitionable)toView).onLauncherTransitionEnd(null,false);
      if (!springLoaded && !LauncherApplication.isScreenLarge()) {
        mWorkspace.hideScrollingIndicator(true);
        mWorkspace.hideDockDivider(true);
      }
    }
    updateWallpaperVisibility(false);
  }
}
