{
  Resources res=getResources();
  int duration=res.getInteger(R.integer.config_allAppsZoomOutTime);
  float scaleFactor=(float)res.getInteger(R.integer.config_allAppsZoomScaleFactor);
  final View fromView=(fromState == State.ALL_APPS) ? (View)mAllAppsGrid : mHomeCustomizationDrawer;
  mCustomizePagedView.endChoiceMode();
  mAllAppsPagedView.endChoiceMode();
  setPivotsForZoom(fromView,fromState,scaleFactor);
  mWorkspace.unshrink(animated);
  if (animated) {
    if (mStateAnimation != null)     mStateAnimation.cancel();
    mStateAnimation=new AnimatorSet();
    ValueAnimator scaleAnim=ObjectAnimator.ofPropertyValuesHolder(fromView,PropertyValuesHolder.ofFloat("scaleX",scaleFactor),PropertyValuesHolder.ofFloat("scaleY",scaleFactor));
    scaleAnim.setDuration(duration);
    scaleAnim.setInterpolator(new AccelerateInterpolator());
    mStateAnimation.addListener(new AnimatorListenerAdapter(){
      public void onAnimationEnd(      Animator animation){
        fromView.setVisibility(View.GONE);
        fromView.setScaleX(1.0f);
        fromView.setScaleY(1.0f);
      }
    }
);
    AnimatorSet toolbarHideAnim=new AnimatorSet();
    AnimatorSet toolbarShowAnim=new AnimatorSet();
    hideAndShowToolbarButtons(State.WORKSPACE,toolbarShowAnim,toolbarHideAnim);
    mStateAnimation.playTogether(scaleAnim,toolbarHideAnim);
    final int fadeInTime=res.getInteger(R.integer.config_toolbarButtonFadeInTime);
    final int unshrinkTime=res.getInteger(R.integer.config_workspaceUnshrinkTime);
    mStateAnimation.play(toolbarShowAnim).after(unshrinkTime - fadeInTime);
    mStateAnimation.start();
  }
 else {
    fromView.setVisibility(View.GONE);
    hideAndShowToolbarButtons(State.WORKSPACE,null,null);
  }
}
