{
  final Resources res=getResources();
  final boolean toAllApps=(toState == State.ALL_APPS);
  final int duration=toAllApps ? res.getInteger(R.integer.config_allAppsZoomInTime) : res.getInteger(R.integer.config_customizeZoomInTime);
  final float scale=toAllApps ? (float)res.getInteger(R.integer.config_allAppsZoomScaleFactor) : (float)res.getInteger(R.integer.config_customizeZoomScaleFactor);
  final View toView=toAllApps ? (View)mAllAppsGrid : mHomeCustomizationDrawer;
  setPivotsForZoom(toView,toState,scale);
  if (toAllApps) {
    mWorkspace.shrink(ShrinkState.BOTTOM_HIDDEN,animated);
  }
 else {
    mWorkspace.shrink(ShrinkState.TOP,animated);
  }
  if (animated) {
    ValueAnimator scaleAnim=ValueAnimator.ofFloat(0f,1f).setDuration(duration);
    scaleAnim.setInterpolator(new Workspace.ZoomOutInterpolator());
    scaleAnim.addUpdateListener(new AnimatorUpdateListener(){
      public void onAnimationUpdate(      ValueAnimator animation){
        final float b=(Float)animation.getAnimatedValue();
        final float a=1f - b;
        ((View)toView.getParent()).fastInvalidate();
        toView.setFastScaleX(a * scale + b * 1f);
        toView.setFastScaleY(a * scale + b * 1f);
      }
    }
);
    if (toAllApps) {
      toView.setAlpha(0f);
      ValueAnimator alphaAnim=ValueAnimator.ofFloat(0f,1f).setDuration(duration);
      alphaAnim.setInterpolator(new DecelerateInterpolator(1.5f));
      alphaAnim.addUpdateListener(new AnimatorUpdateListener(){
        public void onAnimationUpdate(        ValueAnimator animation){
          final float b=(Float)animation.getAnimatedValue();
          final float a=1f - b;
          toView.setFastAlpha(a * 0f + b * 1f);
        }
      }
);
      alphaAnim.start();
    }
    if (mWorkspace.getWidth() < mWorkspace.getHeight()) {
      toView.setLayerType(View.LAYER_TYPE_HARDWARE,null);
    }
    scaleAnim.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationStart(      Animator animation){
        toView.setTranslationX(0.0f);
        toView.setTranslationY(0.0f);
        toView.setVisibility(View.VISIBLE);
        if (!toAllApps) {
          toView.setAlpha(1.0f);
        }
      }
      @Override public void onAnimationEnd(      Animator animation){
        toView.setLayerType(View.LAYER_TYPE_NONE,null);
        toView.setScaleX(1.0f);
        toView.setScaleY(1.0f);
      }
    }
);
    AnimatorSet toolbarHideAnim=new AnimatorSet();
    AnimatorSet toolbarShowAnim=new AnimatorSet();
    hideAndShowToolbarButtons(toState,toolbarShowAnim,toolbarHideAnim);
    final int startDelay=0;
    if (mStateAnimation != null)     mStateAnimation.cancel();
    mStateAnimation=new AnimatorSet();
    mStateAnimation.playTogether(scaleAnim,toolbarHideAnim);
    mStateAnimation.play(scaleAnim).after(startDelay);
    final int fadeInTime=res.getInteger(R.integer.config_toolbarButtonFadeInTime);
    mStateAnimation.play(toolbarShowAnim).after(duration + startDelay - fadeInTime);
    mStateAnimation.start();
  }
 else {
    toView.setTranslationX(0.0f);
    toView.setTranslationY(0.0f);
    toView.setScaleX(1.0f);
    toView.setScaleY(1.0f);
    toView.setVisibility(View.VISIBLE);
    hideAndShowToolbarButtons(toState,null,null);
  }
}
