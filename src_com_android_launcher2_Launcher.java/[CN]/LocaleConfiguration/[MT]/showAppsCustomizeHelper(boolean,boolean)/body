{
  if (mStateAnimation != null) {
    mStateAnimation.cancel();
    mStateAnimation=null;
  }
  final Resources res=getResources();
  final Launcher instance=this;
  final int duration=res.getInteger(R.integer.config_appsCustomizeZoomInTime);
  final int fadeDuration=res.getInteger(R.integer.config_appsCustomizeFadeInTime);
  final float scale=(float)res.getInteger(R.integer.config_appsCustomizeZoomScaleFactor);
  final View toView=mAppsCustomizeTabHost;
  final int startDelay=res.getInteger(R.integer.config_workspaceAppsCustomizeAnimationStagger);
  setPivotsForZoom(toView,scale);
  Animator workspaceAnim=mWorkspace.getChangeStateAnimation(Workspace.State.SMALL,animated);
  if (animated) {
    toView.setScaleX(scale);
    toView.setScaleY(scale);
    final LauncherViewPropertyAnimator scaleAnim=new LauncherViewPropertyAnimator(toView);
    scaleAnim.scaleX(1f).scaleY(1f).setDuration(duration).setInterpolator(new Workspace.ZoomOutInterpolator());
    toView.setVisibility(View.VISIBLE);
    toView.setAlpha(0f);
    ValueAnimator alphaAnim=ValueAnimator.ofFloat(0f,1f).setDuration(fadeDuration);
    alphaAnim.setInterpolator(new DecelerateInterpolator(1.5f));
    alphaAnim.addUpdateListener(new LauncherAnimatorUpdateListener(){
      public void onAnimationUpdate(      float a,      float b){
        toView.setAlpha(a * 0f + b * 1f);
      }
    }
);
    mStateAnimation=new AnimatorSet();
    mStateAnimation.play(scaleAnim).after(startDelay);
    mStateAnimation.play(alphaAnim).after(startDelay);
    mStateAnimation.addListener(new AnimatorListenerAdapter(){
      boolean animationCancelled=false;
      @Override public void onAnimationStart(      Animator animation){
        updateWallpaperVisibility(true);
        toView.setTranslationX(0.0f);
        toView.setTranslationY(0.0f);
        toView.setVisibility(View.VISIBLE);
        toView.bringToFront();
      }
      @Override public void onAnimationEnd(      Animator animation){
        toView.setScaleX(1.0f);
        toView.setScaleY(1.0f);
        if (toView instanceof LauncherTransitionable) {
          ((LauncherTransitionable)toView).onLauncherTransitionEnd(instance,scaleAnim,false);
        }
        if (!springLoaded && !LauncherApplication.isScreenLarge()) {
          mWorkspace.hideScrollingIndicator(true);
          hideDockDivider();
        }
        if (!animationCancelled) {
          updateWallpaperVisibility(false);
        }
      }
      @Override public void onAnimationCancel(      Animator animation){
        animationCancelled=true;
      }
    }
);
    if (workspaceAnim != null) {
      mStateAnimation.play(workspaceAnim);
    }
    boolean delayAnim=false;
    LauncherTransitionable lt=(LauncherTransitionable)toView;
    final ViewTreeObserver observer;
    lt.onLauncherTransitionStart(instance,mStateAnimation,false);
    if ((lt.getContent().getMeasuredWidth() == 0) || (mWorkspace.getMeasuredWidth() == 0) || (toView.getMeasuredWidth() == 0)) {
      observer=mWorkspace.getViewTreeObserver();
      delayAnim=true;
    }
 else {
      observer=null;
    }
    if (delayAnim) {
      final AnimatorSet stateAnimation=mStateAnimation;
      final OnGlobalLayoutListener delayedStart=new OnGlobalLayoutListener(){
        public void onGlobalLayout(){
          mWorkspace.post(new Runnable(){
            public void run(){
              if (mStateAnimation == stateAnimation) {
                setPivotsForZoom(toView,scale);
                mStateAnimation.start();
              }
            }
          }
);
          observer.removeGlobalOnLayoutListener(this);
        }
      }
;
      observer.addOnGlobalLayoutListener(delayedStart);
    }
 else {
      setPivotsForZoom(toView,scale);
      mStateAnimation.start();
    }
  }
 else {
    toView.setTranslationX(0.0f);
    toView.setTranslationY(0.0f);
    toView.setScaleX(1.0f);
    toView.setScaleY(1.0f);
    toView.setVisibility(View.VISIBLE);
    toView.bringToFront();
    if (toView instanceof LauncherTransitionable) {
      ((LauncherTransitionable)toView).onLauncherTransitionStart(instance,null,false);
      ((LauncherTransitionable)toView).onLauncherTransitionEnd(instance,null,false);
      if (!springLoaded && !LauncherApplication.isScreenLarge()) {
        mWorkspace.hideScrollingIndicator(true);
        hideDockDivider();
      }
    }
    updateWallpaperVisibility(false);
  }
}
