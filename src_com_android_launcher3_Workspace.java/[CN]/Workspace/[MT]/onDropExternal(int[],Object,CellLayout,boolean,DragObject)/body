{
  final Runnable exitSpringLoadedRunnable=new Runnable(){
    @Override public void run(){
      mLauncher.exitSpringLoadedDragModeDelayed(true,Launcher.EXIT_SPRINGLOADED_MODE_SHORT_TIMEOUT,null);
    }
  }
;
  ItemInfo info=(ItemInfo)dragInfo;
  int spanX=info.spanX;
  int spanY=info.spanY;
  if (mDragInfo != null) {
    spanX=mDragInfo.spanX;
    spanY=mDragInfo.spanY;
  }
  final long container=mLauncher.isHotseatLayout(cellLayout) ? LauncherSettings.Favorites.CONTAINER_HOTSEAT : LauncherSettings.Favorites.CONTAINER_DESKTOP;
  final long screenId=getIdForScreen(cellLayout);
  if (!mLauncher.isHotseatLayout(cellLayout) && screenId != getScreenIdForPageIndex(mCurrentPage) && mState != State.SPRING_LOADED) {
    snapToScreenId(screenId,null);
  }
  if (info instanceof PendingAddItemInfo) {
    final PendingAddItemInfo pendingInfo=(PendingAddItemInfo)dragInfo;
    boolean findNearestVacantCell=true;
    if (pendingInfo.itemType == LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT) {
      mTargetCell=findNearestArea((int)touchXY[0],(int)touchXY[1],spanX,spanY,cellLayout,mTargetCell);
      float distance=cellLayout.getDistanceFromCell(mDragViewVisualCenter[0],mDragViewVisualCenter[1],mTargetCell);
      if (willCreateUserFolder((ItemInfo)d.dragInfo,cellLayout,mTargetCell,distance,true) || willAddToExistingUserFolder((ItemInfo)d.dragInfo,cellLayout,mTargetCell,distance)) {
        findNearestVacantCell=false;
      }
    }
    final ItemInfo item=(ItemInfo)d.dragInfo;
    boolean updateWidgetSize=false;
    if (findNearestVacantCell) {
      int minSpanX=item.spanX;
      int minSpanY=item.spanY;
      if (item.minSpanX > 0 && item.minSpanY > 0) {
        minSpanX=item.minSpanX;
        minSpanY=item.minSpanY;
      }
      int[] resultSpan=new int[2];
      mTargetCell=cellLayout.performReorder((int)mDragViewVisualCenter[0],(int)mDragViewVisualCenter[1],minSpanX,minSpanY,info.spanX,info.spanY,null,mTargetCell,resultSpan,CellLayout.MODE_ON_DROP_EXTERNAL);
      if (resultSpan[0] != item.spanX || resultSpan[1] != item.spanY) {
        updateWidgetSize=true;
      }
      item.spanX=resultSpan[0];
      item.spanY=resultSpan[1];
    }
    Runnable onAnimationCompleteRunnable=new Runnable(){
      @Override public void run(){
        deferRemoveExtraEmptyScreen();
        mLauncher.addPendingItem(pendingInfo,container,screenId,mTargetCell,item.spanX,item.spanY);
      }
    }
;
    boolean isWidget=pendingInfo.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET || pendingInfo.itemType == LauncherSettings.Favorites.ITEM_TYPE_CUSTOM_APPWIDGET;
    View finalView=isWidget ? ((PendingAddWidgetInfo)pendingInfo).boundWidget : null;
    if (finalView instanceof AppWidgetHostView && updateWidgetSize) {
      AppWidgetHostView awhv=(AppWidgetHostView)finalView;
      AppWidgetResizeFrame.updateWidgetSizeRanges(awhv,mLauncher,item.spanX,item.spanY);
    }
    int animationStyle=ANIMATE_INTO_POSITION_AND_DISAPPEAR;
    if (isWidget && ((PendingAddWidgetInfo)pendingInfo).info != null && ((PendingAddWidgetInfo)pendingInfo).info.configure != null) {
      animationStyle=ANIMATE_INTO_POSITION_AND_REMAIN;
    }
    animateWidgetDrop(info,cellLayout,d.dragView,onAnimationCompleteRunnable,animationStyle,finalView,true);
  }
 else {
    View view=null;
switch (info.itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
      if (info.container == NO_ID && info instanceof AppInfo) {
        info=((AppInfo)info).makeShortcut();
      }
    view=mLauncher.createShortcut(cellLayout,(ShortcutInfo)info);
  break;
case LauncherSettings.Favorites.ITEM_TYPE_FOLDER:
view=FolderIcon.fromXml(R.layout.folder_icon,mLauncher,cellLayout,(FolderInfo)info,mIconCache);
break;
default :
throw new IllegalStateException("Unknown item type: " + info.itemType);
}
if (touchXY != null) {
mTargetCell=findNearestArea((int)touchXY[0],(int)touchXY[1],spanX,spanY,cellLayout,mTargetCell);
float distance=cellLayout.getDistanceFromCell(mDragViewVisualCenter[0],mDragViewVisualCenter[1],mTargetCell);
d.postAnimationRunnable=exitSpringLoadedRunnable;
if (createUserFolderIfNecessary(view,container,cellLayout,mTargetCell,distance,true,d.dragView,d.postAnimationRunnable)) {
return;
}
if (addToExistingFolderIfNecessary(view,cellLayout,mTargetCell,distance,d,true)) {
return;
}
}
if (touchXY != null) {
mTargetCell=cellLayout.performReorder((int)mDragViewVisualCenter[0],(int)mDragViewVisualCenter[1],1,1,1,1,null,mTargetCell,null,CellLayout.MODE_ON_DROP_EXTERNAL);
}
 else {
cellLayout.findCellForSpan(mTargetCell,1,1);
}
LauncherModel.addOrMoveItemInDatabase(mLauncher,info,container,screenId,mTargetCell[0],mTargetCell[1]);
addInScreen(view,container,screenId,mTargetCell[0],mTargetCell[1],info.spanX,info.spanY,insertAtFirst);
cellLayout.onDropChild(view);
cellLayout.getShortcutsAndWidgets().measureChild(view);
if (d.dragView != null) {
setFinalTransitionTransform(cellLayout);
mLauncher.getDragLayer().animateViewIntoPosition(d.dragView,view,exitSpringLoadedRunnable,this);
resetTransitionTransform(cellLayout);
}
}
}
