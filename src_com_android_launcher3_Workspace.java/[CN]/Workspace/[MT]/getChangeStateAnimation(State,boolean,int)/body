{
  if (mState == state) {
    return null;
  }
  initAnimationArrays();
  AnimatorSet anim=animated ? LauncherAnimUtils.createAnimatorSet() : null;
  setCurrentPage(getNextPage());
  final State oldState=mState;
  final boolean oldStateIsNormal=(oldState == State.NORMAL);
  final boolean oldStateIsSpringLoaded=(oldState == State.SPRING_LOADED);
  final boolean oldStateIsSmall=(oldState == State.SMALL);
  mState=state;
  final boolean stateIsNormal=(state == State.NORMAL);
  final boolean stateIsSpringLoaded=(state == State.SPRING_LOADED);
  final boolean stateIsSmall=(state == State.SMALL);
  float finalBackgroundAlpha=stateIsSpringLoaded ? 1.0f : 0f;
  boolean zoomIn=true;
  mNewScale=1.0f;
  if (state != State.NORMAL) {
    mNewScale=mSpringLoadedShrinkFactor - (stateIsSmall ? 0.1f : 0);
    if (oldStateIsNormal && stateIsSmall) {
      zoomIn=false;
      updateChildrenLayersEnabled(false);
    }
 else {
      finalBackgroundAlpha=1.0f;
    }
  }
  final int duration=zoomIn ? getResources().getInteger(R.integer.config_workspaceUnshrinkTime) : getResources().getInteger(R.integer.config_appsCustomizeWorkspaceShrinkTime);
  for (int i=0; i < getChildCount(); i++) {
    final CellLayout cl=(CellLayout)getChildAt(i);
    float finalAlpha=(!mWorkspaceFadeInAdjacentScreens || stateIsSpringLoaded || (i == mCurrentPage)) ? 1f : 0f;
    float currentAlpha=cl.getShortcutsAndWidgets().getAlpha();
    float initialAlpha=currentAlpha;
    if ((oldStateIsSmall && stateIsNormal) || (oldStateIsNormal && stateIsSmall)) {
      if (i == mCurrentPage || !animated || oldStateIsSpringLoaded) {
        finalAlpha=1f;
      }
 else {
        initialAlpha=0f;
        finalAlpha=0f;
      }
    }
    mOldAlphas[i]=initialAlpha;
    mNewAlphas[i]=finalAlpha;
    if (animated) {
      mOldBackgroundAlphas[i]=cl.getBackgroundAlpha();
      mNewBackgroundAlphas[i]=finalBackgroundAlpha;
    }
 else {
      setScaleX(mNewScale);
      setScaleY(mNewScale);
      cl.setBackgroundAlpha(finalBackgroundAlpha);
      cl.setShortcutAndWidgetAlpha(finalAlpha);
    }
  }
  if (animated) {
    LauncherViewPropertyAnimator scale=new LauncherViewPropertyAnimator(this);
    scale.scaleX(mNewScale).scaleY(mNewScale).setInterpolator(mZoomInInterpolator);
    anim.play(scale);
    for (int index=0; index < getChildCount(); index++) {
      final int i=index;
      final CellLayout cl=(CellLayout)getChildAt(i);
      float currentAlpha=cl.getShortcutsAndWidgets().getAlpha();
      if (mOldAlphas[i] == 0 && mNewAlphas[i] == 0) {
        cl.setBackgroundAlpha(mNewBackgroundAlphas[i]);
        cl.setShortcutAndWidgetAlpha(mNewAlphas[i]);
      }
 else {
        if (mOldAlphas[i] != mNewAlphas[i] || currentAlpha != mNewAlphas[i]) {
          LauncherViewPropertyAnimator alphaAnim=new LauncherViewPropertyAnimator(cl.getShortcutsAndWidgets());
          alphaAnim.alpha(mNewAlphas[i]).setDuration(duration).setInterpolator(mZoomInInterpolator);
          anim.play(alphaAnim);
        }
        if (mOldBackgroundAlphas[i] != 0 || mNewBackgroundAlphas[i] != 0) {
          ValueAnimator bgAnim=LauncherAnimUtils.ofFloat(cl,0f,1f).setDuration(duration);
          bgAnim.setInterpolator(mZoomInInterpolator);
          bgAnim.addUpdateListener(new LauncherAnimatorUpdateListener(){
            public void onAnimationUpdate(            float a,            float b){
              cl.setBackgroundAlpha(a * mOldBackgroundAlphas[i] + b * mNewBackgroundAlphas[i]);
            }
          }
);
          anim.play(bgAnim);
        }
      }
    }
    anim.setStartDelay(delay);
  }
  if (stateIsSpringLoaded) {
    animateBackgroundGradient(getResources().getInteger(R.integer.config_appsCustomizeSpringLoadedBgAlpha) / 100f,false);
  }
 else {
    animateBackgroundGradient(0f,true);
  }
  return anim;
}
