{
  if (mState == state) {
    return null;
  }
  initAnimationArrays();
  AnimatorSet anim=animated ? LauncherAnimUtils.createAnimatorSet() : null;
  final State oldState=mState;
  final boolean oldStateIsNormal=(oldState == State.NORMAL);
  final boolean oldStateIsSpringLoaded=(oldState == State.SPRING_LOADED);
  final boolean oldStateIsNormalHidden=(oldState == State.NORMAL_HIDDEN);
  final boolean oldStateIsOverviewHidden=(oldState == State.OVERVIEW_HIDDEN);
  final boolean oldStateIsOverview=(oldState == State.OVERVIEW);
  setState(state);
  final boolean stateIsNormal=(state == State.NORMAL);
  final boolean stateIsSpringLoaded=(state == State.SPRING_LOADED);
  final boolean stateIsNormalHidden=(state == State.NORMAL_HIDDEN);
  final boolean stateIsOverviewHidden=(state == State.OVERVIEW_HIDDEN);
  final boolean stateIsOverview=(state == State.OVERVIEW);
  float finalBackgroundAlpha=(stateIsSpringLoaded || stateIsOverview) ? 1.0f : 0f;
  float finalHotseatAndPageIndicatorAlpha=(stateIsNormal || stateIsSpringLoaded) ? 1f : 0f;
  float finalOverviewPanelAlpha=stateIsOverview ? 1f : 0f;
  float finalSearchBarAlpha=!stateIsNormal ? 0f : 1f;
  float finalWorkspaceTranslationY=stateIsOverview || stateIsOverviewHidden ? getOverviewModeTranslationY() : 0;
  boolean workspaceToAllApps=(oldStateIsNormal && stateIsNormalHidden);
  boolean overviewToAllApps=(oldStateIsOverview && stateIsOverviewHidden);
  boolean allAppsToWorkspace=(stateIsNormalHidden && stateIsNormal);
  boolean workspaceToOverview=(oldStateIsNormal && stateIsOverview);
  boolean overviewToWorkspace=(oldStateIsOverview && stateIsNormal);
  mNewScale=1.0f;
  if (oldStateIsOverview) {
    disableFreeScroll();
  }
 else   if (stateIsOverview) {
    enableFreeScroll();
  }
  if (state != State.NORMAL) {
    if (stateIsSpringLoaded) {
      mNewScale=mSpringLoadedShrinkFactor;
    }
 else     if (stateIsOverview || stateIsOverviewHidden) {
      mNewScale=mOverviewModeShrinkFactor;
    }
  }
  final int duration;
  if (workspaceToAllApps || overviewToAllApps) {
    duration=HIDE_WORKSPACE_DURATION;
  }
 else   if (workspaceToOverview || overviewToWorkspace) {
    duration=getResources().getInteger(R.integer.config_overviewTransitionTime);
  }
 else {
    duration=getResources().getInteger(R.integer.config_appsCustomizeWorkspaceShrinkTime);
  }
  if (snapPage == -1) {
    snapPage=getPageNearestToCenterOfScreen();
  }
  snapToPage(snapPage,duration,mZoomInInterpolator);
  for (int i=0; i < getChildCount(); i++) {
    final CellLayout cl=(CellLayout)getChildAt(i);
    boolean isCurrentPage=(i == snapPage);
    float initialAlpha=cl.getShortcutsAndWidgets().getAlpha();
    float finalAlpha;
    if (stateIsNormalHidden || stateIsOverviewHidden) {
      finalAlpha=0f;
    }
 else     if (stateIsNormal && mWorkspaceFadeInAdjacentScreens) {
      finalAlpha=(i == snapPage || i < numCustomPages()) ? 1f : 0f;
    }
 else {
      finalAlpha=1f;
    }
    if (!mIsSwitchingState) {
      if (workspaceToAllApps || allAppsToWorkspace) {
        if (allAppsToWorkspace && isCurrentPage) {
          initialAlpha=0f;
        }
 else         if (!isCurrentPage) {
          initialAlpha=finalAlpha=0f;
        }
        cl.setShortcutAndWidgetAlpha(initialAlpha);
      }
    }
    mOldAlphas[i]=initialAlpha;
    mNewAlphas[i]=finalAlpha;
    if (animated) {
      mOldBackgroundAlphas[i]=cl.getBackgroundAlpha();
      mNewBackgroundAlphas[i]=finalBackgroundAlpha;
    }
 else {
      cl.setBackgroundAlpha(finalBackgroundAlpha);
      cl.setShortcutAndWidgetAlpha(finalAlpha);
    }
  }
  final View searchBar=mLauncher.getQsbBar();
  final View overviewPanel=mLauncher.getOverviewPanel();
  final View hotseat=mLauncher.getHotseat();
  final View pageIndicator=getPageIndicator();
  if (animated) {
    LauncherViewPropertyAnimator scale=new LauncherViewPropertyAnimator(this);
    scale.scaleX(mNewScale).scaleY(mNewScale).translationY(finalWorkspaceTranslationY).setDuration(duration).setInterpolator(mZoomInInterpolator);
    anim.play(scale);
    for (int index=0; index < getChildCount(); index++) {
      final int i=index;
      final CellLayout cl=(CellLayout)getChildAt(i);
      float currentAlpha=cl.getShortcutsAndWidgets().getAlpha();
      if (mOldAlphas[i] == 0 && mNewAlphas[i] == 0) {
        cl.setBackgroundAlpha(mNewBackgroundAlphas[i]);
        cl.setShortcutAndWidgetAlpha(mNewAlphas[i]);
      }
 else {
        if (mOldAlphas[i] != mNewAlphas[i] || currentAlpha != mNewAlphas[i]) {
          LauncherViewPropertyAnimator alphaAnim=new LauncherViewPropertyAnimator(cl.getShortcutsAndWidgets());
          alphaAnim.alpha(mNewAlphas[i]).setDuration(duration).setInterpolator(mZoomInInterpolator);
          anim.play(alphaAnim);
        }
        if (mOldBackgroundAlphas[i] != 0 || mNewBackgroundAlphas[i] != 0) {
          ValueAnimator bgAnim=LauncherAnimUtils.ofFloat(cl,0f,1f);
          bgAnim.setInterpolator(mZoomInInterpolator);
          bgAnim.setDuration(duration);
          bgAnim.addUpdateListener(new LauncherAnimatorUpdateListener(){
            public void onAnimationUpdate(            float a,            float b){
              cl.setBackgroundAlpha(a * mOldBackgroundAlphas[i] + b * mNewBackgroundAlphas[i]);
            }
          }
);
          anim.play(bgAnim);
        }
      }
    }
    Animator pageIndicatorAlpha=null;
    if (pageIndicator != null) {
      pageIndicatorAlpha=new LauncherViewPropertyAnimator(pageIndicator).alpha(finalHotseatAndPageIndicatorAlpha).withLayer();
      pageIndicatorAlpha.addListener(new AlphaUpdateListener(pageIndicator));
    }
 else {
      pageIndicatorAlpha=ValueAnimator.ofFloat(0,0);
    }
    Animator hotseatAlpha=new LauncherViewPropertyAnimator(hotseat).alpha(finalHotseatAndPageIndicatorAlpha).withLayer();
    hotseatAlpha.addListener(new AlphaUpdateListener(hotseat));
    Animator searchBarAlpha=new LauncherViewPropertyAnimator(searchBar).alpha(finalSearchBarAlpha).withLayer();
    searchBarAlpha.addListener(new AlphaUpdateListener(searchBar));
    Animator overviewPanelAlpha=new LauncherViewPropertyAnimator(overviewPanel).alpha(finalOverviewPanelAlpha).withLayer();
    overviewPanelAlpha.addListener(new AlphaUpdateListener(overviewPanel));
    if (workspaceToOverview) {
      pageIndicatorAlpha.setInterpolator(new DecelerateInterpolator(2));
      hotseatAlpha.setInterpolator(new DecelerateInterpolator(2));
      overviewPanelAlpha.setInterpolator(null);
    }
 else     if (overviewToWorkspace) {
      pageIndicatorAlpha.setInterpolator(null);
      hotseatAlpha.setInterpolator(null);
      overviewPanelAlpha.setInterpolator(new DecelerateInterpolator(2));
    }
    overviewPanelAlpha.setDuration(duration);
    pageIndicatorAlpha.setDuration(duration);
    hotseatAlpha.setDuration(duration);
    searchBarAlpha.setDuration(duration);
    anim.play(overviewPanelAlpha);
    anim.play(hotseatAlpha);
    anim.play(searchBarAlpha);
    anim.play(pageIndicatorAlpha);
    anim.setStartDelay(delay);
  }
 else {
    overviewPanel.setAlpha(finalOverviewPanelAlpha);
    AlphaUpdateListener.updateVisibility(overviewPanel);
    hotseat.setAlpha(finalHotseatAndPageIndicatorAlpha);
    AlphaUpdateListener.updateVisibility(hotseat);
    if (pageIndicator != null) {
      pageIndicator.setAlpha(finalHotseatAndPageIndicatorAlpha);
      AlphaUpdateListener.updateVisibility(pageIndicator);
    }
    searchBar.setAlpha(finalSearchBarAlpha);
    AlphaUpdateListener.updateVisibility(searchBar);
    updateCustomContentVisibility();
    setScaleX(mNewScale);
    setScaleY(mNewScale);
    setTranslationY(finalWorkspaceTranslationY);
  }
  mLauncher.updateVoiceButtonProxyVisible(false);
  if (stateIsNormal) {
    animateBackgroundGradient(0f,animated);
  }
 else {
    animateBackgroundGradient(getResources().getInteger(R.integer.config_workspaceScrimAlpha) / 100f,animated);
  }
  return anim;
}
