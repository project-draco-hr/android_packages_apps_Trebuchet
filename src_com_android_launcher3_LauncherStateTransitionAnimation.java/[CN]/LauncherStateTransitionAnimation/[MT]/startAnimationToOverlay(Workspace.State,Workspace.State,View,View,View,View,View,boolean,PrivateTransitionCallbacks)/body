{
  final AnimatorSet animation=LauncherAnimUtils.createAnimatorSet();
  final Resources res=mLauncher.getResources();
  final boolean material=Utilities.ATLEAST_LOLLIPOP;
  final int revealDuration=res.getInteger(R.integer.config_overlayRevealTime);
  final int itemsAlphaStagger=res.getInteger(R.integer.config_overlayItemsAlphaStagger);
  final View fromView=mLauncher.getWorkspace();
  final HashMap<View,Integer> layerViews=new HashMap<>();
  boolean initialized=buttonView != null;
  cancelAnimation();
  Animator workspaceAnim=mLauncher.startWorkspaceStateChangeAnimation(toWorkspaceState,-1,animated,layerViews);
  startWorkspaceSearchBarAnimation(animation,fromWorkspaceState,toWorkspaceState,animated ? revealDuration : 0,overlaySearchBarView);
  if (animated && initialized) {
    int width=revealView.getMeasuredWidth();
    int height=revealView.getMeasuredHeight();
    float revealRadius=(float)Math.hypot(width / 2,height / 2);
    revealView.setVisibility(View.VISIBLE);
    revealView.setAlpha(0f);
    revealView.setTranslationY(0f);
    revealView.setTranslationX(0f);
    final float revealViewToAlpha;
    final float revealViewToXDrift;
    final float revealViewToYDrift;
    if (material) {
      int[] buttonViewToPanelDelta=Utilities.getCenterDeltaInScreenSpace(revealView,buttonView,null);
      revealViewToAlpha=pCb.getMaterialRevealViewFinalAlpha(revealView);
      revealViewToYDrift=buttonViewToPanelDelta[1];
      revealViewToXDrift=buttonViewToPanelDelta[0];
    }
 else {
      revealViewToAlpha=0f;
      revealViewToYDrift=2 * height / 3;
      revealViewToXDrift=0;
    }
    PropertyValuesHolder panelAlpha=PropertyValuesHolder.ofFloat("alpha",revealViewToAlpha,1f);
    PropertyValuesHolder panelDriftY=PropertyValuesHolder.ofFloat("translationY",revealViewToYDrift,0);
    PropertyValuesHolder panelDriftX=PropertyValuesHolder.ofFloat("translationX",revealViewToXDrift,0);
    ObjectAnimator panelAlphaAndDrift=ObjectAnimator.ofPropertyValuesHolder(revealView,panelAlpha,panelDriftY,panelDriftX);
    panelAlphaAndDrift.setDuration(revealDuration);
    panelAlphaAndDrift.setInterpolator(new LogDecelerateInterpolator(100,0));
    layerViews.put(revealView,BUILD_AND_SET_LAYER);
    animation.play(panelAlphaAndDrift);
    if (overlaySearchBarView != null) {
      overlaySearchBarView.setAlpha(0f);
      ObjectAnimator searchBarAlpha=ObjectAnimator.ofFloat(overlaySearchBarView,"alpha",0f,1f);
      searchBarAlpha.setDuration(100);
      searchBarAlpha.setInterpolator(new AccelerateInterpolator(1.5f));
      layerViews.put(overlaySearchBarView,BUILD_AND_SET_LAYER);
      animation.play(searchBarAlpha);
    }
    contentView.setVisibility(View.VISIBLE);
    final Drawable contentBackground=contentView.getBackground();
    final int alpha=contentBackground.getAlpha();
    contentBackground.setAlpha(0);
    contentView.setAlpha(0f);
    contentView.setTranslationY(revealViewToYDrift);
    layerViews.put(contentView,BUILD_AND_SET_LAYER);
    ObjectAnimator pageDrift=ObjectAnimator.ofFloat(contentView,"translationY",revealViewToYDrift,0);
    pageDrift.setDuration(revealDuration);
    pageDrift.setInterpolator(new LogDecelerateInterpolator(100,0));
    pageDrift.setStartDelay(itemsAlphaStagger);
    animation.play(pageDrift);
    ObjectAnimator itemsAlpha=ObjectAnimator.ofFloat(contentView,"alpha",0f,1f);
    itemsAlpha.setDuration(revealDuration);
    itemsAlpha.setInterpolator(new AccelerateInterpolator(1.5f));
    itemsAlpha.setStartDelay(itemsAlphaStagger);
    animation.play(itemsAlpha);
    if (material) {
      float startRadius=pCb.getMaterialRevealViewStartFinalRadius();
      AnimatorListenerAdapter listener=pCb.getMaterialRevealViewAnimatorListener(revealView,buttonView);
      Animator reveal=UiThreadCircularReveal.createCircularReveal(revealView,width / 2,height / 2,startRadius,revealRadius);
      reveal.setDuration(revealDuration);
      reveal.setInterpolator(new LogDecelerateInterpolator(100,0));
      if (listener != null) {
        reveal.addListener(listener);
      }
      animation.play(reveal);
    }
    animation.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        dispatchOnLauncherTransitionEnd(fromView,animated,false);
        dispatchOnLauncherTransitionEnd(toView,animated,false);
        revealView.setVisibility(View.INVISIBLE);
        contentBackground.setAlpha(alpha);
        for (        View v : layerViews.keySet()) {
          if (layerViews.get(v) == BUILD_AND_SET_LAYER) {
            v.setLayerType(View.LAYER_TYPE_NONE,null);
          }
        }
        cleanupAnimation();
        pCb.onTransitionComplete();
      }
    }
);
    if (workspaceAnim != null) {
      animation.play(workspaceAnim);
    }
    dispatchOnLauncherTransitionPrepare(fromView,animated,false);
    dispatchOnLauncherTransitionPrepare(toView,animated,false);
    final AnimatorSet stateAnimation=animation;
    final Runnable startAnimRunnable=new Runnable(){
      public void run(){
        if (mCurrentAnimation != stateAnimation)         return;
        dispatchOnLauncherTransitionStart(fromView,animated,false);
        dispatchOnLauncherTransitionStart(toView,animated,false);
        for (        View v : layerViews.keySet()) {
          if (layerViews.get(v) == BUILD_AND_SET_LAYER) {
            v.setLayerType(View.LAYER_TYPE_HARDWARE,null);
          }
          if (Utilities.ATLEAST_LOLLIPOP && Utilities.isViewAttachedToWindow(v)) {
            v.buildLayer();
          }
        }
        toView.requestFocus();
        stateAnimation.start();
      }
    }
;
    toView.bringToFront();
    toView.setVisibility(View.VISIBLE);
    toView.post(startAnimRunnable);
    return animation;
  }
 else {
    toView.setTranslationX(0.0f);
    toView.setTranslationY(0.0f);
    toView.setScaleX(1.0f);
    toView.setScaleY(1.0f);
    toView.setVisibility(View.VISIBLE);
    toView.bringToFront();
    contentView.setVisibility(View.VISIBLE);
    dispatchOnLauncherTransitionPrepare(fromView,animated,false);
    dispatchOnLauncherTransitionStart(fromView,animated,false);
    dispatchOnLauncherTransitionEnd(fromView,animated,false);
    dispatchOnLauncherTransitionPrepare(toView,animated,false);
    dispatchOnLauncherTransitionStart(toView,animated,false);
    dispatchOnLauncherTransitionEnd(toView,animated,false);
    pCb.onTransitionComplete();
    return null;
  }
}
