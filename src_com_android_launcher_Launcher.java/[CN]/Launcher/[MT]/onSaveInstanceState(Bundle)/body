{
  outState.putInt(RUNTIME_STATE_CURRENT_SCREEN,mWorkspace.getCurrentScreen());
  final ArrayList<Folder> folders=mWorkspace.getOpenFolders();
  if (folders.size() > 0) {
    final int count=folders.size();
    long[] ids=new long[count];
    for (int i=0; i < count; i++) {
      final FolderInfo info=folders.get(i).getInfo();
      ids[i]=info.id;
    }
    outState.putLongArray(RUNTIME_STATE_USER_FOLDERS,ids);
  }
 else {
    super.onSaveInstanceState(outState);
  }
  final boolean isConfigurationChange=getChangingConfigurations() != 0;
  if (mDrawer.isOpened() && isConfigurationChange) {
    outState.putBoolean(RUNTIME_STATE_ALL_APPS_FOLDER,true);
  }
  if (mAddItemCellInfo != null && mAddItemCellInfo.valid && mWaitingForResult) {
    final CellLayout.CellInfo addItemCellInfo=mAddItemCellInfo;
    final CellLayout layout=(CellLayout)mWorkspace.getChildAt(addItemCellInfo.screen);
    outState.putInt(RUNTIME_STATE_PENDING_ADD_SCREEN,addItemCellInfo.screen);
    outState.putInt(RUNTIME_STATE_PENDING_ADD_CELL_X,addItemCellInfo.cellX);
    outState.putInt(RUNTIME_STATE_PENDING_ADD_CELL_Y,addItemCellInfo.cellY);
    outState.putInt(RUNTIME_STATE_PENDING_ADD_SPAN_X,addItemCellInfo.spanX);
    outState.putInt(RUNTIME_STATE_PENDING_ADD_SPAN_Y,addItemCellInfo.spanY);
    outState.putInt(RUNTIME_STATE_PENDING_ADD_COUNT_X,layout.getCountX());
    outState.putInt(RUNTIME_STATE_PENDING_ADD_COUNT_Y,layout.getCountY());
    outState.putBooleanArray(RUNTIME_STATE_PENDING_ADD_OCCUPIED_CELLS,layout.getOccupiedCells());
  }
  if (mFolderInfo != null && mWaitingForResult) {
    outState.putBoolean(RUNTIME_STATE_PENDING_FOLDER_RENAME,true);
    outState.putLong(RUNTIME_STATE_PENDING_FOLDER_RENAME_ID,mFolderInfo.id);
  }
  if (mCurrentGesture != null && mWaitingForResult) {
    outState.putParcelable(RUNTIME_STATE_PENDING_GESTURE,mCurrentGesture);
  }
  if (mGesturesWindow != null && mGesturesWindow.isShowing()) {
    outState.putBoolean(RUNTIME_STATE_GESTURES_PANEL,true);
    if (mCurrentGesture == null || !mWaitingForResult) {
      final Gesture gesture=mGesturesOverlay.getGesture();
      if (gesture != null) {
        outState.putParcelable(RUNTIME_STATE_GESTURES_PANEL_GESTURE,gesture);
      }
    }
  }
}
