{
  super.onCreate(savedInstanceState);
  setContentView(R.layout.wallpaper_picker);
  mCropView=(CropView)findViewById(R.id.cropView);
  findWallpapers();
  LinearLayout wallpapers=(LinearLayout)findViewById(R.id.wallpaper_list);
  ImageAdapter ia=new ImageAdapter(this);
  for (int i=0; i < ia.getCount(); i++) {
    FrameLayout thumbnail=(FrameLayout)ia.getView(i,null,wallpapers);
    wallpapers.addView(thumbnail,i);
    ThumbnailMetaData meta=new ThumbnailMetaData();
    meta.mWallpaperResId=mImages.get(i);
    thumbnail.setTag(meta);
    thumbnail.setOnClickListener(mThumbnailOnClickListener);
    if (i == 0) {
      mThumbnailOnClickListener.onClick(thumbnail);
    }
  }
  FrameLayout galleryThumbnail=(FrameLayout)getLayoutInflater().inflate(R.layout.wallpaper_picker_gallery_item,wallpapers,false);
  setWallpaperItemPaddingToZero(galleryThumbnail);
  TextView galleryLabel=(TextView)galleryThumbnail.findViewById(R.id.wallpaper_item_label);
  galleryLabel.setText(R.string.gallery);
  wallpapers.addView(galleryThumbnail,0);
  ThumbnailMetaData meta=new ThumbnailMetaData();
  meta.mLaunchesGallery=true;
  galleryThumbnail.setTag(meta);
  galleryThumbnail.setOnClickListener(mThumbnailOnClickListener);
  final ActionBar actionBar=getActionBar();
  actionBar.setCustomView(R.layout.actionbar_set_wallpaper);
  actionBar.getCustomView().setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ThumbnailMetaData meta=(ThumbnailMetaData)mSelectedThumb.getTag();
      if (meta.mLaunchesGallery) {
      }
 else       if (meta.mGalleryImageUri != null) {
        Point inSize=mCropView.getSourceDimensions();
        Point minDims=new Point();
        Point maxDims=new Point();
        Display d=getWindowManager().getDefaultDisplay();
        d.getCurrentSizeRange(minDims,maxDims);
        Point displaySize=new Point();
        d.getSize(displaySize);
        RectF cropRect=mCropView.getCrop();
        float cropScale=displaySize.x / (float)cropRect.width();
        if (displaySize.x < displaySize.y) {
          float extraSpaceToRight=inSize.x - cropRect.right;
          cropRect.right=inSize.x;
        }
 else {
          float leftForPortrait=(cropRect.width() - minDims.x) / 2;
          cropRect.right=inSize.x;
          float portraitHeight=Math.max(maxDims.x,maxDims.y);
          float extraPortraitHeight=portraitHeight - cropRect.height();
          float expandHeight=Math.min(Math.min(inSize.y - cropRect.bottom,cropRect.top),extraPortraitHeight / 2);
          cropRect.top-=expandHeight;
          cropRect.bottom+=expandHeight;
        }
        final int outWidth=(int)Math.ceil(cropRect.width() * cropScale);
        final int outHeight=(int)Math.ceil(cropRect.height() * cropScale);
        Runnable onEndCrop=new Runnable(){
          public void run(){
            updateWallpaperDimensions(outWidth,outHeight);
          }
        }
;
        BitmapCropTask cropTask=new BitmapCropTask(meta.mGalleryImageUri,cropRect,outWidth,outHeight,true,false,onEndCrop);
        cropTask.execute();
      }
 else       if (meta.mWallpaperResId != 0) {
        Point inSize=mCropView.getSourceDimensions();
        Point outSize=getDefaultWallpaperSize(getResources(),getWindowManager());
        RectF crop=getMaxCropRect(inSize.x,inSize.y,outSize.x,outSize.y);
        Runnable onEndCrop=new Runnable(){
          public void run(){
            updateWallpaperDimensions(0,0);
          }
        }
;
        BitmapCropTask cropTask=new BitmapCropTask(meta.mWallpaperResId,crop,outSize.x,outSize.y,true,false,onEndCrop);
        cropTask.execute();
        setResult(Activity.RESULT_OK);
        finish();
      }
    }
  }
);
}
