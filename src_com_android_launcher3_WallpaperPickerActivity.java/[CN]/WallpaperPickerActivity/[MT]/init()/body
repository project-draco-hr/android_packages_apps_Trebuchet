{
  setContentView(R.layout.wallpaper_picker);
  mCropView=(CropView)findViewById(R.id.cropView);
  final View wallpaperStrip=findViewById(R.id.wallpaper_strip);
  mCropView.setTouchCallback(new CropView.TouchCallback(){
    LauncherViewPropertyAnimator mAnim;
    @Override public void onTouchDown(){
      if (mAnim != null) {
        mAnim.cancel();
      }
      if (wallpaperStrip.getTranslationY() == 0) {
        mIgnoreNextTap=true;
      }
      mAnim=new LauncherViewPropertyAnimator(wallpaperStrip);
      mAnim.translationY(wallpaperStrip.getHeight()).alpha(0f).setInterpolator(new DecelerateInterpolator(0.75f));
      mAnim.start();
    }
    @Override public void onTouchUp(){
      mIgnoreNextTap=false;
    }
    @Override public void onTap(){
      boolean ignoreTap=mIgnoreNextTap;
      mIgnoreNextTap=false;
      if (!ignoreTap) {
        if (mAnim != null) {
          mAnim.cancel();
        }
        mAnim=new LauncherViewPropertyAnimator(wallpaperStrip);
        mAnim.translationY(0).alpha(1f).setInterpolator(new DecelerateInterpolator(0.75f));
        mAnim.start();
      }
    }
  }
);
  mThumbnailOnClickListener=new OnClickListener(){
    public void onClick(    View v){
      if (mActionMode != null) {
        if (v.isLongClickable()) {
          mLongClickListener.onLongClick(v);
        }
        return;
      }
      if (mSelectedThumb != null) {
        mSelectedThumb.setSelected(false);
      }
      ThumbnailMetaData meta=(ThumbnailMetaData)v.getTag();
      if (meta.mTileType == TileType.WALLPAPER_RESOURCE || meta.mTileType == TileType.SAVED_WALLPAPER || meta.mTileType == TileType.WALLPAPER_URI) {
        mSelectedThumb=v;
        v.setSelected(true);
      }
      if (meta.mTileType == TileType.PICK_IMAGE) {
        Intent intent=new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("image/*");
        Utilities.startActivityForResultSafely(WallpaperPickerActivity.this,intent,IMAGE_PICK);
      }
 else       if (meta.mTileType == TileType.WALLPAPER_URI) {
        mCropView.setTileSource(new BitmapRegionTileSource(WallpaperPickerActivity.this,meta.mWallpaperUri,1024,0),null);
        mCropView.setTouchEnabled(true);
      }
 else       if (meta.mTileType == TileType.SAVED_WALLPAPER) {
        String imageFilename=mSavedImages.getImageFilename(meta.mSavedWallpaperDbId);
        File file=new File(getFilesDir(),imageFilename);
        mCropView.setTileSource(new BitmapRegionTileSource(WallpaperPickerActivity.this,file.getAbsolutePath(),1024,0),null);
        mCropView.moveToLeft();
        mCropView.setTouchEnabled(false);
      }
 else       if (meta.mTileType == TileType.LIVE_WALLPAPER) {
        Intent preview=new Intent(WallpaperManager.ACTION_CHANGE_LIVE_WALLPAPER);
        preview.putExtra(WallpaperManager.EXTRA_LIVE_WALLPAPER_COMPONENT,meta.mLiveWallpaperInfo.info.getComponent());
        WallpaperManager wm=WallpaperManager.getInstance(WallpaperPickerActivity.this);
        mLiveWallpaperInfoOnPickerLaunch=wm.getWallpaperInfo();
        Utilities.startActivityForResultSafely(WallpaperPickerActivity.this,preview,PICK_LIVE_WALLPAPER);
      }
 else       if (meta.mTileType == TileType.WALLPAPER_RESOURCE) {
        BitmapRegionTileSource source=new BitmapRegionTileSource(mWallpaperResources,WallpaperPickerActivity.this,meta.mWallpaperResId,1024,0);
        mCropView.setTileSource(source,null);
        Point wallpaperSize=WallpaperCropActivity.getDefaultWallpaperSize(getResources(),getWindowManager());
        RectF crop=WallpaperCropActivity.getMaxCropRect(source.getImageWidth(),source.getImageHeight(),wallpaperSize.x,wallpaperSize.y,false);
        mCropView.setScale(wallpaperSize.x / crop.width());
        mCropView.setTouchEnabled(false);
      }
 else       if (meta.mTileType == TileType.THIRD_PARTY_WALLPAPER_PICKER) {
        ResolveInfo info=meta.mThirdPartyWallpaperPickerInfo;
        final ComponentName itemComponentName=new ComponentName(info.activityInfo.packageName,info.activityInfo.name);
        Intent launchIntent=new Intent(Intent.ACTION_SET_WALLPAPER);
        launchIntent.setComponent(itemComponentName);
        Utilities.startActivityForResultSafely(WallpaperPickerActivity.this,launchIntent,PICK_WALLPAPER_THIRD_PARTY_ACTIVITY);
      }
    }
  }
;
  mLongClickListener=new View.OnLongClickListener(){
    public boolean onLongClick(    View view){
      CheckableFrameLayout c=(CheckableFrameLayout)view;
      c.toggle();
      if (mActionMode != null) {
        mActionMode.invalidate();
      }
 else {
        mActionMode=startActionMode(mActionModeCallback);
        int childCount=mWallpapersView.getChildCount();
        for (int i=0; i < childCount; i++) {
          mWallpapersView.getChildAt(i).setSelected(false);
        }
      }
      return true;
    }
  }
;
  findBundledWallpapers();
  mWallpapersView=(LinearLayout)findViewById(R.id.wallpaper_list);
  ImageAdapter ia=new ImageAdapter(this,mBundledWallpaperThumbs);
  populateWallpapersFromAdapter(mWallpapersView,ia,mBundledWallpaperResIds,TileType.WALLPAPER_RESOURCE,false,true);
  mSavedImages=new SavedWallpaperImages(this);
  mSavedImages.loadThumbnailsAndImageIdList();
  ArrayList<Drawable> savedWallpaperThumbs=mSavedImages.getThumbnails();
  ArrayList<Integer> savedWallpaperIds=mSavedImages.getImageIds();
  ia=new ImageAdapter(this,savedWallpaperThumbs);
  populateWallpapersFromAdapter(mWallpapersView,ia,savedWallpaperIds,TileType.SAVED_WALLPAPER,true,true);
  final LinearLayout liveWallpapersView=(LinearLayout)findViewById(R.id.live_wallpaper_list);
  final LiveWallpaperListAdapter a=new LiveWallpaperListAdapter(this);
  a.registerDataSetObserver(new DataSetObserver(){
    public void onChanged(){
      liveWallpapersView.removeAllViews();
      populateWallpapersFromAdapter(liveWallpapersView,a,null,TileType.LIVE_WALLPAPER,false,false);
    }
  }
);
  final LinearLayout thirdPartyWallpapersView=(LinearLayout)findViewById(R.id.third_party_wallpaper_list);
  final ThirdPartyWallpaperPickerListAdapter ta=new ThirdPartyWallpaperPickerListAdapter(this);
  populateWallpapersFromAdapter(thirdPartyWallpapersView,ta,null,TileType.THIRD_PARTY_WALLPAPER_PICKER,false,false);
  LinearLayout masterWallpaperList=(LinearLayout)findViewById(R.id.master_wallpaper_list);
  FrameLayout galleryThumbnail=(FrameLayout)getLayoutInflater().inflate(R.layout.wallpaper_picker_gallery_item,masterWallpaperList,false);
  setWallpaperItemPaddingToZero(galleryThumbnail);
  masterWallpaperList.addView(galleryThumbnail,0);
  Bitmap lastPhoto=getThumbnailOfLastPhoto();
  if (lastPhoto != null) {
    ImageView galleryThumbnailBg=(ImageView)galleryThumbnail.findViewById(R.id.wallpaper_image);
    galleryThumbnailBg.setImageBitmap(getThumbnailOfLastPhoto());
    int colorOverlay=getResources().getColor(R.color.wallpaper_picker_translucent_gray);
    galleryThumbnailBg.setColorFilter(colorOverlay,PorterDuff.Mode.SRC_ATOP);
  }
  ThumbnailMetaData meta=new ThumbnailMetaData();
  meta.mTileType=TileType.PICK_IMAGE;
  galleryThumbnail.setTag(meta);
  galleryThumbnail.setOnClickListener(mThumbnailOnClickListener);
  final LayoutTransition transitioner=new LayoutTransition();
  transitioner.setDuration(200);
  transitioner.setStartDelay(LayoutTransition.CHANGE_DISAPPEARING,0);
  transitioner.setAnimator(LayoutTransition.DISAPPEARING,null);
  mWallpapersView.setLayoutTransition(transitioner);
  final ActionBar actionBar=getActionBar();
  actionBar.setCustomView(R.layout.actionbar_set_wallpaper);
  actionBar.getCustomView().setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ThumbnailMetaData meta=(ThumbnailMetaData)mSelectedThumb.getTag();
      if (meta.mTileType == TileType.PICK_IMAGE) {
      }
 else       if (meta.mWallpaperUri != null) {
        boolean finishActivityWhenDone=true;
        OnBitmapCroppedHandler h=new OnBitmapCroppedHandler(){
          public void onBitmapCropped(          byte[] imageBytes){
            Bitmap thumb=createThumbnail(null,imageBytes,true);
            mSavedImages.writeImage(thumb,imageBytes);
          }
        }
;
        cropImageAndSetWallpaper(meta.mWallpaperUri,h,finishActivityWhenDone);
      }
 else       if (meta.mSavedWallpaperDbId != 0) {
        boolean finishActivityWhenDone=true;
        String imageFilename=mSavedImages.getImageFilename(meta.mSavedWallpaperDbId);
        setWallpaper(imageFilename,finishActivityWhenDone);
      }
 else       if (meta.mWallpaperResId != 0) {
        boolean finishActivityWhenDone=true;
        cropImageAndSetWallpaper(mWallpaperResources,meta.mWallpaperResId,finishActivityWhenDone);
      }
    }
  }
);
  mActionModeCallback=new ActionMode.Callback(){
    @Override public boolean onCreateActionMode(    ActionMode mode,    Menu menu){
      MenuInflater inflater=mode.getMenuInflater();
      inflater.inflate(R.menu.cab_delete_wallpapers,menu);
      return true;
    }
    private int numCheckedItems(){
      int childCount=mWallpapersView.getChildCount();
      int numCheckedItems=0;
      for (int i=0; i < childCount; i++) {
        CheckableFrameLayout c=(CheckableFrameLayout)mWallpapersView.getChildAt(i);
        if (c.isChecked()) {
          numCheckedItems++;
        }
      }
      return numCheckedItems;
    }
    @Override public boolean onPrepareActionMode(    ActionMode mode,    Menu menu){
      int numCheckedItems=numCheckedItems();
      if (numCheckedItems == 0) {
        mode.finish();
        return true;
      }
 else {
        mode.setTitle(getResources().getQuantityString(R.plurals.number_of_items_selected,numCheckedItems,numCheckedItems));
        return true;
      }
    }
    @Override public boolean onActionItemClicked(    ActionMode mode,    MenuItem item){
      int itemId=item.getItemId();
      if (itemId == R.id.menu_delete) {
        int childCount=mWallpapersView.getChildCount();
        ArrayList<View> viewsToRemove=new ArrayList<View>();
        for (int i=0; i < childCount; i++) {
          CheckableFrameLayout c=(CheckableFrameLayout)mWallpapersView.getChildAt(i);
          if (c.isChecked()) {
            ThumbnailMetaData meta=(ThumbnailMetaData)c.getTag();
            mSavedImages.deleteImage(meta.mSavedWallpaperDbId);
            viewsToRemove.add(c);
          }
        }
        for (        View v : viewsToRemove) {
          mWallpapersView.removeView(v);
        }
        mode.finish();
        return true;
      }
 else {
        return false;
      }
    }
    @Override public void onDestroyActionMode(    ActionMode mode){
      int childCount=mWallpapersView.getChildCount();
      for (int i=0; i < childCount; i++) {
        CheckableFrameLayout c=(CheckableFrameLayout)mWallpapersView.getChildAt(i);
        c.setChecked(false);
      }
      mSelectedThumb.setSelected(true);
      mActionMode=null;
    }
  }
;
}
