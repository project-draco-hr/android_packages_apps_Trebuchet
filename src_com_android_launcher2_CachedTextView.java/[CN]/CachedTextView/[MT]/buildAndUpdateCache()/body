{
  final Layout layout=getLayout();
  final int left=getCompoundPaddingLeft();
  final int top=getExtendedPaddingTop();
  final float prevAlpha=getAlpha();
  mTextCacheLeft=layout.getLineLeft(0) - getCacheLeftPadding();
  mTextCacheTop=top + layout.getLineTop(0) - mPaddingV - getCacheTopPadding();
  mRectLeft=mScrollX + getLeft();
  mRectTop=0;
  mTextCacheScrollX=mScrollX;
  final float textCacheRight=Math.min(left + layout.getLineRight(0) + mPaddingH,mScrollX + mRight - mLeft) + getCacheRightPadding();
  final float textCacheBottom=top + layout.getLineBottom(0) + mPaddingV+ getCacheBottomPadding();
  final float xCharWidth=getPaint().measureText("x");
  int width=(int)(textCacheRight - mTextCacheLeft + (2 * xCharWidth));
  int height=(int)(textCacheBottom - mTextCacheTop);
  if (width != 0 && height != 0) {
    if (mCache != null) {
      if (mCache.getWidth() != width || mCache.getHeight() != height) {
        mCache.recycle();
        mCache=null;
      }
    }
    if (mCache == null) {
      mCache=Bitmap.createBitmap(width,height,Config.ARGB_8888);
      mCacheCanvas.setBitmap(mCache);
    }
 else {
      mCacheCanvas.drawColor(0,Mode.CLEAR);
    }
    mCacheCanvas.save();
    mCacheCanvas.translate(-mTextCacheLeft,-mTextCacheTop);
    mIsBuildingCache=true;
    setAlpha(1.0f);
    draw(mCacheCanvas);
    setAlpha(prevAlpha);
    mIsBuildingCache=false;
    mCacheCanvas.restore();
    mText=getText();
    setText(" ");
  }
}
