{
  File source=null;
  Class type=Key.class;
  for (int i=0; i < args.length; i++) {
    if ("-k".equals(args[i])) {
      type=Key.class;
    }
 else     if ("-f".equals(args[i])) {
      type=Favorite.class;
    }
 else     if ("-i".equals(args[i])) {
      type=Resource.class;
    }
 else     if ("-s".equals(args[i])) {
      type=Screen.class;
    }
 else     if ("-w".equals(args[i])) {
      type=Widget.class;
    }
 else     if (args[i] != null && !args[i].startsWith("-")) {
      source=new File(args[i]);
    }
 else {
      System.err.println("Unsupported flag: " + args[i]);
      usage(args);
    }
  }
  ByteArrayOutputStream byteStream=new ByteArrayOutputStream();
  BufferedInputStream input=null;
  if (source == null) {
    input=new BufferedInputStream(System.in);
  }
 else {
    try {
      input=new BufferedInputStream(new FileInputStream(source));
    }
 catch (    FileNotFoundException e) {
      System.err.println("failed to open file: " + source + ", "+ e);
      System.exit(1);
    }
  }
  byte[] buffer=new byte[1024];
  try {
    while (input.available() > 0) {
      int n=input.read(buffer);
      if (n > 0) {
        byteStream.write(buffer,0,n);
      }
    }
  }
 catch (  IOException e) {
    System.err.println("failed to read input: " + e);
    System.exit(1);
  }
  System.err.println("read this many bytes: " + byteStream.size());
  MessageNano proto=null;
  if (type == Key.class) {
    Key key=new Key();
    try {
      key=Key.parseFrom(byteStream.toByteArray());
    }
 catch (    InvalidProtocolBufferNanoException e) {
      System.err.println("failed to parse proto: " + e);
      System.exit(1);
    }
    if (key.checksum != checkKey(key)) {
      System.err.println("key ckecksum failed");
      System.exit(1);
    }
    proto=key;
  }
 else {
    CheckedMessage wrapper=new CheckedMessage();
    try {
      MessageNano.mergeFrom(wrapper,byteStream.toByteArray());
    }
 catch (    InvalidProtocolBufferNanoException e) {
      System.err.println("failed to parse wrapper: " + e);
      System.exit(1);
    }
    CRC32 checksum=new CRC32();
    checksum.update(wrapper.payload);
    if (wrapper.checksum != checksum.getValue()) {
      System.err.println("wrapper ckecksum failed");
      System.exit(1);
    }
    proto=(MessageNano)type.newInstance();
    try {
      MessageNano.mergeFrom(proto,wrapper.payload);
    }
 catch (    InvalidProtocolBufferNanoException e) {
      System.err.println("failed to parse proto: " + e);
      System.exit(1);
    }
  }
  System.out.println(proto.toString());
  if (proto instanceof Resource) {
    Resource icon=(Resource)proto;
    final String path="icon.webp";
    FileOutputStream iconFile=new FileOutputStream(path);
    iconFile.write(icon.data);
    iconFile.close();
    System.err.println("wrote " + path);
  }
  if (proto instanceof Widget) {
    Widget widget=(Widget)proto;
    if (widget.icon != null) {
      final String path="widget_icon.webp";
      FileOutputStream iconFile=new FileOutputStream(path);
      iconFile.write(widget.icon.data);
      iconFile.close();
      System.err.println("wrote " + path);
    }
    if (widget.preview != null) {
      final String path="widget_preview.webp";
      FileOutputStream iconFile=new FileOutputStream(path);
      iconFile.write(widget.preview.data);
      iconFile.close();
      System.err.println("wrote " + path);
    }
  }
  System.exit(0);
}
