{
  super(context,attrs,defStyle);
  setWillNotDraw(false);
  setClipToPadding(false);
  mLauncher=(Launcher)context;
  DeviceProfile grid=mLauncher.getDeviceProfile();
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.CellLayout,defStyle,0);
  mCellWidth=mCellHeight=-1;
  mFixedCellWidth=mFixedCellHeight=-1;
  mWidthGap=mOriginalWidthGap=0;
  mHeightGap=mOriginalHeightGap=0;
  mMaxGap=Integer.MAX_VALUE;
  mCountX=(int)grid.inv.numColumns;
  mCountY=(int)grid.inv.numRows;
  mOccupied=new boolean[mCountX][mCountY];
  mTmpOccupied=new boolean[mCountX][mCountY];
  mPreviousReorderDirection[0]=INVALID_DIRECTION;
  mPreviousReorderDirection[1]=INVALID_DIRECTION;
  a.recycle();
  setAlwaysDrawnWithCacheEnabled(false);
  final Resources res=getResources();
  mHotseatScale=(float)grid.hotseatIconSizePx / grid.iconSizePx;
  mBackground=(TransitionDrawable)res.getDrawable(R.drawable.bg_screenpanel);
  mBackground.setCallback(this);
  mBackground.setAlpha((int)(mBackgroundAlpha * 255));
  mReorderPreviewAnimationMagnitude=(REORDER_PREVIEW_MAGNITUDE * grid.iconSizePx);
  mEaseOutInterpolator=new DecelerateInterpolator(2.5f);
  mDragCell[0]=mDragCell[1]=-1;
  for (int i=0; i < mDragOutlines.length; i++) {
    mDragOutlines[i]=new Rect(-1,-1,-1,-1);
  }
  final int duration=res.getInteger(R.integer.config_dragOutlineFadeTime);
  final float fromAlphaValue=0;
  final float toAlphaValue=(float)res.getInteger(R.integer.config_dragOutlineMaxAlpha);
  Arrays.fill(mDragOutlineAlphas,fromAlphaValue);
  for (int i=0; i < mDragOutlineAnims.length; i++) {
    final InterruptibleInOutAnimator anim=new InterruptibleInOutAnimator(this,duration,fromAlphaValue,toAlphaValue);
    anim.getAnimator().setInterpolator(mEaseOutInterpolator);
    final int thisIndex=i;
    anim.getAnimator().addUpdateListener(new AnimatorUpdateListener(){
      public void onAnimationUpdate(      ValueAnimator animation){
        final Bitmap outline=(Bitmap)anim.getTag();
        if (outline == null) {
          @SuppressWarnings("all") final boolean debug=false;
          if (debug) {
            Object val=animation.getAnimatedValue();
            Log.d(TAG,"anim " + thisIndex + " update: "+ val+ ", isStopped "+ anim.isStopped());
          }
          animation.cancel();
        }
 else {
          mDragOutlineAlphas[thisIndex]=(Float)animation.getAnimatedValue();
          CellLayout.this.invalidate(mDragOutlines[thisIndex]);
        }
      }
    }
);
    anim.getAnimator().addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        if ((Float)((ValueAnimator)animation).getAnimatedValue() == 0f) {
          anim.setTag(null);
        }
      }
    }
);
    mDragOutlineAnims[i]=anim;
  }
  mShortcutsAndWidgets=new ShortcutAndWidgetContainer(context);
  mShortcutsAndWidgets.setCellDimensions(mCellWidth,mCellHeight,mWidthGap,mHeightGap,mCountX,mCountY);
  mStylusEventHelper=new StylusEventHelper(this);
  mTouchFeedbackView=new ClickShadowView(context);
  addView(mTouchFeedbackView);
  addView(mShortcutsAndWidgets);
}
