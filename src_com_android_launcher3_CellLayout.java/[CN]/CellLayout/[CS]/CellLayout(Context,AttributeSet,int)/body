{
  super(context,attrs,defStyle);
  mDragEnforcer=new DropTarget.DragEnforcer(context);
  setWillNotDraw(false);
  setClipToPadding(false);
  mLauncher=(Launcher)context;
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.CellLayout,defStyle,0);
  mCellWidth=-1;
  mCellHeight=-1;
  mWidthGap=mOriginalWidthGap=0;
  mHeightGap=mOriginalHeightGap=0;
  mMaxGap=Integer.MAX_VALUE;
  mCountX=LauncherModel.getCellCountX();
  mCountY=LauncherModel.getCellCountY();
  mOccupied=new boolean[mCountX][mCountY];
  mTmpOccupied=new boolean[mCountX][mCountY];
  mPreviousReorderDirection[0]=INVALID_DIRECTION;
  mPreviousReorderDirection[1]=INVALID_DIRECTION;
  a.recycle();
  setAlwaysDrawnWithCacheEnabled(false);
  final Resources res=getResources();
  LauncherAppState app=LauncherAppState.getInstance();
  DeviceProfile grid=app.getDynamicGrid().getDeviceProfile();
  mHotseatScale=(float)grid.hotseatIconSize / grid.iconSize;
  mNormalBackground=res.getDrawable(R.drawable.homescreen_blue_normal_holo);
  mActiveGlowBackground=res.getDrawable(R.drawable.homescreen_blue_strong_holo);
  mOverScrollLeft=res.getDrawable(R.drawable.overscroll_glow_left);
  mOverScrollRight=res.getDrawable(R.drawable.overscroll_glow_right);
  mForegroundPadding=res.getDimensionPixelSize(R.dimen.workspace_overscroll_drawable_padding);
  mReorderHintAnimationMagnitude=(REORDER_HINT_MAGNITUDE * grid.iconSizePx);
  mNormalBackground.setFilterBitmap(true);
  mActiveGlowBackground.setFilterBitmap(true);
  mEaseOutInterpolator=new DecelerateInterpolator(2.5f);
  mDragCell[0]=mDragCell[1]=-1;
  for (int i=0; i < mDragOutlines.length; i++) {
    mDragOutlines[i]=new Rect(-1,-1,-1,-1);
  }
  final int duration=res.getInteger(R.integer.config_dragOutlineFadeTime);
  final float fromAlphaValue=0;
  final float toAlphaValue=(float)res.getInteger(R.integer.config_dragOutlineMaxAlpha);
  Arrays.fill(mDragOutlineAlphas,fromAlphaValue);
  for (int i=0; i < mDragOutlineAnims.length; i++) {
    final InterruptibleInOutAnimator anim=new InterruptibleInOutAnimator(this,duration,fromAlphaValue,toAlphaValue);
    anim.getAnimator().setInterpolator(mEaseOutInterpolator);
    final int thisIndex=i;
    anim.getAnimator().addUpdateListener(new AnimatorUpdateListener(){
      public void onAnimationUpdate(      ValueAnimator animation){
        final Bitmap outline=(Bitmap)anim.getTag();
        if (outline == null) {
          @SuppressWarnings("all") final boolean debug=false;
          if (debug) {
            Object val=animation.getAnimatedValue();
            Log.d(TAG,"anim " + thisIndex + " update: "+ val+ ", isStopped "+ anim.isStopped());
          }
          animation.cancel();
        }
 else {
          mDragOutlineAlphas[thisIndex]=(Float)animation.getAnimatedValue();
          CellLayout.this.invalidate(mDragOutlines[thisIndex]);
        }
      }
    }
);
    anim.getAnimator().addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        if ((Float)((ValueAnimator)animation).getAnimatedValue() == 0f) {
          anim.setTag(null);
        }
      }
    }
);
    mDragOutlineAnims[i]=anim;
  }
  mBackgroundRect=new Rect();
  mForegroundRect=new Rect();
  mShortcutsAndWidgets=new ShortcutAndWidgetContainer(context);
  mShortcutsAndWidgets.setCellDimensions(mCellWidth,mCellHeight,mWidthGap,mHeightGap,mCountX,mCountY);
  addView(mShortcutsAndWidgets);
}
