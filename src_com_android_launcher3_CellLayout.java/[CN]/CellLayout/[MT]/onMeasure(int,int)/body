{
  int widthSpecMode=MeasureSpec.getMode(widthMeasureSpec);
  int widthSpecSize=MeasureSpec.getSize(widthMeasureSpec);
  int heightSpecMode=MeasureSpec.getMode(heightMeasureSpec);
  int heightSpecSize=MeasureSpec.getSize(heightMeasureSpec);
  if (widthSpecMode == MeasureSpec.UNSPECIFIED || heightSpecMode == MeasureSpec.UNSPECIFIED) {
    throw new RuntimeException("CellLayout cannot have UNSPECIFIED dimensions");
  }
  int numWidthGaps=mCountX - 1;
  int numHeightGaps=mCountY - 1;
  if (mOriginalWidthGap < 0 || mOriginalHeightGap < 0) {
    int hSpace=widthSpecSize - getPaddingLeft() - getPaddingRight();
    int vSpace=heightSpecSize - getPaddingTop() - getPaddingBottom();
    int hFreeSpace=hSpace - (mCountX * mCellWidth);
    int vFreeSpace=vSpace - (mCountY * mCellHeight);
    mWidthGap=Math.min(mMaxGap,numWidthGaps > 0 ? (hFreeSpace / numWidthGaps) : 0);
    mHeightGap=Math.min(mMaxGap,numHeightGaps > 0 ? (vFreeSpace / numHeightGaps) : 0);
    mShortcutsAndWidgets.setCellDimensions(mCellWidth,mCellHeight,mWidthGap,mHeightGap,mCountX);
  }
 else {
    mWidthGap=mOriginalWidthGap;
    mHeightGap=mOriginalHeightGap;
  }
  int newWidth=widthSpecSize;
  int newHeight=heightSpecSize;
  if (widthSpecMode == MeasureSpec.AT_MOST) {
    newWidth=getPaddingLeft() + getPaddingRight() + (mCountX * mCellWidth)+ ((mCountX - 1) * mWidthGap);
    newHeight=getPaddingTop() + getPaddingBottom() + (mCountY * mCellHeight)+ ((mCountY - 1) * mHeightGap);
    setMeasuredDimension(newWidth,newHeight);
  }
  int count=getChildCount();
  for (int i=0; i < count; i++) {
    View child=getChildAt(i);
    int childWidthMeasureSpec=MeasureSpec.makeMeasureSpec(newWidth - getPaddingLeft() - getPaddingRight(),MeasureSpec.EXACTLY);
    int childheightMeasureSpec=MeasureSpec.makeMeasureSpec(newHeight - getPaddingTop() - getPaddingBottom(),MeasureSpec.EXACTLY);
    child.measure(childWidthMeasureSpec,childheightMeasureSpec);
  }
  setMeasuredDimension(newWidth,newHeight);
}
