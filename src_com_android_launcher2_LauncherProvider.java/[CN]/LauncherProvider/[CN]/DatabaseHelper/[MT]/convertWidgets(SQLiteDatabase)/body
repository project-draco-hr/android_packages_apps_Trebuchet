{
  final int[] bindSources=new int[]{Favorites.ITEM_TYPE_WIDGET_CLOCK,Favorites.ITEM_TYPE_WIDGET_PHOTO_FRAME};
  final ArrayList<ComponentName> bindTargets=new ArrayList<ComponentName>();
  bindTargets.add(new ComponentName("com.android.alarmclock","com.android.alarmclock.AnalogAppWidgetProvider"));
  bindTargets.add(new ComponentName("com.android.camera","com.android.camera.PhotoAppWidgetProvider"));
  final String selectWhere=buildOrWhereString(Favorites.ITEM_TYPE,bindSources);
  Cursor c=null;
  boolean allocatedAppWidgets=false;
  db.beginTransaction();
  try {
    c=db.query(TABLE_FAVORITES,new String[]{Favorites._ID},selectWhere,null,null,null,null);
    if (LOGD)     Log.d(TAG,"found upgrade cursor count=" + c.getCount());
    final ContentValues values=new ContentValues();
    while (c != null && c.moveToNext()) {
      long favoriteId=c.getLong(0);
      try {
        int appWidgetId=mAppWidgetHost.allocateAppWidgetId();
        if (LOGD) {
          Log.d(TAG,"allocated appWidgetId=" + appWidgetId + " for favoriteId="+ favoriteId);
        }
        values.clear();
        values.put(LauncherSettings.Favorites.APPWIDGET_ID,appWidgetId);
        values.put(LauncherSettings.Favorites.SPANX,2);
        values.put(LauncherSettings.Favorites.SPANY,2);
        String updateWhere=Favorites._ID + "=" + favoriteId;
        db.update(TABLE_FAVORITES,values,updateWhere,null);
        allocatedAppWidgets=true;
      }
 catch (      RuntimeException ex) {
        Log.e(TAG,"Problem allocating appWidgetId",ex);
      }
    }
    db.setTransactionSuccessful();
  }
 catch (  SQLException ex) {
    Log.w(TAG,"Problem while allocating appWidgetIds for existing widgets",ex);
  }
 finally {
    db.endTransaction();
    if (c != null) {
      c.close();
    }
  }
  if (allocatedAppWidgets) {
    launchAppWidgetBinder(bindSources,bindTargets);
  }
}
