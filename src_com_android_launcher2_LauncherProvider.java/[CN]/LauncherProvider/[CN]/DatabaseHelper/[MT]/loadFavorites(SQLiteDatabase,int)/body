{
  Intent intent=new Intent(Intent.ACTION_MAIN,null);
  intent.addCategory(Intent.CATEGORY_LAUNCHER);
  ContentValues values=new ContentValues();
  PackageManager packageManager=mContext.getPackageManager();
  int allAppsButtonRank=mContext.getResources().getInteger(R.integer.hotseat_all_apps_index);
  int i=0;
  try {
    XmlResourceParser parser=mContext.getResources().getXml(workspaceResourceId);
    AttributeSet attrs=Xml.asAttributeSet(parser);
    XmlUtils.beginDocument(parser,TAG_FAVORITES);
    final int depth=parser.getDepth();
    int type;
    while (((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {
      if (type != XmlPullParser.START_TAG) {
        continue;
      }
      boolean added=false;
      final String name=parser.getName();
      TypedArray a=mContext.obtainStyledAttributes(attrs,R.styleable.Favorite);
      long container=LauncherSettings.Favorites.CONTAINER_DESKTOP;
      if (a.hasValue(R.styleable.Favorite_container)) {
        container=Long.valueOf(a.getString(R.styleable.Favorite_container));
      }
      String screen=a.getString(R.styleable.Favorite_screen);
      String x=a.getString(R.styleable.Favorite_x);
      String y=a.getString(R.styleable.Favorite_y);
      if (container == LauncherSettings.Favorites.CONTAINER_HOTSEAT && Integer.valueOf(screen) == allAppsButtonRank) {
        throw new RuntimeException("Invalid screen position for hotseat item");
      }
      values.clear();
      values.put(LauncherSettings.Favorites.CONTAINER,container);
      values.put(LauncherSettings.Favorites.SCREEN,screen);
      values.put(LauncherSettings.Favorites.CELLX,x);
      values.put(LauncherSettings.Favorites.CELLY,y);
      if (TAG_FAVORITE.equals(name)) {
        long id=addAppShortcut(db,values,a,packageManager,intent);
        added=id >= 0;
      }
 else       if (TAG_SEARCH.equals(name)) {
        added=addSearchWidget(db,values);
      }
 else       if (TAG_CLOCK.equals(name)) {
        added=addClockWidget(db,values);
      }
 else       if (TAG_APPWIDGET.equals(name)) {
        added=addAppWidget(db,values,a,packageManager);
      }
 else       if (TAG_SHORTCUT.equals(name)) {
        long id=addUriShortcut(db,values,a);
        added=id >= 0;
      }
 else       if (TAG_FOLDER.equals(name)) {
        String title;
        int titleResId=a.getResourceId(R.styleable.Favorite_title,-1);
        if (titleResId != -1) {
          title=mContext.getResources().getString(titleResId);
        }
 else {
          title=mContext.getResources().getString(R.string.folder_name);
        }
        values.put(LauncherSettings.Favorites.TITLE,title);
        long folderId=addFolder(db,values);
        added=folderId >= 0;
        ArrayList<Long> folderItems=new ArrayList<Long>();
        int folderDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > folderDepth) {
          if (type != XmlPullParser.START_TAG) {
            continue;
          }
          final String folder_item_name=parser.getName();
          TypedArray ar=mContext.obtainStyledAttributes(attrs,R.styleable.Favorite);
          values.clear();
          values.put(LauncherSettings.Favorites.CONTAINER,folderId);
          if (TAG_FAVORITE.equals(folder_item_name) && folderId >= 0) {
            long id=addAppShortcut(db,values,ar,packageManager,intent);
            if (id >= 0) {
              folderItems.add(id);
            }
          }
 else           if (TAG_SHORTCUT.equals(folder_item_name) && folderId >= 0) {
            long id=addUriShortcut(db,values,ar);
            if (id >= 0) {
              folderItems.add(id);
            }
          }
 else {
            throw new RuntimeException("Folders can " + "contain only shortcuts");
          }
          ar.recycle();
        }
        if (folderItems.size() < 2 && folderId >= 0) {
          deleteId(db,folderId);
          if (folderItems.size() > 0) {
            deleteId(db,folderItems.get(0));
          }
          added=false;
        }
      }
      if (added)       i++;
      a.recycle();
    }
  }
 catch (  XmlPullParserException e) {
    Log.w(TAG,"Got exception parsing favorites.",e);
  }
catch (  IOException e) {
    Log.w(TAG,"Got exception parsing favorites.",e);
  }
catch (  RuntimeException e) {
    Log.w(TAG,"Got exception parsing favorites.",e);
  }
  return i;
}
