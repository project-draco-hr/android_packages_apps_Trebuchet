{
  mWaitingToShrink=false;
  if (mIsSmall) {
    float finalScaleFactor=1.0f;
    float finalBackgroundAlpha=0.0f;
    if (springLoaded) {
      finalScaleFactor=mSpringLoadedShrinkFactor;
      finalBackgroundAlpha=1.0f;
    }
 else {
      mIsSmall=false;
    }
    if (mAnimator != null) {
      mAnimator.cancel();
    }
    mAnimator=new AnimatorSet();
    final int screenCount=getChildCount();
    final int duration=getResources().getInteger(R.integer.config_workspaceUnshrinkTime);
    final float[] oldTranslationXs=new float[getChildCount()];
    final float[] oldTranslationYs=new float[getChildCount()];
    final float[] oldScaleXs=new float[getChildCount()];
    final float[] oldScaleYs=new float[getChildCount()];
    final float[] oldBackgroundAlphas=new float[getChildCount()];
    final float[] oldBackgroundAlphaMultipliers=new float[getChildCount()];
    final float[] oldAlphas=new float[getChildCount()];
    final float[] oldRotationYs=new float[getChildCount()];
    final float[] newTranslationXs=new float[getChildCount()];
    final float[] newTranslationYs=new float[getChildCount()];
    final float[] newScaleXs=new float[getChildCount()];
    final float[] newScaleYs=new float[getChildCount()];
    final float[] newBackgroundAlphas=new float[getChildCount()];
    final float[] newBackgroundAlphaMultipliers=new float[getChildCount()];
    final float[] newAlphas=new float[getChildCount()];
    final float[] newRotationYs=new float[getChildCount()];
    for (int i=0; i < screenCount; i++) {
      final CellLayout cl=(CellLayout)getChildAt(i);
      float finalAlphaValue=0f;
      float rotation=0f;
      if (LauncherApplication.isScreenLarge()) {
        finalAlphaValue=(i == mCurrentPage) ? 1.0f : 0.0f;
        if (i < mCurrentPage) {
          rotation=WORKSPACE_ROTATION;
        }
 else         if (i > mCurrentPage) {
          rotation=-WORKSPACE_ROTATION;
        }
      }
 else {
        finalAlphaValue=1f;
      }
      float finalAlphaMultiplierValue=1f;
      float translation=0f;
      if (LauncherApplication.isScreenLarge()) {
        translation=getOffsetXForRotation(rotation,cl.getWidth(),cl.getHeight());
      }
      oldAlphas[i]=cl.getAlpha();
      newAlphas[i]=finalAlphaValue;
      if (animated) {
        oldTranslationXs[i]=cl.getTranslationX();
        oldTranslationYs[i]=cl.getTranslationY();
        oldScaleXs[i]=cl.getScaleX();
        oldScaleYs[i]=cl.getScaleY();
        oldBackgroundAlphas[i]=cl.getBackgroundAlpha();
        oldBackgroundAlphaMultipliers[i]=cl.getBackgroundAlphaMultiplier();
        oldRotationYs[i]=cl.getRotationY();
        newTranslationXs[i]=translation;
        newTranslationYs[i]=0f;
        newScaleXs[i]=finalScaleFactor;
        newScaleYs[i]=finalScaleFactor;
        newBackgroundAlphas[i]=finalBackgroundAlpha;
        newBackgroundAlphaMultipliers[i]=finalAlphaMultiplierValue;
        newRotationYs[i]=rotation;
      }
 else {
        cl.setTranslationX(translation);
        cl.setTranslationY(0.0f);
        cl.setScaleX(finalScaleFactor);
        cl.setScaleY(finalScaleFactor);
        cl.setBackgroundAlpha(0.0f);
        cl.setBackgroundAlphaMultiplier(finalAlphaMultiplierValue);
        cl.setAlpha(finalAlphaValue);
        cl.setRotationY(rotation);
        mUnshrinkAnimationListener.onAnimationEnd(null);
      }
    }
    Display display=mLauncher.getWindowManager().getDefaultDisplay();
    boolean isLandscape=display.getWidth() > display.getHeight();
    final boolean enableWallpaperEffects=isHardwareAccelerated() && LauncherApplication.isScreenLarge();
    if (enableWallpaperEffects) {
switch (mShrinkState) {
case MIDDLE:
case SPRING_LOADED:
        if (animated) {
          mWallpaperOffset.setHorizontalCatchupConstant(isLandscape ? 0.49f : 0.46f);
          mWallpaperOffset.setVerticalCatchupConstant(isLandscape ? 0.49f : 0.46f);
          mWallpaperOffset.setOverrideHorizontalCatchupConstant(true);
        }
      break;
case BOTTOM_HIDDEN:
case BOTTOM_VISIBLE:
    if (animated) {
      mWallpaperOffset.setHorizontalCatchupConstant(isLandscape ? 0.65f : 0.65f);
      mWallpaperOffset.setVerticalCatchupConstant(isLandscape ? 0.65f : 0.65f);
      mWallpaperOffset.setOverrideHorizontalCatchupConstant(true);
    }
  break;
}
}
if (animated) {
ValueAnimator animWithInterpolator=ValueAnimator.ofFloat(0f,1f).setDuration(duration);
animWithInterpolator.setInterpolator(mZoomInInterpolator);
final float oldHorizontalWallpaperOffset=enableWallpaperEffects ? getHorizontalWallpaperOffset() : 0;
final float oldVerticalWallpaperOffset=enableWallpaperEffects ? getVerticalWallpaperOffset() : 0;
final float newHorizontalWallpaperOffset=enableWallpaperEffects ? wallpaperOffsetForCurrentScroll() : 0;
final float newVerticalWallpaperOffset=enableWallpaperEffects ? 0.5f : 0;
animWithInterpolator.addUpdateListener(new LauncherAnimatorUpdateListener(){
public void onAnimationUpdate(float a,float b){
  if (b == 0f) {
    return;
  }
  fastInvalidate();
  if (enableWallpaperEffects) {
    setHorizontalWallpaperOffset(a * oldHorizontalWallpaperOffset + b * newHorizontalWallpaperOffset);
    setVerticalWallpaperOffset(a * oldVerticalWallpaperOffset + b * newVerticalWallpaperOffset);
  }
  for (int i=0; i < screenCount; i++) {
    final CellLayout cl=(CellLayout)getChildAt(i);
    cl.fastInvalidate();
    cl.setFastTranslationX(a * oldTranslationXs[i] + b * newTranslationXs[i]);
    cl.setFastTranslationY(a * oldTranslationYs[i] + b * newTranslationYs[i]);
    cl.setFastScaleX(a * oldScaleXs[i] + b * newScaleXs[i]);
    cl.setFastScaleY(a * oldScaleYs[i] + b * newScaleYs[i]);
    cl.setFastBackgroundAlpha(a * oldBackgroundAlphas[i] + b * newBackgroundAlphas[i]);
    cl.setBackgroundAlphaMultiplier(a * oldBackgroundAlphaMultipliers[i] + b * newBackgroundAlphaMultipliers[i]);
    cl.setFastAlpha(a * oldAlphas[i] + b * newAlphas[i]);
  }
}
}
);
ValueAnimator rotationAnim=ValueAnimator.ofFloat(0f,1f).setDuration(duration);
rotationAnim.setInterpolator(new DecelerateInterpolator(2.0f));
rotationAnim.addUpdateListener(new LauncherAnimatorUpdateListener(){
public void onAnimationUpdate(float a,float b){
  if (b == 0f) {
    return;
  }
  for (int i=0; i < screenCount; i++) {
    final CellLayout cl=(CellLayout)getChildAt(i);
    cl.setFastRotationY(a * oldRotationYs[i] + b * newRotationYs[i]);
  }
}
}
);
mAnimator.playTogether(animWithInterpolator,rotationAnim);
mAnimator.addListener(mUnshrinkAnimationListener);
mAnimator.start();
}
 else {
if (enableWallpaperEffects) {
setHorizontalWallpaperOffset(wallpaperOffsetForCurrentScroll());
setVerticalWallpaperOffset(0.5f);
updateWallpaperOffsetImmediately();
}
}
}
hideBackgroundGradient(springLoaded ? getResources().getInteger(R.integer.config_appsCustomizeSpringLoadedBgAlpha) / 100f : 0f);
}
