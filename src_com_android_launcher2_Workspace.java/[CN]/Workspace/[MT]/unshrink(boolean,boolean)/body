{
  if (isSmall()) {
    float finalScaleFactor=1.0f;
    float finalBackgroundAlpha=0.0f;
    if (springLoaded) {
      finalScaleFactor=mSpringLoadedShrinkFactor;
      finalBackgroundAlpha=1.0f;
      mState=State.SPRING_LOADED;
    }
 else {
      mState=State.NORMAL;
    }
    if (mAnimator != null) {
      mAnimator.cancel();
    }
    mAnimator=new AnimatorSet();
    mShrinkAnimationEnabled=false;
    mUnshrinkAnimationEnabled=true;
    final int screenCount=getChildCount();
    initAnimationArrays();
    final int duration=getResources().getInteger(R.integer.config_workspaceUnshrinkTime);
    for (int i=0; i < screenCount; i++) {
      final CellLayout cl=(CellLayout)getChildAt(i);
      float finalAlphaValue=0f;
      float rotation=0f;
      if (LauncherApplication.isScreenLarge()) {
        finalAlphaValue=(i == mCurrentPage) ? 1.0f : 0.0f;
        if (i < mCurrentPage) {
          rotation=WORKSPACE_ROTATION;
        }
 else         if (i > mCurrentPage) {
          rotation=-WORKSPACE_ROTATION;
        }
      }
 else {
        finalAlphaValue=1f;
      }
      float finalAlphaMultiplierValue=1f;
      float translation=0f;
      if (LauncherApplication.isScreenLarge()) {
        translation=getOffsetXForRotation(rotation,cl.getWidth(),cl.getHeight());
      }
      mOldAlphas[i]=cl.getAlpha();
      mNewAlphas[i]=finalAlphaValue;
      if (animated) {
        mOldTranslationXs[i]=cl.getTranslationX();
        mOldTranslationYs[i]=cl.getTranslationY();
        mOldScaleXs[i]=cl.getScaleX();
        mOldScaleYs[i]=cl.getScaleY();
        mOldBackgroundAlphas[i]=cl.getBackgroundAlpha();
        mOldBackgroundAlphaMultipliers[i]=cl.getBackgroundAlphaMultiplier();
        mOldRotationYs[i]=cl.getRotationY();
        mNewTranslationXs[i]=translation;
        mNewTranslationYs[i]=0f;
        mNewScaleXs[i]=finalScaleFactor;
        mNewScaleYs[i]=finalScaleFactor;
        mNewBackgroundAlphas[i]=finalBackgroundAlpha;
        mNewBackgroundAlphaMultipliers[i]=finalAlphaMultiplierValue;
        mNewRotationYs[i]=rotation;
      }
 else {
        cl.setTranslationX(translation);
        cl.setTranslationY(0.0f);
        cl.setScaleX(finalScaleFactor);
        cl.setScaleY(finalScaleFactor);
        cl.setBackgroundAlpha(0.0f);
        cl.setBackgroundAlphaMultiplier(finalAlphaMultiplierValue);
        cl.setAlpha(finalAlphaValue);
        cl.setRotationY(rotation);
        mUnshrinkAnimationListener.onAnimationEnd(null);
      }
    }
    Display display=mLauncher.getWindowManager().getDefaultDisplay();
    boolean isLandscape=display.getWidth() > display.getHeight();
    final boolean enableWallpaperEffects=isHardwareAccelerated() && LauncherApplication.isScreenLarge();
    if (enableWallpaperEffects) {
switch (mState) {
case SPRING_LOADED:
        if (animated) {
          mWallpaperOffset.setHorizontalCatchupConstant(isLandscape ? 0.49f : 0.46f);
          mWallpaperOffset.setVerticalCatchupConstant(isLandscape ? 0.49f : 0.46f);
          mWallpaperOffset.setOverrideHorizontalCatchupConstant(true);
        }
      break;
case SMALL:
    if (animated) {
      mWallpaperOffset.setHorizontalCatchupConstant(isLandscape ? 0.65f : 0.65f);
      mWallpaperOffset.setVerticalCatchupConstant(isLandscape ? 0.65f : 0.65f);
      mWallpaperOffset.setOverrideHorizontalCatchupConstant(true);
    }
  break;
}
}
if (animated) {
ValueAnimator animWithInterpolator=ValueAnimator.ofFloat(0f,1f).setDuration(duration);
animWithInterpolator.setInterpolator(mZoomInInterpolator);
final float oldHorizontalWallpaperOffset=enableWallpaperEffects ? getHorizontalWallpaperOffset() : 0;
final float oldVerticalWallpaperOffset=enableWallpaperEffects ? getVerticalWallpaperOffset() : 0;
final float newHorizontalWallpaperOffset=enableWallpaperEffects ? wallpaperOffsetForCurrentScroll() : 0;
final float newVerticalWallpaperOffset=enableWallpaperEffects ? 0.5f : 0;
animWithInterpolator.addUpdateListener(new LauncherAnimatorUpdateListener(){
public void onAnimationUpdate(float a,float b){
  if (!mUnshrinkAnimationEnabled)   return;
  mTransitionProgress=b;
  if (b == 0f) {
    return;
  }
  invalidate();
  if (enableWallpaperEffects) {
    setHorizontalWallpaperOffset(a * oldHorizontalWallpaperOffset + b * newHorizontalWallpaperOffset);
    setVerticalWallpaperOffset(a * oldVerticalWallpaperOffset + b * newVerticalWallpaperOffset);
  }
  for (int i=0; i < screenCount; i++) {
    final CellLayout cl=(CellLayout)getChildAt(i);
    cl.fastInvalidate();
    cl.setFastTranslationX(a * mOldTranslationXs[i] + b * mNewTranslationXs[i]);
    cl.setFastTranslationY(a * mOldTranslationYs[i] + b * mNewTranslationYs[i]);
    cl.setFastScaleX(a * mOldScaleXs[i] + b * mNewScaleXs[i]);
    cl.setFastScaleY(a * mOldScaleYs[i] + b * mNewScaleYs[i]);
    cl.setFastBackgroundAlpha(a * mOldBackgroundAlphas[i] + b * mNewBackgroundAlphas[i]);
    cl.setBackgroundAlphaMultiplier(a * mOldBackgroundAlphaMultipliers[i] + b * mNewBackgroundAlphaMultipliers[i]);
    cl.setFastAlpha(a * mOldAlphas[i] + b * mNewAlphas[i]);
  }
}
}
);
ValueAnimator rotationAnim=ValueAnimator.ofFloat(0f,1f).setDuration(duration);
rotationAnim.setInterpolator(new DecelerateInterpolator(2.0f));
rotationAnim.addUpdateListener(new LauncherAnimatorUpdateListener(){
public void onAnimationUpdate(float a,float b){
  if (!mUnshrinkAnimationEnabled)   return;
  if (b == 0f) {
    return;
  }
  for (int i=0; i < screenCount; i++) {
    final CellLayout cl=(CellLayout)getChildAt(i);
    cl.setFastRotationY(a * mOldRotationYs[i] + b * mNewRotationYs[i]);
  }
}
}
);
mAnimator.playTogether(animWithInterpolator,rotationAnim);
mAnimator.addListener(mUnshrinkAnimationListener);
mAnimator.start();
}
 else {
if (enableWallpaperEffects) {
setHorizontalWallpaperOffset(wallpaperOffsetForCurrentScroll());
setVerticalWallpaperOffset(0.5f);
updateWallpaperOffsetImmediately();
}
}
}
hideBackgroundGradient(springLoaded ? getResources().getInteger(R.integer.config_appsCustomizeSpringLoadedBgAlpha) / 100f : 0f);
}
