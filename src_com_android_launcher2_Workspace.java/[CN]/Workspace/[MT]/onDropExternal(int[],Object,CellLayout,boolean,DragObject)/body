{
  final Runnable exitSpringLoadedRunnable=new Runnable(){
    @Override public void run(){
      mLauncher.exitSpringLoadedDragModeDelayed(true,false,null);
    }
  }
;
  ItemInfo info=(ItemInfo)dragInfo;
  int spanX=info.spanX;
  int spanY=info.spanY;
  if (mDragInfo != null) {
    spanX=mDragInfo.spanX;
    spanY=mDragInfo.spanY;
  }
  final long container=mLauncher.isHotseatLayout(cellLayout) ? LauncherSettings.Favorites.CONTAINER_HOTSEAT : LauncherSettings.Favorites.CONTAINER_DESKTOP;
  final int screen=indexOfChild(cellLayout);
  if (!mLauncher.isHotseatLayout(cellLayout) && screen != mCurrentPage && mState != State.SPRING_LOADED) {
    snapToPage(screen);
  }
  if (info instanceof PendingAddItemInfo) {
    final PendingAddItemInfo pendingInfo=(PendingAddItemInfo)dragInfo;
    boolean findNearestVacantCell=true;
    if (pendingInfo.itemType == LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT) {
      mTargetCell=findNearestArea((int)touchXY[0],(int)touchXY[1],spanX,spanY,cellLayout,mTargetCell);
      if (willCreateUserFolder((ItemInfo)d.dragInfo,mDragTargetLayout,mTargetCell,true) || willAddToExistingUserFolder((ItemInfo)d.dragInfo,mDragTargetLayout,mTargetCell)) {
        findNearestVacantCell=false;
      }
    }
    final ItemInfo item=(ItemInfo)d.dragInfo;
    int minSpanX=item.spanX;
    int minSpanY=item.spanY;
    if (item.minSpanX > 0 && item.minSpanY > 0) {
      minSpanX=item.minSpanX;
      minSpanY=item.minSpanY;
    }
    if (findNearestVacantCell) {
      int[] resultSpan=new int[2];
      mTargetCell=findNearestVacantArea(touchXY[0],touchXY[1],minSpanX,minSpanY,spanX,spanY,null,cellLayout,mTargetCell,resultSpan);
      item.spanX=resultSpan[0];
      item.spanY=resultSpan[1];
    }
    Runnable onAnimationCompleteRunnable=new Runnable(){
      @Override public void run(){
switch (pendingInfo.itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:
          int span[]=new int[2];
        span[0]=item.spanX;
      span[1]=item.spanY;
    mLauncher.addAppWidgetFromDrop((PendingAddWidgetInfo)pendingInfo,container,screen,mTargetCell,span,null);
  break;
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
mLauncher.processShortcutFromDrop(pendingInfo.componentName,container,screen,mTargetCell,null);
break;
default :
throw new IllegalStateException("Unknown item type: " + pendingInfo.itemType);
}
cellLayout.onDragExit();
}
}
;
View finalView=pendingInfo.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET ? ((PendingAddWidgetInfo)pendingInfo).boundWidget : null;
int animationStyle=ANIMATE_INTO_POSITION_AND_DISAPPEAR;
if (pendingInfo.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET && ((PendingAddWidgetInfo)pendingInfo).info.configure != null) {
animationStyle=ANIMATE_INTO_POSITION_AND_REMAIN;
}
animateWidgetDrop(info,cellLayout,d.dragView,onAnimationCompleteRunnable,animationStyle,finalView,true);
}
 else {
View view=null;
switch (info.itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
if (info.container == NO_ID && info instanceof ApplicationInfo) {
info=new ShortcutInfo((ApplicationInfo)info);
}
view=mLauncher.createShortcut(R.layout.application,cellLayout,(ShortcutInfo)info);
break;
case LauncherSettings.Favorites.ITEM_TYPE_FOLDER:
view=FolderIcon.fromXml(R.layout.folder_icon,mLauncher,cellLayout,(FolderInfo)info,mIconCache);
break;
default :
throw new IllegalStateException("Unknown item type: " + info.itemType);
}
if (touchXY != null) {
mTargetCell=findNearestArea((int)touchXY[0],(int)touchXY[1],spanX,spanY,cellLayout,mTargetCell);
d.postAnimationRunnable=exitSpringLoadedRunnable;
if (createUserFolderIfNecessary(view,container,cellLayout,mTargetCell,true,d.dragView,d.postAnimationRunnable)) {
return;
}
if (addToExistingFolderIfNecessary(view,cellLayout,mTargetCell,d,true)) {
return;
}
}
if (touchXY != null) {
mTargetCell=findNearestVacantArea(touchXY[0],touchXY[1],1,1,null,cellLayout,mTargetCell);
}
 else {
cellLayout.findCellForSpan(mTargetCell,1,1);
}
addInScreen(view,container,screen,mTargetCell[0],mTargetCell[1],info.spanX,info.spanY,insertAtFirst);
cellLayout.onDropChild(view);
CellLayout.LayoutParams lp=(CellLayout.LayoutParams)view.getLayoutParams();
cellLayout.getChildrenLayout().measureChild(view);
LauncherModel.addOrMoveItemInDatabase(mLauncher,info,container,screen,lp.cellX,lp.cellY);
if (d.dragView != null) {
setFinalTransitionTransform(cellLayout);
mLauncher.getDragLayer().animateViewIntoPosition(d.dragView,view,exitSpringLoadedRunnable);
resetTransitionTransform(cellLayout);
}
}
}
