{
  if (mFirstLayout) {
    mSwitchStateAfterFirstLayout=true;
    mStateAfterFirstLayout=shrinkState;
    return;
  }
  setCurrentPage((mNextPage != INVALID_PAGE) ? mNextPage : mCurrentPage);
  CellLayout currentPage=(CellLayout)getChildAt(mCurrentPage);
  if (currentPage == null) {
    Log.w(TAG,"currentPage is NULL! mCurrentPage " + mCurrentPage + " mNextPage "+ mNextPage);
    return;
  }
  if (currentPage.getBackgroundAlphaMultiplier() < 1.0f) {
    currentPage.setBackgroundAlpha(0.0f);
  }
  currentPage.setBackgroundAlphaMultiplier(1.0f);
  mState=shrinkState;
  updateChildrenLayersEnabled();
  mTouchState=TOUCH_STATE_REST;
  mActivePointerId=INVALID_POINTER;
  final Resources res=getResources();
  final int screenWidth=getWidth();
  final int screenHeight=getHeight();
  final float shrinkFactor=res.getInteger(R.integer.config_workspaceShrinkPercent) / 100.0f;
  final int pageWidth=getChildAt(0).getMeasuredWidth();
  final int pageHeight=getChildAt(0).getMeasuredHeight();
  final int scaledPageWidth=(int)(shrinkFactor * pageWidth);
  final int scaledPageHeight=(int)(shrinkFactor * pageHeight);
  final float extraScaledSpacing=res.getDimension(R.dimen.smallScreenExtraSpacing);
  final int screenCount=getChildCount();
  float totalWidth=screenCount * scaledPageWidth + (screenCount - 1) * extraScaledSpacing;
  boolean isPortrait=getMeasuredHeight() > getMeasuredWidth();
  float y=screenHeight - scaledPageHeight - (isPortrait ? getResources().getDimension(R.dimen.allAppsSmallScreenVerticalMarginPortrait) : getResources().getDimension(R.dimen.allAppsSmallScreenVerticalMarginLandscape));
  float finalAlpha=0.0f;
  int duration=res.getInteger(R.integer.config_appsCustomizeWorkspaceShrinkTime);
  float x=mScroller.getFinalX() + screenWidth / 2 - totalWidth / 2;
  x-=(pageWidth - scaledPageWidth) / 2.0f;
  y-=(pageHeight - scaledPageHeight) / 2.0f;
  if (mAnimator != null) {
    mAnimator.cancel();
  }
  mAnimator=new AnimatorSet();
  mUnshrinkAnimationEnabled=false;
  mShrinkAnimationEnabled=true;
  initAnimationArrays();
  for (int i=0; i < screenCount; i++) {
    final CellLayout cl=(CellLayout)getChildAt(i);
    float rotation=(-i + 2) * WORKSPACE_ROTATION;
    float rotationScaleX=(float)(1.0f / Math.cos(Math.PI * rotation / 180.0f));
    float rotationScaleY=getYScaleForScreen(i);
    mOldAlphas[i]=cl.getAlpha();
    mNewAlphas[i]=finalAlpha;
    if (animated && (mOldAlphas[i] != 0f || mNewAlphas[i] != 0f)) {
      cl.buildChildrenLayer();
    }
    if (animated) {
      mOldTranslationXs[i]=cl.getX();
      mOldTranslationYs[i]=cl.getY();
      mOldScaleXs[i]=cl.getScaleX();
      mOldScaleYs[i]=cl.getScaleY();
      mOldBackgroundAlphas[i]=cl.getBackgroundAlpha();
      mOldRotationYs[i]=cl.getRotationY();
      mNewTranslationXs[i]=x;
      mNewTranslationYs[i]=y;
      mNewScaleXs[i]=shrinkFactor * rotationScaleX;
      mNewScaleYs[i]=shrinkFactor * rotationScaleY;
      mNewBackgroundAlphas[i]=finalAlpha;
      mNewRotationYs[i]=rotation;
    }
 else {
      cl.setX((int)x);
      cl.setY((int)y);
      cl.setScaleX(shrinkFactor * rotationScaleX);
      cl.setScaleY(shrinkFactor * rotationScaleY);
      cl.setBackgroundAlpha(finalAlpha);
      cl.setFastAlpha(finalAlpha);
      cl.setRotationY(rotation);
      mShrinkAnimationListener.onAnimationEnd(null);
    }
    x+=scaledPageWidth + extraScaledSpacing;
  }
  float wallpaperOffset=0.5f;
  Display display=mLauncher.getWindowManager().getDefaultDisplay();
  int wallpaperTravelHeight=(int)(display.getHeight() * wallpaperTravelToScreenHeightRatio(display.getWidth(),display.getHeight()));
  float offsetFromCenter=(wallpaperTravelHeight / (float)mWallpaperHeight) / 2f;
  boolean isLandscape=display.getWidth() > display.getHeight();
  final boolean enableWallpaperEffects=isHardwareAccelerated() && LauncherApplication.isScreenLarge();
  if (enableWallpaperEffects) {
switch (shrinkState) {
case SPRING_LOADED:
      wallpaperOffset=0.5f;
    mWallpaperOffset.setVerticalCatchupConstant(isLandscape ? 0.34f : 0.32f);
  break;
case SMALL:
wallpaperOffset=0.5f - offsetFromCenter;
mWallpaperOffset.setVerticalCatchupConstant(isLandscape ? 0.34f : 0.32f);
break;
}
}
setLayoutScale(1.0f);
if (animated) {
if (enableWallpaperEffects) {
mWallpaperOffset.setHorizontalCatchupConstant(0.46f);
mWallpaperOffset.setOverrideHorizontalCatchupConstant(true);
}
mSyncWallpaperOffsetWithScroll=false;
ValueAnimator animWithInterpolator=ValueAnimator.ofFloat(0f,1f).setDuration(duration);
animWithInterpolator.setInterpolator(mZoomOutInterpolator);
final float oldHorizontalWallpaperOffset=getHorizontalWallpaperOffset();
final float oldVerticalWallpaperOffset=getVerticalWallpaperOffset();
final float newHorizontalWallpaperOffset=0.5f;
final float newVerticalWallpaperOffset=wallpaperOffset;
animWithInterpolator.addUpdateListener(new LauncherAnimatorUpdateListener(){
public void onAnimationUpdate(float a,float b){
if (!mShrinkAnimationEnabled) return;
mTransitionProgress=b;
if (b == 0f) {
return;
}
invalidate();
if (enableWallpaperEffects) {
setHorizontalWallpaperOffset(a * oldHorizontalWallpaperOffset + b * newHorizontalWallpaperOffset);
setVerticalWallpaperOffset(a * oldVerticalWallpaperOffset + b * newVerticalWallpaperOffset);
}
for (int i=0; i < screenCount; i++) {
final CellLayout cl=(CellLayout)getChildAt(i);
cl.fastInvalidate();
cl.setFastX(a * mOldTranslationXs[i] + b * mNewTranslationXs[i]);
cl.setFastY(a * mOldTranslationYs[i] + b * mNewTranslationYs[i]);
cl.setFastScaleX(a * mOldScaleXs[i] + b * mNewScaleXs[i]);
cl.setFastScaleY(a * mOldScaleYs[i] + b * mNewScaleYs[i]);
cl.setFastBackgroundAlpha(a * mOldBackgroundAlphas[i] + b * mNewBackgroundAlphas[i]);
cl.setFastAlpha(a * mOldAlphas[i] + b * mNewAlphas[i]);
cl.setFastRotationY(a * mOldRotationYs[i] + b * mNewRotationYs[i]);
}
}
}
);
mAnimator.playTogether(animWithInterpolator);
mAnimator.addListener(mShrinkAnimationListener);
mAnimator.start();
}
 else if (enableWallpaperEffects) {
setVerticalWallpaperOffset(wallpaperOffset);
setHorizontalWallpaperOffset(0.5f);
updateWallpaperOffsetImmediately();
}
setChildrenDrawnWithCacheEnabled(true);
showBackgroundGradientForAllApps(animated);
}
