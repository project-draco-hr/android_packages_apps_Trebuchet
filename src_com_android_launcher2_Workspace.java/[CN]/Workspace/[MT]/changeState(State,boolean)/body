{
  if (mFirstLayout) {
    mSwitchStateAfterFirstLayout=false;
    mStateAfterFirstLayout=state;
    return;
  }
  if (mAnimator != null) {
    mAnimator.cancel();
  }
  setCurrentPage((mNextPage != INVALID_PAGE) ? mNextPage : mCurrentPage);
  float finalScaleFactor=1.0f;
  float finalBackgroundAlpha=0.0f;
  boolean normalState=false;
  State oldState=mState;
  mState=state;
  boolean zoomIn=true;
  if (state != State.NORMAL) {
    finalScaleFactor=mSpringLoadedShrinkFactor - (state == State.SMALL ? 0.1f : 0);
    finalBackgroundAlpha=1.0f;
    if (oldState == State.NORMAL && state == State.SMALL) {
      zoomIn=false;
      if (animated) {
        mEnableSyncWallpaper=true;
        mSyncWallpaperOffsetWithScroll=false;
        hideScrollingIndicator(true);
      }
      setLayoutScale(finalScaleFactor);
      updateChildrenLayersEnabled();
    }
 else {
      setLayoutScale(finalScaleFactor);
    }
  }
 else {
    setLayoutScale(1.0f);
    normalState=true;
  }
  float translationX=0;
  float translationY=0;
  mAnimator=new AnimatorSet();
  final int screenCount=getChildCount();
  initAnimationArrays();
  final int duration=zoomIn ? getResources().getInteger(R.integer.config_workspaceUnshrinkTime) : getResources().getInteger(R.integer.config_appsCustomizeWorkspaceShrinkTime);
  for (int i=0; i < screenCount; i++) {
    final CellLayout cl=(CellLayout)getChildAt(i);
    float finalAlphaValue=0f;
    float rotation=0f;
    if (mFadeInAdjacentScreens && normalState) {
      finalAlphaValue=(i == mCurrentPage) ? 1f : 0f;
    }
 else {
      finalAlphaValue=1f;
    }
    if (LauncherApplication.isScreenLarge()) {
      if (i < mCurrentPage) {
        rotation=WORKSPACE_ROTATION;
      }
 else       if (i > mCurrentPage) {
        rotation=-WORKSPACE_ROTATION;
      }
    }
    float finalAlphaMultiplierValue=1f;
    if (LauncherApplication.isScreenLarge()) {
      translationX=getOffsetXForRotation(rotation,cl.getWidth(),cl.getHeight());
    }
    mOldAlphas[i]=cl.getAlpha();
    mNewAlphas[i]=finalAlphaValue;
    if (animated) {
      mOldTranslationXs[i]=cl.getTranslationX();
      mOldTranslationYs[i]=cl.getTranslationY();
      mOldScaleXs[i]=cl.getScaleX();
      mOldScaleYs[i]=cl.getScaleY();
      mOldBackgroundAlphas[i]=cl.getBackgroundAlpha();
      mOldBackgroundAlphaMultipliers[i]=cl.getBackgroundAlphaMultiplier();
      mOldRotationYs[i]=cl.getRotationY();
      mNewTranslationXs[i]=translationX;
      mNewTranslationYs[i]=translationY;
      mNewScaleXs[i]=finalScaleFactor;
      mNewScaleYs[i]=finalScaleFactor;
      mNewBackgroundAlphas[i]=finalBackgroundAlpha;
      mNewBackgroundAlphaMultipliers[i]=finalAlphaMultiplierValue;
      mNewRotationYs[i]=rotation;
    }
 else {
      cl.setTranslationX(translationX);
      cl.setTranslationY(translationY);
      cl.setScaleX(finalScaleFactor);
      cl.setScaleY(finalScaleFactor);
      cl.setBackgroundAlpha(0.0f);
      cl.setBackgroundAlphaMultiplier(finalAlphaMultiplierValue);
      cl.setAlpha(finalAlphaValue);
      cl.setRotationY(rotation);
      mChangeStateAnimationListener.onAnimationEnd(null);
    }
  }
  if (animated) {
    ValueAnimator animWithInterpolator=ValueAnimator.ofFloat(0f,1f).setDuration(duration);
    if (zoomIn) {
      animWithInterpolator.setInterpolator(mZoomInInterpolator);
    }
    animWithInterpolator.addUpdateListener(new LauncherAnimatorUpdateListener(){
      public void onAnimationUpdate(      float a,      float b){
        mTransitionProgress=b;
        if (b == 0f) {
          return;
        }
        invalidate();
        for (int i=0; i < screenCount; i++) {
          final CellLayout cl=(CellLayout)getChildAt(i);
          cl.fastInvalidate();
          cl.setFastTranslationX(a * mOldTranslationXs[i] + b * mNewTranslationXs[i]);
          cl.setFastTranslationY(a * mOldTranslationYs[i] + b * mNewTranslationYs[i]);
          cl.setFastScaleX(a * mOldScaleXs[i] + b * mNewScaleXs[i]);
          cl.setFastScaleY(a * mOldScaleYs[i] + b * mNewScaleYs[i]);
          cl.setFastBackgroundAlpha(a * mOldBackgroundAlphas[i] + b * mNewBackgroundAlphas[i]);
          cl.setBackgroundAlphaMultiplier(a * mOldBackgroundAlphaMultipliers[i] + b * mNewBackgroundAlphaMultipliers[i]);
          cl.setFastAlpha(a * mOldAlphas[i] + b * mNewAlphas[i]);
        }
      }
    }
);
    ValueAnimator rotationAnim=ValueAnimator.ofFloat(0f,1f).setDuration(duration);
    rotationAnim.setInterpolator(new DecelerateInterpolator(2.0f));
    rotationAnim.addUpdateListener(new LauncherAnimatorUpdateListener(){
      public void onAnimationUpdate(      float a,      float b){
        if (b == 0f) {
          return;
        }
        for (int i=0; i < screenCount; i++) {
          final CellLayout cl=(CellLayout)getChildAt(i);
          cl.setFastRotationY(a * mOldRotationYs[i] + b * mNewRotationYs[i]);
        }
      }
    }
);
    mAnimator.playTogether(animWithInterpolator,rotationAnim);
    mAnimator.addListener(mChangeStateAnimationListener);
    mAnimator.start();
  }
  if (state == State.SPRING_LOADED) {
    animateBackgroundGradient(getResources().getInteger(R.integer.config_appsCustomizeSpringLoadedBgAlpha) / 100f,false);
  }
 else {
    animateBackgroundGradient(0f,true);
  }
}
