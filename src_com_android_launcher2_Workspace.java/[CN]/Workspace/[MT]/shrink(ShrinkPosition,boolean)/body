{
  mIsSmall=true;
  mShrunkenState=shrinkPosition;
  setCurrentPage(mCurrentPage);
  updateWhichPagesAcceptDrops(mShrunkenState);
  mTouchState=TOUCH_STATE_REST;
  mActivePointerId=INVALID_POINTER;
  final Resources res=getResources();
  final int screenWidth=getWidth();
  final int screenHeight=getHeight();
  final int pageWidth=getChildAt(0).getMeasuredWidth();
  final int pageHeight=getChildAt(0).getMeasuredHeight();
  final int scaledPageWidth=(int)(SHRINK_FACTOR * pageWidth);
  final int scaledPageHeight=(int)(SHRINK_FACTOR * pageHeight);
  final float extraScaledSpacing=res.getDimension(R.dimen.smallScreenExtraSpacing);
  final int screenCount=getChildCount();
  float totalWidth=screenCount * scaledPageWidth + (screenCount - 1) * extraScaledSpacing;
  float newY=getResources().getDimension(R.dimen.smallScreenVerticalMargin);
  float finalAlpha=1.0f;
  float extraShrinkFactor=1.0f;
  if (shrinkPosition == ShrinkPosition.SHRINK_TO_BOTTOM_VISIBLE) {
    newY=screenHeight - newY - scaledPageHeight;
  }
 else   if (shrinkPosition == ShrinkPosition.SHRINK_TO_BOTTOM_HIDDEN) {
    newY=screenHeight - newY - scaledPageHeight;
    finalAlpha=0.0f;
    extraShrinkFactor=0.1f;
  }
 else   if (shrinkPosition == ShrinkPosition.SHRINK_TO_MIDDLE) {
    newY=screenHeight / 2 - scaledPageHeight / 2;
    finalAlpha=1.0f;
  }
 else   if (shrinkPosition == ShrinkPosition.SHRINK_TO_TOP) {
    newY=screenHeight / 10;
  }
  float newX=mScroller.getFinalX() + screenWidth / 2 - totalWidth / 2;
  newX-=(pageWidth - scaledPageWidth) / 2.0f;
  newY-=(pageHeight - scaledPageHeight) / 2.0f;
  for (int i=0; i < screenCount; i++) {
    CellLayout cl=(CellLayout)getChildAt(i);
    float rotation=(-i + 2) * WORKSPACE_ROTATION;
    float rotationScaleX=(float)(1.0f / Math.cos(Math.PI * rotation / 180.0f));
    float rotationScaleY=getYScaleForScreen(i);
    if (animated) {
      final int duration=res.getInteger(R.integer.config_workspaceShrinkTime);
      new ObjectAnimator<Float>(duration,cl,new PropertyValuesHolder<Float>("x",newX),new PropertyValuesHolder<Float>("y",newY),new PropertyValuesHolder<Float>("scaleX",SHRINK_FACTOR * rotationScaleX * extraShrinkFactor),new PropertyValuesHolder<Float>("scaleY",SHRINK_FACTOR * rotationScaleY * extraShrinkFactor),new PropertyValuesHolder<Float>("backgroundAlpha",finalAlpha),new PropertyValuesHolder<Float>("alpha",finalAlpha),new PropertyValuesHolder<Float>("rotationY",rotation)).start();
    }
 else {
      cl.setX((int)newX);
      cl.setY((int)newY);
      cl.setScaleX(SHRINK_FACTOR * rotationScaleX);
      cl.setScaleY(SHRINK_FACTOR * rotationScaleY);
      cl.setBackgroundAlpha(1.0f);
      cl.setAlpha(finalAlpha);
      cl.setRotationY(rotation);
    }
    newX+=scaledPageWidth + extraScaledSpacing;
  }
  setChildrenDrawnWithCacheEnabled(true);
}
