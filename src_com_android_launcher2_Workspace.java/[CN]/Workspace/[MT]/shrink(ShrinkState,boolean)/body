{
  if (mIsSmall && mShrinkState == ShrinkState.BOTTOM_VISIBLE) {
    shrinkState=ShrinkState.BOTTOM_VISIBLE;
  }
  if (mFirstLayout) {
    mWaitingToShrink=true;
    mWaitingToShrinkState=shrinkState;
    return;
  }
  setCurrentPage((mNextPage != INVALID_PAGE) ? mNextPage : mCurrentPage);
  if (!mIsDragInProcess) {
    updateWhichPagesAcceptDrops(shrinkState);
  }
  CellLayout currentPage=(CellLayout)getChildAt(mCurrentPage);
  if (currentPage == null) {
    Log.w(TAG,"currentPage is NULL! mCurrentPage " + mCurrentPage + " mNextPage "+ mNextPage);
    return;
  }
  if (currentPage.getBackgroundAlphaMultiplier() < 1.0f) {
    currentPage.setBackgroundAlpha(0.0f);
  }
  currentPage.setBackgroundAlphaMultiplier(1.0f);
  mIsSmall=true;
  mShrinkState=shrinkState;
  mTouchState=TOUCH_STATE_REST;
  mActivePointerId=INVALID_POINTER;
  final Resources res=getResources();
  final int screenWidth=getWidth();
  final int screenHeight=getHeight();
  final int pageWidth=getChildAt(0).getMeasuredWidth();
  final int pageHeight=getChildAt(0).getMeasuredHeight();
  final int scaledPageWidth=(int)(SHRINK_FACTOR * pageWidth);
  final int scaledPageHeight=(int)(SHRINK_FACTOR * pageHeight);
  final float extraScaledSpacing=res.getDimension(R.dimen.smallScreenExtraSpacing);
  final int screenCount=getChildCount();
  float totalWidth=screenCount * scaledPageWidth + (screenCount - 1) * extraScaledSpacing;
  boolean isPortrait=getMeasuredHeight() > getMeasuredWidth();
  float y=(isPortrait ? getResources().getDimension(R.dimen.allAppsSmallScreenVerticalMarginPortrait) : getResources().getDimension(R.dimen.allAppsSmallScreenVerticalMarginLandscape));
  float finalAlpha=1.0f;
  float extraShrinkFactor=1.0f;
  if (shrinkState == ShrinkState.BOTTOM_VISIBLE) {
    y=screenHeight - y - scaledPageHeight;
  }
 else   if (shrinkState == ShrinkState.BOTTOM_HIDDEN) {
    y=screenHeight - y - scaledPageHeight;
    finalAlpha=0.0f;
  }
 else   if (shrinkState == ShrinkState.MIDDLE) {
    y=screenHeight / 2 - scaledPageHeight / 2;
    finalAlpha=1.0f;
  }
 else   if (shrinkState == ShrinkState.TOP) {
    y=(screenHeight - getCustomizeDrawerHeight() - scaledPageHeight) / 2;
  }
  int duration;
  if (shrinkState == ShrinkState.BOTTOM_HIDDEN || shrinkState == ShrinkState.BOTTOM_VISIBLE) {
    duration=res.getInteger(R.integer.config_allAppsWorkspaceShrinkTime);
  }
 else {
    duration=res.getInteger(R.integer.config_customizeWorkspaceShrinkTime);
  }
  float x=mScroller.getFinalX() + screenWidth / 2 - totalWidth / 2;
  x-=(pageWidth - scaledPageWidth) / 2.0f;
  y-=(pageHeight - scaledPageHeight) / 2.0f;
  if (mAnimator != null) {
    mAnimator.cancel();
  }
  mAnimator=new AnimatorSet();
  final float[] oldXs=new float[getChildCount()];
  final float[] oldYs=new float[getChildCount()];
  final float[] oldScaleXs=new float[getChildCount()];
  final float[] oldScaleYs=new float[getChildCount()];
  final float[] oldBackgroundAlphas=new float[getChildCount()];
  final float[] oldAlphas=new float[getChildCount()];
  final float[] oldRotationYs=new float[getChildCount()];
  final float[] newXs=new float[getChildCount()];
  final float[] newYs=new float[getChildCount()];
  final float[] newScaleXs=new float[getChildCount()];
  final float[] newScaleYs=new float[getChildCount()];
  final float[] newBackgroundAlphas=new float[getChildCount()];
  final float[] newAlphas=new float[getChildCount()];
  final float[] newRotationYs=new float[getChildCount()];
  for (int i=0; i < screenCount; i++) {
    final CellLayout cl=(CellLayout)getChildAt(i);
    float rotation=(-i + 2) * WORKSPACE_ROTATION;
    float rotationScaleX=(float)(1.0f / Math.cos(Math.PI * rotation / 180.0f));
    float rotationScaleY=getYScaleForScreen(i);
    oldAlphas[i]=cl.getAlpha();
    newAlphas[i]=finalAlpha;
    if (animated && (oldAlphas[i] != 0f || newAlphas[i] != 0f)) {
      cl.buildChildrenLayer();
    }
    if (animated) {
      oldXs[i]=cl.getX();
      oldYs[i]=cl.getY();
      oldScaleXs[i]=cl.getScaleX();
      oldScaleYs[i]=cl.getScaleY();
      oldBackgroundAlphas[i]=cl.getBackgroundAlpha();
      oldRotationYs[i]=cl.getRotationY();
      newXs[i]=x;
      newYs[i]=y;
      newScaleXs[i]=SHRINK_FACTOR * rotationScaleX * extraShrinkFactor;
      newScaleYs[i]=SHRINK_FACTOR * rotationScaleY * extraShrinkFactor;
      newBackgroundAlphas[i]=finalAlpha;
      newRotationYs[i]=rotation;
    }
 else {
      cl.setX((int)x);
      cl.setY((int)y);
      cl.setScaleX(SHRINK_FACTOR * rotationScaleX * extraShrinkFactor);
      cl.setScaleY(SHRINK_FACTOR * rotationScaleY * extraShrinkFactor);
      cl.setBackgroundAlpha(finalAlpha);
      cl.setAlpha(finalAlpha);
      cl.setRotationY(rotation);
      mShrinkAnimationListener.onAnimationEnd(null);
    }
    x+=scaledPageWidth + extraScaledSpacing;
  }
  float wallpaperOffset=0.5f;
  Display display=mLauncher.getWindowManager().getDefaultDisplay();
  int wallpaperTravelHeight=(int)(display.getHeight() * wallpaperTravelToScreenHeightRatio(display.getWidth(),display.getHeight()));
  float offsetFromCenter=(wallpaperTravelHeight / (float)mWallpaperHeight) / 2f;
  boolean isLandscape=display.getWidth() > display.getHeight();
switch (shrinkState) {
case TOP:
    wallpaperOffset=0.5f + offsetFromCenter;
  mWallpaperOffset.setVerticalCatchupConstant(isLandscape ? 0.46f : 0.44f);
break;
case MIDDLE:
case SPRING_LOADED:
wallpaperOffset=0.5f;
mWallpaperOffset.setVerticalCatchupConstant(isLandscape ? 0.34f : 0.32f);
break;
case BOTTOM_HIDDEN:
case BOTTOM_VISIBLE:
wallpaperOffset=0.5f - offsetFromCenter;
mWallpaperOffset.setVerticalCatchupConstant(isLandscape ? 0.34f : 0.32f);
break;
}
setLayoutScale(1.0f);
if (animated) {
mWallpaperOffset.setHorizontalCatchupConstant(0.46f);
mWallpaperOffset.setOverrideHorizontalCatchupConstant(true);
mSyncWallpaperOffsetWithScroll=false;
ValueAnimator animWithInterpolator=ValueAnimator.ofFloat(0f,1f).setDuration(duration);
animWithInterpolator.setInterpolator(mZoomOutInterpolator);
final float oldHorizontalWallpaperOffset=getHorizontalWallpaperOffset();
final float oldVerticalWallpaperOffset=getVerticalWallpaperOffset();
final float newHorizontalWallpaperOffset=0.5f;
final float newVerticalWallpaperOffset=wallpaperOffset;
animWithInterpolator.addUpdateListener(new AnimatorUpdateListener(){
public void onAnimationUpdate(ValueAnimator animation){
final float b=(Float)animation.getAnimatedValue();
final float a=1f - b;
if (b == 0f) {
return;
}
fastInvalidate();
setHorizontalWallpaperOffset(a * oldHorizontalWallpaperOffset + b * newHorizontalWallpaperOffset);
setVerticalWallpaperOffset(a * oldVerticalWallpaperOffset + b * newVerticalWallpaperOffset);
for (int i=0; i < screenCount; i++) {
final CellLayout cl=(CellLayout)getChildAt(i);
cl.fastInvalidate();
cl.setFastX(a * oldXs[i] + b * newXs[i]);
cl.setFastY(a * oldYs[i] + b * newYs[i]);
cl.setFastScaleX(a * oldScaleXs[i] + b * newScaleXs[i]);
cl.setFastScaleY(a * oldScaleYs[i] + b * newScaleYs[i]);
cl.setFastBackgroundAlpha(a * oldBackgroundAlphas[i] + b * newBackgroundAlphas[i]);
cl.setFastAlpha(a * oldAlphas[i] + b * newAlphas[i]);
cl.setFastRotationY(a * oldRotationYs[i] + b * newRotationYs[i]);
}
}
}
);
mAnimator.playTogether(animWithInterpolator);
mAnimator.addListener(mShrinkAnimationListener);
mAnimator.start();
}
 else {
setVerticalWallpaperOffset(wallpaperOffset);
setHorizontalWallpaperOffset(0.5f);
updateWallpaperOffsetImmediately();
}
setChildrenDrawnWithCacheEnabled(true);
if (shrinkState == ShrinkState.TOP) {
showBackgroundGradientForCustomizeTray();
}
 else {
showBackgroundGradientForAllApps();
}
}
