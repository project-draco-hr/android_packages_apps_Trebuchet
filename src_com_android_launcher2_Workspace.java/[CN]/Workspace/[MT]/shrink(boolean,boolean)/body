{
  mIsSmall=true;
  final Resources res=getResources();
  final int screenWidth=getWidth();
  final int screenHeight=getHeight();
  final int scaledScreenWidth=(int)(SHRINK_FACTOR * screenWidth);
  final int scaledScreenHeight=(int)(SHRINK_FACTOR * screenHeight);
  final float scaledSpacing=res.getDimension(R.dimen.smallScreenSpacing);
  final int screenCount=getChildCount();
  float totalWidth=screenCount * scaledScreenWidth + (screenCount - 1) * scaledSpacing;
  float newY=getResources().getDimension(R.dimen.smallScreenVerticalMargin);
  if (!shrinkToTop) {
    newY=screenHeight - newY - scaledScreenHeight;
  }
  float newX=(mCurrentScreen + 1) * screenWidth - screenWidth / 2 - totalWidth / 2;
  Sequencer s=new Sequencer();
  for (int i=0; i < screenCount; i++) {
    CellLayout cl=(CellLayout)getChildAt(i);
    cl.setPivotX(0.0f);
    cl.setPivotY(0.0f);
    if (animated) {
      final int duration=res.getInteger(R.integer.config_workspaceShrinkTime);
      s.playTogether(new PropertyAnimator(duration,cl,"x",newX),new PropertyAnimator(duration,cl,"y",newY),new PropertyAnimator(duration,cl,"scaleX",SHRINK_FACTOR),new PropertyAnimator(duration,cl,"scaleY",SHRINK_FACTOR),new PropertyAnimator(duration,cl,"dimmedBitmapAlpha",1.0f));
    }
 else {
      cl.setX((int)newX);
      cl.setY((int)newY);
      cl.setScaleX(SHRINK_FACTOR);
      cl.setScaleY(SHRINK_FACTOR);
      cl.setDimmedBitmapAlpha(1.0f);
    }
    newX+=scaledScreenWidth + scaledSpacing;
    cl.setOnInterceptTouchListener(this);
  }
  setChildrenDrawnWithCacheEnabled(true);
  if (animated)   s.start();
}
