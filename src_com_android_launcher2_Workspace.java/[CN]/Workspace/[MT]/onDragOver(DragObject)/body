{
  if (mInScrollArea)   return;
  if (mIsSwitchingState)   return;
  Rect r=new Rect();
  CellLayout layout=null;
  ItemInfo item=(ItemInfo)d.dragInfo;
  if (item.spanX < 0 || item.spanY < 0)   throw new RuntimeException("Improper spans found");
  mDragViewVisualCenter=getDragViewVisualCenter(d.x,d.y,d.xOffset,d.yOffset,d.dragView,mDragViewVisualCenter);
  if (isSmall()) {
    if (mLauncher.getHotseat() != null && !isExternalDragWidget(d)) {
      mLauncher.getHotseat().getHitRect(r);
      if (r.contains(d.x,d.y)) {
        layout=mLauncher.getHotseat().getLayout();
      }
    }
    if (layout == null) {
      layout=findMatchingPageForDragOver(d.dragView,d.x,d.y,true);
    }
    if (layout != mDragTargetLayout) {
      cleanupFolderCreation(d);
      if (mDragTargetLayout != null) {
        mDragTargetLayout.setIsDragOverlapping(false);
        mDragTargetLayout.onDragExit();
      }
      mDragTargetLayout=layout;
      if (mDragTargetLayout != null) {
        mDragTargetLayout.setIsDragOverlapping(true);
        mDragTargetLayout.onDragEnter();
      }
 else {
        mLastDragOverView=null;
      }
      boolean isInSpringLoadedMode=(mState == State.SPRING_LOADED);
      if (isInSpringLoadedMode) {
        if (mLauncher.isHotseatLayout(layout)) {
          mSpringLoadedDragController.cancel();
        }
 else {
          mSpringLoadedDragController.setAlarm(mDragTargetLayout);
        }
      }
    }
  }
 else {
    if (mLauncher.getHotseat() != null && !isDragWidget(d)) {
      mLauncher.getHotseat().getHitRect(r);
      if (r.contains(d.x,d.y)) {
        layout=mLauncher.getHotseat().getLayout();
      }
    }
    if (layout == null) {
      layout=getCurrentDropLayout();
    }
    if (layout != mDragTargetLayout) {
      if (mDragTargetLayout != null) {
        mDragTargetLayout.setIsDragOverlapping(false);
        mDragTargetLayout.onDragExit();
      }
      mDragTargetLayout=layout;
      mDragTargetLayout.setIsDragOverlapping(true);
      mDragTargetLayout.onDragEnter();
    }
  }
  if (mDragTargetLayout != null) {
    final View child=(mDragInfo == null) ? null : mDragInfo.cell;
    if (mLauncher.isHotseatLayout(mDragTargetLayout)) {
      mapPointFromSelfToSibling(mLauncher.getHotseat(),mDragViewVisualCenter);
    }
 else {
      mapPointFromSelfToChild(mDragTargetLayout,mDragViewVisualCenter,null);
    }
    ItemInfo info=(ItemInfo)d.dragInfo;
    mTargetCell=findNearestArea((int)mDragViewVisualCenter[0],(int)mDragViewVisualCenter[1],1,1,mDragTargetLayout,mTargetCell);
    final View dragOverView=mDragTargetLayout.getChildAt(mTargetCell[0],mTargetCell[1]);
    boolean userFolderPending=willCreateUserFolder(info,mDragTargetLayout,mTargetCell,false);
    boolean isOverFolder=dragOverView instanceof FolderIcon;
    if (dragOverView != mLastDragOverView) {
      cancelFolderCreation();
      if (mLastDragOverView != null && mLastDragOverView instanceof FolderIcon) {
        ((FolderIcon)mLastDragOverView).onDragExit(d.dragInfo);
      }
    }
    if (userFolderPending && dragOverView != mLastDragOverView) {
      mFolderCreationAlarm.setOnAlarmListener(new FolderCreationAlarmListener(mDragTargetLayout,mTargetCell[0],mTargetCell[1]));
      mFolderCreationAlarm.setAlarm(FOLDER_CREATION_TIMEOUT);
    }
    if (dragOverView != mLastDragOverView && isOverFolder) {
      ((FolderIcon)dragOverView).onDragEnter(d.dragInfo);
      if (mDragTargetLayout != null) {
        mDragTargetLayout.clearDragOutlines();
      }
    }
    mLastDragOverView=dragOverView;
    if (!mCreateUserFolderOnDrop && !isOverFolder) {
      mDragTargetLayout.visualizeDropLocation(child,mDragOutline,(int)mDragViewVisualCenter[0],(int)mDragViewVisualCenter[1],item.spanX,item.spanY,d.dragView.getDragVisualizeOffset(),d.dragView.getDragRegion());
    }
  }
}
