{
  if (mInScrollArea || mIsSwitchingState || mState == State.SMALL)   return;
  Rect r=new Rect();
  CellLayout layout=null;
  ItemInfo item=(ItemInfo)d.dragInfo;
  if (item.spanX < 0 || item.spanY < 0)   throw new RuntimeException("Improper spans found");
  mDragViewVisualCenter=getDragViewVisualCenter(d.x,d.y,d.xOffset,d.yOffset,d.dragView,mDragViewVisualCenter);
  final View child=(mDragInfo == null) ? null : mDragInfo.cell;
  if (isSmall()) {
    if (mLauncher.getHotseat() != null && !isExternalDragWidget(d)) {
      mLauncher.getHotseat().getHitRect(r);
      if (r.contains(d.x,d.y)) {
        layout=mLauncher.getHotseat().getLayout();
      }
    }
    if (layout == null) {
      layout=findMatchingPageForDragOver(d.dragView,d.x,d.y,false);
    }
    if (layout != mDragTargetLayout) {
      cleanupFolderCreation(d);
      if (mDragTargetLayout != null) {
        mDragTargetLayout.setIsDragOverlapping(false);
        mDragTargetLayout.onDragExit();
      }
      mDragTargetLayout=layout;
      if (mDragTargetLayout != null) {
        mDragTargetLayout.setIsDragOverlapping(true);
        mDragTargetLayout.onDragEnter();
      }
 else {
        mLastDragOverView=null;
        mDragMode=DRAG_MODE_NONE;
      }
      boolean isInSpringLoadedMode=(mState == State.SPRING_LOADED);
      if (isInSpringLoadedMode) {
        if (mLauncher.isHotseatLayout(layout)) {
          mSpringLoadedDragController.cancel();
        }
 else {
          mSpringLoadedDragController.setAlarm(mDragTargetLayout);
        }
      }
    }
  }
 else {
    if (mLauncher.getHotseat() != null && !isDragWidget(d)) {
      mLauncher.getHotseat().getHitRect(r);
      if (r.contains(d.x,d.y)) {
        layout=mLauncher.getHotseat().getLayout();
      }
    }
    if (layout == null) {
      layout=getCurrentDropLayout();
    }
    if (layout != mDragTargetLayout) {
      if (mDragTargetLayout != null) {
        mDragTargetLayout.setIsDragOverlapping(false);
        mDragTargetLayout.onDragExit();
      }
      mDragTargetLayout=layout;
      mDragTargetLayout.setIsDragOverlapping(true);
      mDragTargetLayout.onDragEnter();
    }
  }
  if (mDragTargetLayout != null) {
    if (mLauncher.isHotseatLayout(mDragTargetLayout)) {
      mapPointFromSelfToSibling(mLauncher.getHotseat(),mDragViewVisualCenter);
    }
 else {
      mapPointFromSelfToChild(mDragTargetLayout,mDragViewVisualCenter,null);
    }
    ItemInfo info=(ItemInfo)d.dragInfo;
    mTargetCell=findNearestArea((int)mDragViewVisualCenter[0],(int)mDragViewVisualCenter[1],1,1,mDragTargetLayout,mTargetCell);
    float targetCellDistance=mDragTargetLayout.getDistanceFromCell(mDragViewVisualCenter[0],mDragViewVisualCenter[1],mTargetCell);
    final View dragOverView=mDragTargetLayout.getChildAt(mTargetCell[0],mTargetCell[1]);
    final View lastDragOverView=mLastDragOverView;
    if (mLastDragOverView != dragOverView) {
      mDragMode=DRAG_MODE_NONE;
      mLastDragOverView=dragOverView;
      if (mReorderAlarm != null) {
        mReorderAlarm.cancelAlarm();
      }
    }
    boolean folder=willCreateOrAddToFolder(info,mDragTargetLayout,mTargetCell,targetCellDistance,dragOverView,lastDragOverView);
    int minSpanX=item.spanX;
    int minSpanY=item.spanY;
    if (item.minSpanX > 0 && item.minSpanY > 0) {
      minSpanX=item.minSpanX;
      minSpanY=item.minSpanY;
    }
    int[] reorderPosition=new int[2];
    reorderPosition=findNearestArea((int)mDragViewVisualCenter[0],(int)mDragViewVisualCenter[1],item.spanX,item.spanY,mDragTargetLayout,reorderPosition);
    if (!mDragTargetLayout.isNearestDropLocationOccupied((int)mDragViewVisualCenter[0],(int)mDragViewVisualCenter[1],item.spanX,item.spanY,child,mTargetCell)) {
      mDragTargetLayout.revertTempState();
      mDragMode=DRAG_MODE_NONE;
      mLastDragOverView=dragOverView;
      if (mReorderAlarm != null) {
        mReorderAlarm.cancelAlarm();
      }
      mLastReorderX=-1;
      mLastReorderY=-1;
      mDragTargetLayout.visualizeDropLocation(child,mDragOutline,(int)mDragViewVisualCenter[0],(int)mDragViewVisualCenter[1],mTargetCell[0],mTargetCell[1],item.spanX,item.spanY,false,d.dragView.getDragVisualizeOffset(),d.dragView.getDragRegion());
    }
 else     if (!folder && !mReorderAlarm.alarmPending() && (mLastReorderX != reorderPosition[0] || mLastReorderY != reorderPosition[1])) {
      cancelFolderCreation();
      ReorderAlarmListener listener=new ReorderAlarmListener(mDragViewVisualCenter,minSpanX,minSpanY,item.spanX,item.spanY,d.dragView,child);
      mReorderAlarm.setOnAlarmListener(listener);
      mReorderAlarm.setAlarm(REORDER_TIMEOUT);
    }
 else     if (folder) {
      if (mReorderAlarm != null) {
        mReorderAlarm.cancelAlarm();
      }
      mDragTargetLayout.revertTempState();
      mLastReorderX=-1;
      mLastReorderY=-1;
    }
  }
}
