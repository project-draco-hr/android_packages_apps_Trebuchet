{
  boolean largeOrSpringLoaded=!mIsSmall || mWasSpringLoadedOnDragExit;
  int originX=largeOrSpringLoaded ? x - xOffset : x - xOffset + dragView.getWidth() / 2;
  int originY=largeOrSpringLoaded ? y - yOffset : y - yOffset + dragView.getHeight() / 2;
  if (mIsSmall || mIsInUnshrinkAnimation) {
    mTempOriginXY[0]=originX;
    mTempOriginXY[1]=originY;
    mapPointFromSelfToChild(mDragTargetLayout,mTempOriginXY);
    originX=(int)mTempOriginXY[0];
    originY=(int)mTempOriginXY[1];
    if (!largeOrSpringLoaded) {
      originX-=mDragTargetLayout.getCellWidth() / 2;
      originY-=mDragTargetLayout.getCellHeight() / 2;
    }
  }
  if (!mLauncher.isAllAppsVisible()) {
    int dragTargetIndex=indexOfChild(mDragTargetLayout);
    if (mCurrentPage != dragTargetIndex && (mIsSmall || mIsInUnshrinkAnimation)) {
      scrollToNewPageWithoutMovingPages(dragTargetIndex);
    }
  }
  if (source != this) {
    final int[] touchXY=new int[]{originX,originY};
    if ((mIsSmall || mIsInUnshrinkAnimation) && !mLauncher.isAllAppsVisible()) {
      ((ItemInfo)dragInfo).dropPos=touchXY;
      return;
    }
    onDropExternal(touchXY,dragInfo,mDragTargetLayout,false,dragView,originX,originY);
  }
 else   if (mDragInfo != null) {
    final View cell=mDragInfo.cell;
    CellLayout dropTargetLayout=mDragTargetLayout;
    if (dropTargetLayout == null && mInScrollArea) {
      if (mPendingScrollDirection == DragController.SCROLL_LEFT) {
        dropTargetLayout=(CellLayout)getChildAt(mCurrentPage - 1);
      }
 else       if (mPendingScrollDirection == DragController.SCROLL_RIGHT) {
        dropTargetLayout=(CellLayout)getChildAt(mCurrentPage + 1);
      }
    }
    if (dropTargetLayout != null) {
      mTargetCell=findNearestArea(originX,originY,mDragInfo.spanX,mDragInfo.spanY,dropTargetLayout,mTargetCell);
      final int screen=(mTargetCell == null) ? mDragInfo.screen : indexOfChild(dropTargetLayout);
      View v=dropTargetLayout.getChildAt(mTargetCell[0],mTargetCell[1]);
      boolean hasMoved=!(mDragInfo.cellX == mTargetCell[0] && mDragInfo.cellY == mTargetCell[1]);
      if (v != null && (v.getTag() instanceof ShortcutInfo) && dragInfo instanceof ShortcutInfo && hasMoved) {
        ShortcutInfo info1=(ShortcutInfo)v.getTag();
        ShortcutInfo info2=(ShortcutInfo)dragInfo;
        dropTargetLayout.removeView(v);
        FolderIcon fi=mLauncher.addFolder(screen,mTargetCell[0],mTargetCell[1]);
        fi.addItem(info1);
        fi.addItem(info2);
        return;
      }
      mTargetCell=findNearestVacantArea(originX,originY,mDragInfo.spanX,mDragInfo.spanY,cell,dropTargetLayout,mTargetCell);
      if (screen != mCurrentPage) {
        snapToPage(screen);
      }
      if (mTargetCell != null) {
        if (screen != mDragInfo.screen) {
          ((CellLayout)getChildAt(mDragInfo.screen)).removeView(cell);
          addInScreen(cell,screen,mTargetCell[0],mTargetCell[1],mDragInfo.spanX,mDragInfo.spanY);
        }
        final ItemInfo info=(ItemInfo)cell.getTag();
        CellLayout.LayoutParams lp=(CellLayout.LayoutParams)cell.getLayoutParams();
        dropTargetLayout.onMove(cell,mTargetCell[0],mTargetCell[1]);
        lp.cellX=mTargetCell[0];
        lp.cellY=mTargetCell[1];
        cell.setId(LauncherModel.getCellLayoutChildId(-1,mDragInfo.screen,mTargetCell[0],mTargetCell[1],mDragInfo.spanX,mDragInfo.spanY));
        if (cell instanceof LauncherAppWidgetHostView) {
          final CellLayout cellLayout=dropTargetLayout;
          final LauncherAppWidgetHostView hostView=(LauncherAppWidgetHostView)cell;
          AppWidgetProviderInfo pinfo=hostView.getAppWidgetInfo();
          if (pinfo.resizeMode != AppWidgetProviderInfo.RESIZE_NONE) {
            final Runnable resizeRunnable=new Runnable(){
              public void run(){
                DragLayer dragLayer=(DragLayer)mLauncher.findViewById(R.id.drag_layer);
                dragLayer.addResizeFrame(info,hostView,cellLayout);
              }
            }
;
            post(new Runnable(){
              public void run(){
                if (!isPageMoving()) {
                  resizeRunnable.run();
                }
 else {
                  mDelayedResizeRunnable=resizeRunnable;
                }
              }
            }
);
          }
        }
        LauncherModel.moveItemInDatabase(mLauncher,info,LauncherSettings.Favorites.CONTAINER_DESKTOP,screen,lp.cellX,lp.cellY);
      }
    }
    final CellLayout parent=(CellLayout)cell.getParent().getParent();
    setPositionForDropAnimation(dragView,originX,originY,parent,cell);
    boolean animateDrop=!mWasSpringLoadedOnDragExit;
    parent.onDropChild(cell,animateDrop);
  }
}
