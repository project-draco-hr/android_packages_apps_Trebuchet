{
  final ClipDescription desc=event.getClipDescription();
  final CellLayout layout=(CellLayout)getChildAt(mCurrentPage);
  final int[] pos=new int[2];
  layout.getLocationOnScreen(pos);
  final int x=(int)event.getX() - pos[0];
  final int y=(int)event.getY() - pos[1];
switch (event.getAction()) {
case DragEvent.ACTION_DRAG_STARTED:
{
      Pair<Integer,List<WidgetMimeTypeHandlerData>> test=validateDrag(event);
      if (test != null) {
        boolean isShortcut=(test.second == null);
        if (isShortcut) {
          if (!layout.findCellForSpan(pos,1,1)) {
            mLauncher.showOutOfSpaceMessage();
            return false;
          }
        }
      }
 else {
        Toast.makeText(mContext,mContext.getString(R.string.external_drop_widget_error),Toast.LENGTH_SHORT).show();
        return false;
      }
      final Canvas canvas=new Canvas();
      final int bitmapPadding=HolographicOutlineHelper.MAX_OUTER_BLUR_RADIUS;
      mDragOutline=createExternalDragOutline(canvas,bitmapPadding);
      showOutlines();
      layout.setIsDragOccuring(true);
      layout.onDragEnter();
      layout.visualizeDropLocation(null,mDragOutline,x,y,1,1,null,null);
      return true;
    }
case DragEvent.ACTION_DRAG_LOCATION:
  layout.visualizeDropLocation(null,mDragOutline,x,y,1,1,null,null);
return true;
case DragEvent.ACTION_DROP:
{
final LauncherModel model=mLauncher.getModel();
final ClipData data=event.getClipData();
pos[0]=x;
pos[1]=y;
Pair<Integer,List<WidgetMimeTypeHandlerData>> test=validateDrag(event);
if (test != null) {
  final int index=test.first;
  final List<WidgetMimeTypeHandlerData> widgets=test.second;
  final boolean isShortcut=(widgets == null);
  final String mimeType=desc.getMimeType(index);
  if (isShortcut) {
    final Intent intent=data.getItemAt(index).getIntent();
    Object info=model.infoFromShortcutIntent(mContext,intent,data.getIcon());
    onDropExternal(new int[]{x,y},info,layout,false);
  }
 else {
    if (widgets.size() == 1) {
      final AppWidgetProviderInfo widgetInfo=widgets.get(0).widgetInfo;
      final PendingAddWidgetInfo createInfo=new PendingAddWidgetInfo(widgetInfo,mimeType,data);
      mLauncher.addAppWidgetFromDrop(createInfo,LauncherSettings.Favorites.CONTAINER_DESKTOP,mCurrentPage,null,pos);
    }
 else {
      final InstallWidgetReceiver.WidgetListAdapter adapter=new InstallWidgetReceiver.WidgetListAdapter(mLauncher,mimeType,data,widgets,layout,mCurrentPage,pos);
      final AlertDialog.Builder builder=new AlertDialog.Builder(mContext);
      builder.setAdapter(adapter,adapter);
      builder.setCancelable(true);
      builder.setTitle(mContext.getString(R.string.external_drop_widget_pick_title));
      builder.setIcon(R.drawable.ic_no_applications);
      builder.show();
    }
  }
}
return true;
}
case DragEvent.ACTION_DRAG_ENDED:
layout.setIsDragOccuring(false);
layout.onDragExit();
hideOutlines();
return true;
}
return super.onDragEvent(event);
}
