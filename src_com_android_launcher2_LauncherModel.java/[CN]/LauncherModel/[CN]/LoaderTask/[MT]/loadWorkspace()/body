{
  final long t=DEBUG_LOADERS ? SystemClock.uptimeMillis() : 0;
  final Context context=mContext;
  final ContentResolver contentResolver=context.getContentResolver();
  final PackageManager manager=context.getPackageManager();
  final AppWidgetManager widgets=AppWidgetManager.getInstance(context);
  final boolean isSafeMode=manager.isSafeMode();
  mApp.getLauncherProvider().loadDefaultFavoritesIfNecessary();
  sWorkspaceItems.clear();
  sAppWidgets.clear();
  sFolders.clear();
  sItemsIdMap.clear();
  sDbIconCache.clear();
  final ArrayList<Long> itemsToRemove=new ArrayList<Long>();
  final Cursor c=contentResolver.query(LauncherSettings.Favorites.CONTENT_URI,null,null,null,null);
  final ItemInfo occupied[][][]=new ItemInfo[Launcher.SCREEN_COUNT + 1][mCellCountX + 1][mCellCountY + 1];
  try {
    final int idIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites._ID);
    final int intentIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.INTENT);
    final int titleIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.TITLE);
    final int iconTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_TYPE);
    final int iconIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON);
    final int iconPackageIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_PACKAGE);
    final int iconResourceIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_RESOURCE);
    final int containerIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CONTAINER);
    final int itemTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ITEM_TYPE);
    final int appWidgetIdIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.APPWIDGET_ID);
    final int screenIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SCREEN);
    final int cellXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLX);
    final int cellYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLY);
    final int spanXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANX);
    final int spanYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANY);
    ShortcutInfo info;
    String intentDescription;
    LauncherAppWidgetInfo appWidgetInfo;
    int container;
    long id;
    Intent intent;
    while (!mStopped && c.moveToNext()) {
      try {
        int itemType=c.getInt(itemTypeIndex);
switch (itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
          intentDescription=c.getString(intentIndex);
        try {
          intent=Intent.parseUri(intentDescription,0);
        }
 catch (        URISyntaxException e) {
          continue;
        }
      if (itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION) {
        info=getShortcutInfo(manager,intent,context,c,iconIndex,titleIndex,mLabelCache);
      }
 else {
        info=getShortcutInfo(c,context,iconTypeIndex,iconPackageIndex,iconResourceIndex,iconIndex,titleIndex);
      }
    if (info != null) {
      info.intent=intent;
      info.id=c.getLong(idIndex);
      container=c.getInt(containerIndex);
      info.container=container;
      info.screen=c.getInt(screenIndex);
      info.cellX=c.getInt(cellXIndex);
      info.cellY=c.getInt(cellYIndex);
      if (!checkItemPlacement(occupied,info)) {
        break;
      }
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
case LauncherSettings.Favorites.CONTAINER_HOTSEAT:
        sWorkspaceItems.add(info);
      break;
default :
    FolderInfo folderInfo=findOrMakeFolder(sFolders,container);
  folderInfo.add(info);
break;
}
sItemsIdMap.put(info.id,info);
queueIconToBeChecked(sDbIconCache,info,c,iconIndex);
}
 else {
id=c.getLong(idIndex);
Log.e(TAG,"Error loading shortcut " + id + ", removing it");
contentResolver.delete(LauncherSettings.Favorites.getContentUri(id,false),null,null);
}
break;
case LauncherSettings.Favorites.ITEM_TYPE_FOLDER:
id=c.getLong(idIndex);
FolderInfo folderInfo=findOrMakeFolder(sFolders,id);
folderInfo.title=c.getString(titleIndex);
folderInfo.id=id;
container=c.getInt(containerIndex);
folderInfo.container=container;
folderInfo.screen=c.getInt(screenIndex);
folderInfo.cellX=c.getInt(cellXIndex);
folderInfo.cellY=c.getInt(cellYIndex);
if (!checkItemPlacement(occupied,folderInfo)) {
break;
}
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
case LauncherSettings.Favorites.CONTAINER_HOTSEAT:
sWorkspaceItems.add(folderInfo);
break;
}
sItemsIdMap.put(folderInfo.id,folderInfo);
sFolders.put(folderInfo.id,folderInfo);
break;
case LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:
int appWidgetId=c.getInt(appWidgetIdIndex);
id=c.getLong(idIndex);
final AppWidgetProviderInfo provider=widgets.getAppWidgetInfo(appWidgetId);
if (!isSafeMode && (provider == null || provider.provider == null || provider.provider.getPackageName() == null)) {
String log="Deleting widget that isn't installed anymore: id=" + id + " appWidgetId="+ appWidgetId;
Log.e(TAG,log);
Launcher.sDumpLogs.add(log);
itemsToRemove.add(id);
}
 else {
appWidgetInfo=new LauncherAppWidgetInfo(appWidgetId,provider.provider);
appWidgetInfo.id=id;
appWidgetInfo.screen=c.getInt(screenIndex);
appWidgetInfo.cellX=c.getInt(cellXIndex);
appWidgetInfo.cellY=c.getInt(cellYIndex);
appWidgetInfo.spanX=c.getInt(spanXIndex);
appWidgetInfo.spanY=c.getInt(spanYIndex);
container=c.getInt(containerIndex);
if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP && container != LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
Log.e(TAG,"Widget found where container " + "!= CONTAINER_DESKTOP nor CONTAINER_HOTSEAT - ignoring!");
continue;
}
appWidgetInfo.container=c.getInt(containerIndex);
if (!checkItemPlacement(occupied,appWidgetInfo)) {
break;
}
sItemsIdMap.put(appWidgetInfo.id,appWidgetInfo);
sAppWidgets.add(appWidgetInfo);
}
break;
}
}
 catch (Exception e) {
Log.w(TAG,"Desktop items loading interrupted:",e);
}
}
}
  finally {
c.close();
}
if (itemsToRemove.size() > 0) {
ContentProviderClient client=contentResolver.acquireContentProviderClient(LauncherSettings.Favorites.CONTENT_URI);
for (long id : itemsToRemove) {
if (DEBUG_LOADERS) {
Log.d(TAG,"Removed id = " + id);
}
try {
client.delete(LauncherSettings.Favorites.getContentUri(id,false),null,null);
}
 catch (RemoteException e) {
Log.w(TAG,"Could not remove id = " + id);
}
}
}
if (DEBUG_LOADERS) {
Log.d(TAG,"loaded workspace in " + (SystemClock.uptimeMillis() - t) + "ms");
Log.d(TAG,"workspace layout: ");
for (int y=0; y < mCellCountY; y++) {
String line="";
for (int s=0; s < Launcher.SCREEN_COUNT; s++) {
if (s > 0) {
line+=" | ";
}
for (int x=0; x < mCellCountX; x++) {
line+=((occupied[s][x][y] != null) ? "#" : ".");
}
}
Log.d(TAG,"[ " + line + " ]");
}
}
}
