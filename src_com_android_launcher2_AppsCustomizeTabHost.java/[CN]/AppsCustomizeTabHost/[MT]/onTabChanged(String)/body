{
  final AppsCustomizePagedView.ContentType type=getContentTypeForTabTag(tabId);
  if (mSuppressContentCallback) {
    mSuppressContentCallback=false;
    return;
  }
  final Resources res=getResources();
  final int duration=res.getInteger(R.integer.config_tabTransitionDuration);
  post(new Runnable(){
    @Override public void run(){
      if (mAppsCustomizePane.getMeasuredWidth() <= 0 || mAppsCustomizePane.getMeasuredHeight() <= 0) {
        reloadCurrentPage();
        return;
      }
      int[] visiblePageRange=new int[2];
      mAppsCustomizePane.getVisiblePages(visiblePageRange);
      if (visiblePageRange[0] == -1 && visiblePageRange[1] == -1) {
        reloadCurrentPage();
        return;
      }
      ArrayList<View> visiblePages=new ArrayList<View>();
      for (int i=visiblePageRange[0]; i <= visiblePageRange[1]; i++) {
        visiblePages.add(mAppsCustomizePane.getPageAt(i));
      }
      mAnimationBuffer.scrollTo(mAppsCustomizePane.getScrollX(),0);
      for (int i=visiblePages.size() - 1; i >= 0; i--) {
        View child=visiblePages.get(i);
        if (child instanceof PagedViewCellLayout) {
          ((PagedViewCellLayout)child).resetChildrenOnKeyListeners();
        }
 else         if (child instanceof PagedViewGridLayout) {
          ((PagedViewGridLayout)child).resetChildrenOnKeyListeners();
        }
        PagedViewWidget.setDeletePreviewsWhenDetachedFromWindow(false);
        mAppsCustomizePane.removeView(child);
        PagedViewWidget.setDeletePreviewsWhenDetachedFromWindow(true);
        mAnimationBuffer.setAlpha(1f);
        mAnimationBuffer.setVisibility(View.VISIBLE);
        LayoutParams p=new FrameLayout.LayoutParams(child.getWidth(),child.getHeight());
        p.setMargins((int)child.getLeft(),(int)child.getTop(),0,0);
        mAnimationBuffer.addView(child,p);
      }
      onTabChangedStart();
      onTabChangedEnd(type);
      ObjectAnimator outAnim=ObjectAnimator.ofFloat(mAnimationBuffer,"alpha",0f);
      outAnim.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          mAnimationBuffer.setVisibility(View.GONE);
          mAnimationBuffer.removeAllViews();
        }
        @Override public void onAnimationCancel(        Animator animation){
          mAnimationBuffer.setVisibility(View.GONE);
          mAnimationBuffer.removeAllViews();
        }
      }
);
      ObjectAnimator inAnim=ObjectAnimator.ofFloat(mAppsCustomizePane,"alpha",1f);
      inAnim.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          reloadCurrentPage();
        }
      }
);
      AnimatorSet animSet=new AnimatorSet();
      animSet.playTogether(outAnim,inAnim);
      animSet.setDuration(duration);
      animSet.start();
    }
  }
);
}
