{
  final long t=DEBUG_LOADERS ? SystemClock.uptimeMillis() : 0;
  final Context context=mContext;
  final ContentResolver contentResolver=context.getContentResolver();
  final PackageManager manager=context.getPackageManager();
  final AppWidgetManager widgets=AppWidgetManager.getInstance(context);
  final boolean isSafeMode=manager.isSafeMode();
  LauncherAppState app=LauncherAppState.getInstance();
  DeviceProfile grid=app.getDynamicGrid().getDeviceProfile();
  int countX=(int)grid.numColumns;
  int countY=(int)grid.numRows;
  LauncherAppState.getLauncherProvider().loadDefaultFavoritesIfNecessary(0);
  boolean loadedOldDb=LauncherAppState.getLauncherProvider().justLoadedOldDb();
synchronized (sBgLock) {
    clearSBgDataStructures();
    final ArrayList<Long> itemsToRemove=new ArrayList<Long>();
    final Uri contentUri=LauncherSettings.Favorites.CONTENT_URI;
    if (DEBUG_LOADERS)     Log.d(TAG,"loading model from " + contentUri);
    final Cursor c=contentResolver.query(contentUri,null,null,null,null);
    final HashMap<Long,ItemInfo[][]> occupied=new HashMap<Long,ItemInfo[][]>();
    try {
      final int idIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites._ID);
      final int intentIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.INTENT);
      final int titleIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.TITLE);
      final int iconTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_TYPE);
      final int iconIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON);
      final int iconPackageIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_PACKAGE);
      final int iconResourceIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_RESOURCE);
      final int containerIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CONTAINER);
      final int itemTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ITEM_TYPE);
      final int appWidgetIdIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.APPWIDGET_ID);
      final int appWidgetProviderIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.APPWIDGET_PROVIDER);
      final int screenIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SCREEN);
      final int cellXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLX);
      final int cellYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLY);
      final int spanXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANX);
      final int spanYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANY);
      ShortcutInfo info;
      String intentDescription;
      LauncherAppWidgetInfo appWidgetInfo;
      int container;
      long id;
      Intent intent;
      while (!mStopped && c.moveToNext()) {
        AtomicBoolean deleteOnItemOverlap=new AtomicBoolean(false);
        try {
          int itemType=c.getInt(itemTypeIndex);
switch (itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
            id=c.getLong(idIndex);
          intentDescription=c.getString(intentIndex);
        try {
          intent=Intent.parseUri(intentDescription,0);
          ComponentName cn=intent.getComponent();
          if (cn != null && !isValidPackageComponent(manager,cn)) {
            if (!mAppsCanBeOnRemoveableStorage) {
              Launcher.addDumpLog(TAG,"Invalid package removed: " + cn,true);
              itemsToRemove.add(id);
            }
 else {
              Launcher.addDumpLog(TAG,"Invalid package found: " + cn,true);
            }
            continue;
          }
        }
 catch (        URISyntaxException e) {
          Launcher.addDumpLog(TAG,"Invalid uri: " + intentDescription,true);
          continue;
        }
      if (itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION) {
        info=getShortcutInfo(manager,intent,context,c,iconIndex,titleIndex,mLabelCache);
      }
 else {
        info=getShortcutInfo(c,context,iconTypeIndex,iconPackageIndex,iconResourceIndex,iconIndex,titleIndex);
        if (intent.getAction() != null && intent.getCategories() != null && intent.getAction().equals(Intent.ACTION_MAIN) && intent.getCategories().contains(Intent.CATEGORY_LAUNCHER)) {
          intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
        }
      }
    if (info != null) {
      info.id=id;
      info.intent=intent;
      container=c.getInt(containerIndex);
      info.container=container;
      info.screenId=c.getInt(screenIndex);
      info.cellX=c.getInt(cellXIndex);
      info.cellY=c.getInt(cellYIndex);
      info.spanX=1;
      info.spanY=1;
      if (container == LauncherSettings.Favorites.CONTAINER_DESKTOP) {
        if (checkItemDimensions(info)) {
          Launcher.addDumpLog(TAG,"Skipped loading out of bounds shortcut: " + info + ", "+ grid.numColumns+ "x"+ grid.numRows,true);
          continue;
        }
      }
      deleteOnItemOverlap.set(false);
      if (!checkItemPlacement(occupied,info,deleteOnItemOverlap)) {
        if (deleteOnItemOverlap.get()) {
          itemsToRemove.add(id);
        }
        break;
      }
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
case LauncherSettings.Favorites.CONTAINER_HOTSEAT:
        sBgWorkspaceItems.add(info);
      break;
default :
    FolderInfo folderInfo=findOrMakeFolder(sBgFolders,container);
  folderInfo.add(info);
break;
}
sBgItemsIdMap.put(info.id,info);
queueIconToBeChecked(sBgDbIconCache,info,c,iconIndex);
}
 else {
throw new RuntimeException("Unexpected null ShortcutInfo");
}
break;
case LauncherSettings.Favorites.ITEM_TYPE_FOLDER:
id=c.getLong(idIndex);
FolderInfo folderInfo=findOrMakeFolder(sBgFolders,id);
folderInfo.title=c.getString(titleIndex);
folderInfo.id=id;
container=c.getInt(containerIndex);
folderInfo.container=container;
folderInfo.screenId=c.getInt(screenIndex);
folderInfo.cellX=c.getInt(cellXIndex);
folderInfo.cellY=c.getInt(cellYIndex);
folderInfo.spanX=1;
folderInfo.spanY=1;
if (container == LauncherSettings.Favorites.CONTAINER_DESKTOP) {
if (checkItemDimensions(folderInfo)) {
Log.d(TAG,"Skipped loading out of bounds folder");
continue;
}
}
deleteOnItemOverlap.set(false);
if (!checkItemPlacement(occupied,folderInfo,deleteOnItemOverlap)) {
if (deleteOnItemOverlap.get()) {
itemsToRemove.add(id);
}
break;
}
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
case LauncherSettings.Favorites.CONTAINER_HOTSEAT:
sBgWorkspaceItems.add(folderInfo);
break;
}
sBgItemsIdMap.put(folderInfo.id,folderInfo);
sBgFolders.put(folderInfo.id,folderInfo);
break;
case LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:
int appWidgetId=c.getInt(appWidgetIdIndex);
String savedProvider=c.getString(appWidgetProviderIndex);
id=c.getLong(idIndex);
final AppWidgetProviderInfo provider=widgets.getAppWidgetInfo(appWidgetId);
if (!isSafeMode && (provider == null || provider.provider == null || provider.provider.getPackageName() == null)) {
String log="Deleting widget that isn't installed anymore: id=" + id + " appWidgetId="+ appWidgetId;
Log.e(TAG,log);
Launcher.addDumpLog(TAG,log,false);
itemsToRemove.add(id);
}
 else {
appWidgetInfo=new LauncherAppWidgetInfo(appWidgetId,provider.provider);
appWidgetInfo.id=id;
appWidgetInfo.screenId=c.getInt(screenIndex);
appWidgetInfo.cellX=c.getInt(cellXIndex);
appWidgetInfo.cellY=c.getInt(cellYIndex);
appWidgetInfo.spanX=c.getInt(spanXIndex);
appWidgetInfo.spanY=c.getInt(spanYIndex);
int[] minSpan=Launcher.getMinSpanForWidget(context,provider);
appWidgetInfo.minSpanX=minSpan[0];
appWidgetInfo.minSpanY=minSpan[1];
container=c.getInt(containerIndex);
if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP && container != LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
Log.e(TAG,"Widget found where container != " + "CONTAINER_DESKTOP nor CONTAINER_HOTSEAT - ignoring!");
continue;
}
appWidgetInfo.container=c.getInt(containerIndex);
if (container == LauncherSettings.Favorites.CONTAINER_DESKTOP) {
if (checkItemDimensions(appWidgetInfo)) {
Log.d(TAG,"Skipped loading out of bounds app widget");
continue;
}
}
deleteOnItemOverlap.set(false);
if (!checkItemPlacement(occupied,appWidgetInfo,deleteOnItemOverlap)) {
if (deleteOnItemOverlap.get()) {
itemsToRemove.add(id);
}
break;
}
String providerName=provider.provider.flattenToString();
if (!providerName.equals(savedProvider)) {
ContentValues values=new ContentValues();
values.put(LauncherSettings.Favorites.APPWIDGET_PROVIDER,providerName);
String where=BaseColumns._ID + "= ?";
String[] args={Integer.toString(c.getInt(idIndex))};
contentResolver.update(contentUri,values,where,args);
}
sBgItemsIdMap.put(appWidgetInfo.id,appWidgetInfo);
sBgAppWidgets.add(appWidgetInfo);
}
break;
}
}
 catch (Exception e) {
Launcher.addDumpLog(TAG,"Desktop items loading interrupted: " + e,true);
}
}
}
  finally {
if (c != null) {
c.close();
}
}
if (mStopped) {
clearSBgDataStructures();
return false;
}
if (itemsToRemove.size() > 0) {
ContentProviderClient client=contentResolver.acquireContentProviderClient(LauncherSettings.Favorites.CONTENT_URI);
for (long id : itemsToRemove) {
if (DEBUG_LOADERS) {
Log.d(TAG,"Removed id = " + id);
}
try {
client.delete(LauncherSettings.Favorites.getContentUri(id,false),null,null);
}
 catch (RemoteException e) {
Log.w(TAG,"Could not remove id = " + id);
}
}
}
if (loadedOldDb) {
long maxScreenId=0;
for (ItemInfo item : sBgItemsIdMap.values()) {
long screenId=item.screenId;
if (item.container == LauncherSettings.Favorites.CONTAINER_DESKTOP && !sBgWorkspaceScreens.contains(screenId)) {
sBgWorkspaceScreens.add(screenId);
if (screenId > maxScreenId) {
maxScreenId=screenId;
}
}
}
Collections.sort(sBgWorkspaceScreens);
LauncherAppState.getLauncherProvider().updateMaxScreenId(maxScreenId);
updateWorkspaceScreenOrder(context,sBgWorkspaceScreens);
long maxItemId=0;
for (ItemInfo item : sBgItemsIdMap.values()) {
maxItemId=Math.max(maxItemId,item.id);
}
LauncherAppState.getLauncherProvider().updateMaxItemId(maxItemId);
}
 else {
TreeMap<Integer,Long> orderedScreens=loadWorkspaceScreensDb(mContext);
for (Integer i : orderedScreens.keySet()) {
sBgWorkspaceScreens.add(orderedScreens.get(i));
}
ArrayList<Long> unusedScreens=new ArrayList<Long>(sBgWorkspaceScreens);
for (ItemInfo item : sBgItemsIdMap.values()) {
long screenId=item.screenId;
if (item.container == LauncherSettings.Favorites.CONTAINER_DESKTOP && unusedScreens.contains(screenId)) {
unusedScreens.remove(screenId);
}
}
if (unusedScreens.size() != 0) {
sBgWorkspaceScreens.removeAll(unusedScreens);
updateWorkspaceScreenOrder(context,sBgWorkspaceScreens);
}
}
if (DEBUG_LOADERS) {
Log.d(TAG,"loaded workspace in " + (SystemClock.uptimeMillis() - t) + "ms");
Log.d(TAG,"workspace layout: ");
int nScreens=occupied.size();
for (int y=0; y < countY; y++) {
String line="";
Iterator<Long> iter=occupied.keySet().iterator();
while (iter.hasNext()) {
long screenId=iter.next();
if (screenId > 0) {
line+=" | ";
}
for (int x=0; x < countX; x++) {
line+=((occupied.get(screenId)[x][y] != null) ? "#" : ".");
}
}
Log.d(TAG,"[ " + line + " ]");
}
}
}
return loadedOldDb;
}
