{
  final long t=DEBUG_LOADERS ? SystemClock.uptimeMillis() : 0;
  final Context context=mContext;
  final ContentResolver contentResolver=context.getContentResolver();
  final PackageManager manager=context.getPackageManager();
  final AppWidgetManager widgets=AppWidgetManager.getInstance(context);
  final boolean isSafeMode=manager.isSafeMode();
  boolean loadOldDb=mApp.getLauncherProvider().shouldLoadOldDb();
  Uri contentUri=loadOldDb ? LauncherSettings.Favorites.OLD_CONTENT_URI : LauncherSettings.Favorites.CONTENT_URI;
  mIsUpgradePath=loadOldDb;
synchronized (sBgLock) {
    sBgWorkspaceItems.clear();
    sBgAppWidgets.clear();
    sBgFolders.clear();
    sBgItemsIdMap.clear();
    sBgDbIconCache.clear();
    sBgWorkspaceScreens.clear();
    final ArrayList<Long> itemsToRemove=new ArrayList<Long>();
    final Cursor c=contentResolver.query(contentUri,null,null,null,null);
    final HashMap<Long,ItemInfo[][]> occupied=new HashMap<Long,ItemInfo[][]>();
    try {
      final int idIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites._ID);
      final int intentIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.INTENT);
      final int titleIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.TITLE);
      final int iconTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_TYPE);
      final int iconIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON);
      final int iconPackageIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_PACKAGE);
      final int iconResourceIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_RESOURCE);
      final int containerIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CONTAINER);
      final int itemTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ITEM_TYPE);
      final int appWidgetIdIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.APPWIDGET_ID);
      final int screenIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SCREEN);
      final int cellXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLX);
      final int cellYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLY);
      final int spanXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANX);
      final int spanYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANY);
      ShortcutInfo info;
      String intentDescription;
      LauncherAppWidgetInfo appWidgetInfo;
      int container;
      long id;
      Intent intent;
      while (!mStopped && c.moveToNext()) {
        try {
          int itemType=c.getInt(itemTypeIndex);
switch (itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
            intentDescription=c.getString(intentIndex);
          try {
            intent=Intent.parseUri(intentDescription,0);
          }
 catch (          URISyntaxException e) {
            continue;
          }
        if (itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION) {
          info=getShortcutInfo(manager,intent,context,c,iconIndex,titleIndex,mLabelCache);
        }
 else {
          info=getShortcutInfo(c,context,iconTypeIndex,iconPackageIndex,iconResourceIndex,iconIndex,titleIndex);
          if (intent.getAction() != null && intent.getCategories() != null && intent.getAction().equals(Intent.ACTION_MAIN) && intent.getCategories().contains(Intent.CATEGORY_LAUNCHER)) {
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
          }
        }
      if (info != null) {
        info.intent=intent;
        info.id=c.getLong(idIndex);
        container=c.getInt(containerIndex);
        info.container=container;
        info.screenId=c.getInt(screenIndex);
        info.cellX=c.getInt(cellXIndex);
        info.cellY=c.getInt(cellYIndex);
        if (!checkItemPlacement(occupied,info)) {
          break;
        }
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
case LauncherSettings.Favorites.CONTAINER_HOTSEAT:
          sBgWorkspaceItems.add(info);
        break;
default :
      FolderInfo folderInfo=findOrMakeFolder(sBgFolders,container);
    folderInfo.add(info);
  break;
}
if (container != LauncherSettings.Favorites.CONTAINER_HOTSEAT && loadOldDb) {
info.screenId=permuteScreens(info.screenId);
}
sBgItemsIdMap.put(info.id,info);
queueIconToBeChecked(sBgDbIconCache,info,c,iconIndex);
}
 else {
id=c.getLong(idIndex);
Log.e(TAG,"Error loading shortcut " + id + ", removing it");
contentResolver.delete(LauncherSettings.Favorites.getContentUri(id,false),null,null);
}
break;
case LauncherSettings.Favorites.ITEM_TYPE_FOLDER:
id=c.getLong(idIndex);
FolderInfo folderInfo=findOrMakeFolder(sBgFolders,id);
folderInfo.title=c.getString(titleIndex);
folderInfo.id=id;
container=c.getInt(containerIndex);
folderInfo.container=container;
folderInfo.screenId=c.getInt(screenIndex);
folderInfo.cellX=c.getInt(cellXIndex);
folderInfo.cellY=c.getInt(cellYIndex);
if (!checkItemPlacement(occupied,folderInfo)) {
break;
}
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
case LauncherSettings.Favorites.CONTAINER_HOTSEAT:
sBgWorkspaceItems.add(folderInfo);
break;
}
if (container != LauncherSettings.Favorites.CONTAINER_HOTSEAT && loadOldDb) {
folderInfo.screenId=permuteScreens(folderInfo.screenId);
}
sBgItemsIdMap.put(folderInfo.id,folderInfo);
sBgFolders.put(folderInfo.id,folderInfo);
break;
case LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:
int appWidgetId=c.getInt(appWidgetIdIndex);
id=c.getLong(idIndex);
final AppWidgetProviderInfo provider=widgets.getAppWidgetInfo(appWidgetId);
if (!isSafeMode && (provider == null || provider.provider == null || provider.provider.getPackageName() == null)) {
String log="Deleting widget that isn't installed anymore: id=" + id + " appWidgetId="+ appWidgetId;
Log.e(TAG,log);
Launcher.sDumpLogs.add(log);
itemsToRemove.add(id);
}
 else {
appWidgetInfo=new LauncherAppWidgetInfo(appWidgetId,provider.provider);
appWidgetInfo.id=id;
appWidgetInfo.screenId=c.getInt(screenIndex);
appWidgetInfo.cellX=c.getInt(cellXIndex);
appWidgetInfo.cellY=c.getInt(cellYIndex);
appWidgetInfo.spanX=c.getInt(spanXIndex);
appWidgetInfo.spanY=c.getInt(spanYIndex);
int[] minSpan=Launcher.getMinSpanForWidget(context,provider);
appWidgetInfo.minSpanX=minSpan[0];
appWidgetInfo.minSpanY=minSpan[1];
container=c.getInt(containerIndex);
if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP && container != LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
Log.e(TAG,"Widget found where container != " + "CONTAINER_DESKTOP nor CONTAINER_HOTSEAT - ignoring!");
continue;
}
if (container != LauncherSettings.Favorites.CONTAINER_HOTSEAT && loadOldDb) {
appWidgetInfo.screenId=permuteScreens(appWidgetInfo.screenId);
}
appWidgetInfo.container=c.getInt(containerIndex);
if (!checkItemPlacement(occupied,appWidgetInfo)) {
break;
}
sBgItemsIdMap.put(appWidgetInfo.id,appWidgetInfo);
sBgAppWidgets.add(appWidgetInfo);
}
break;
}
}
 catch (Exception e) {
Log.w(TAG,"Desktop items loading interrupted:",e);
}
}
}
  finally {
c.close();
}
if (itemsToRemove.size() > 0) {
ContentProviderClient client=contentResolver.acquireContentProviderClient(LauncherSettings.Favorites.CONTENT_URI);
for (long id : itemsToRemove) {
if (DEBUG_LOADERS) {
Log.d(TAG,"Removed id = " + id);
}
try {
client.delete(LauncherSettings.Favorites.getContentUri(id,false),null,null);
}
 catch (RemoteException e) {
Log.w(TAG,"Could not remove id = " + id);
}
}
}
if (loadOldDb) {
long maxScreenId=0;
for (ItemInfo item : sBgItemsIdMap.values()) {
long screenId=item.screenId;
if (item.container == LauncherSettings.Favorites.CONTAINER_DESKTOP && !sBgWorkspaceScreens.contains(screenId)) {
sBgWorkspaceScreens.add(screenId);
if (screenId > maxScreenId) {
maxScreenId=screenId;
}
}
}
Collections.sort(sBgWorkspaceScreens);
mApp.getLauncherProvider().updateMaxScreenId(maxScreenId);
updateWorkspaceScreenOrder(context,sBgWorkspaceScreens);
}
 else {
Uri screensUri=LauncherSettings.WorkspaceScreens.CONTENT_URI;
final Cursor sc=contentResolver.query(screensUri,null,null,null,null);
TreeMap<Integer,Long> orderedScreens=new TreeMap<Integer,Long>();
try {
final int idIndex=sc.getColumnIndexOrThrow(LauncherSettings.WorkspaceScreens._ID);
final int rankIndex=sc.getColumnIndexOrThrow(LauncherSettings.WorkspaceScreens.SCREEN_RANK);
while (sc.moveToNext()) {
try {
long screenId=sc.getLong(idIndex);
int rank=sc.getInt(rankIndex);
orderedScreens.put(rank,screenId);
}
 catch (Exception e) {
Log.w(TAG,"Desktop items loading interrupted:",e);
}
}
}
  finally {
sc.close();
}
Iterator<Integer> iter=orderedScreens.keySet().iterator();
while (iter.hasNext()) {
sBgWorkspaceScreens.add(orderedScreens.get(iter.next()));
}
ArrayList<Long> unusedScreens=new ArrayList<Long>();
unusedScreens.addAll(sBgWorkspaceScreens);
for (ItemInfo item : sBgItemsIdMap.values()) {
long screenId=item.screenId;
if (item.container == LauncherSettings.Favorites.CONTAINER_DESKTOP && unusedScreens.contains(screenId)) {
unusedScreens.remove(screenId);
}
}
if (unusedScreens.size() != 0) {
sBgWorkspaceScreens.removeAll(unusedScreens);
updateWorkspaceScreenOrder(context,sBgWorkspaceScreens);
}
}
if (DEBUG_LOADERS) {
Log.d(TAG,"loaded workspace in " + (SystemClock.uptimeMillis() - t) + "ms");
Log.d(TAG,"workspace layout: ");
int nScreens=occupied.size();
for (int y=0; y < mCellCountY; y++) {
String line="";
Iterator<Long> iter=occupied.keySet().iterator();
while (iter.hasNext()) {
long screenId=iter.next();
if (screenId > 0) {
line+=" | ";
}
for (int x=0; x < mCellCountX; x++) {
line+=((occupied.get(screenId)[x][y] != null) ? "#" : ".");
}
}
Log.d(TAG,"[ " + line + " ]");
}
}
}
}
