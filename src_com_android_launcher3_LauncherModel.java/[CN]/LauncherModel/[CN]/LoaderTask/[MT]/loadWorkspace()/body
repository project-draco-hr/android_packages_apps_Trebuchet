{
  final long t=DEBUG_LOADERS ? SystemClock.uptimeMillis() : 0;
  final Context context=mContext;
  final ContentResolver contentResolver=context.getContentResolver();
  final PackageManager manager=context.getPackageManager();
  final boolean isSafeMode=manager.isSafeMode();
  final LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(context);
  final boolean isSdCardReady=context.registerReceiver(null,new IntentFilter(StartupReceiver.SYSTEM_READY)) != null;
  LauncherAppState app=LauncherAppState.getInstance();
  InvariantDeviceProfile profile=app.getInvariantDeviceProfile();
  int countX=profile.numColumns;
  int countY=profile.numRows;
  if (MigrateFromRestoreTask.ENABLED && MigrateFromRestoreTask.shouldRunTask(mContext)) {
    long migrationStartTime=System.currentTimeMillis();
    Log.v(TAG,"Starting workspace migration after restore");
    try {
      MigrateFromRestoreTask task=new MigrateFromRestoreTask(mContext);
      MigrateFromRestoreTask.clearFlags(mContext);
      task.execute();
    }
 catch (    Exception e) {
      Log.e(TAG,"Error during grid migration",e);
      mFlags=mFlags | LOADER_FLAG_CLEAR_WORKSPACE;
    }
    Log.v(TAG,"Workspace migration completed in " + (System.currentTimeMillis() - migrationStartTime));
  }
  if ((mFlags & LOADER_FLAG_CLEAR_WORKSPACE) != 0) {
    Launcher.addDumpLog(TAG,"loadWorkspace: resetting launcher database",true);
    LauncherAppState.getLauncherProvider().deleteDatabase();
  }
  if ((mFlags & LOADER_FLAG_MIGRATE_SHORTCUTS) != 0) {
    Launcher.addDumpLog(TAG,"loadWorkspace: migrating from launcher2",true);
    LauncherAppState.getLauncherProvider().migrateLauncher2Shortcuts();
  }
 else {
    Launcher.addDumpLog(TAG,"loadWorkspace: loading default favorites",false);
    LauncherAppState.getLauncherProvider().loadDefaultFavoritesIfNecessary();
  }
synchronized (sBgLock) {
    clearSBgDataStructures();
    final HashMap<String,Integer> installingPkgs=PackageInstallerCompat.getInstance(mContext).updateAndGetActiveSessionCache();
    sBgWorkspaceScreens.addAll(loadWorkspaceScreensDb(mContext));
    final ArrayList<Long> itemsToRemove=new ArrayList<Long>();
    final ArrayList<Long> restoredRows=new ArrayList<Long>();
    final Uri contentUri=LauncherSettings.Favorites.CONTENT_URI;
    if (DEBUG_LOADERS)     Log.d(TAG,"loading model from " + contentUri);
    final Cursor c=contentResolver.query(contentUri,null,null,null,null);
    final LongArrayMap<ItemInfo[][]> occupied=new LongArrayMap<>();
    try {
      final int idIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites._ID);
      final int intentIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.INTENT);
      final int titleIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.TITLE);
      final int containerIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CONTAINER);
      final int itemTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ITEM_TYPE);
      final int appWidgetIdIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.APPWIDGET_ID);
      final int appWidgetProviderIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.APPWIDGET_PROVIDER);
      final int screenIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SCREEN);
      final int cellXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLX);
      final int cellYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLY);
      final int spanXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANX);
      final int spanYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANY);
      final int rankIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.RANK);
      final int restoredIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.RESTORED);
      final int profileIdIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.PROFILE_ID);
      final int optionsIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.OPTIONS);
      final CursorIconInfo cursorIconInfo=new CursorIconInfo(c);
      final LongSparseArray<UserHandleCompat> allUsers=new LongSparseArray<>();
      for (      UserHandleCompat user : mUserManager.getUserProfiles()) {
        allUsers.put(mUserManager.getSerialNumberForUser(user),user);
      }
      ShortcutInfo info;
      String intentDescription;
      LauncherAppWidgetInfo appWidgetInfo;
      int container;
      long id;
      long serialNumber;
      Intent intent;
      UserHandleCompat user;
      while (!mStopped && c.moveToNext()) {
        try {
          int itemType=c.getInt(itemTypeIndex);
          boolean restored=0 != c.getInt(restoredIndex);
          boolean allowMissingTarget=false;
          container=c.getInt(containerIndex);
switch (itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
            id=c.getLong(idIndex);
          intentDescription=c.getString(intentIndex);
        serialNumber=c.getInt(profileIdIndex);
      user=allUsers.get(serialNumber);
    int promiseType=c.getInt(restoredIndex);
  int disabledState=0;
boolean itemReplaced=false;
if (user == null) {
itemsToRemove.add(id);
continue;
}
try {
intent=Intent.parseUri(intentDescription,0);
ComponentName cn=intent.getComponent();
if (cn != null && cn.getPackageName() != null) {
boolean validPkg=launcherApps.isPackageEnabledForProfile(cn.getPackageName(),user);
boolean validComponent=validPkg && launcherApps.isActivityEnabledForProfile(cn,user);
if (validComponent) {
  if (restored) {
    restoredRows.add(id);
    restored=false;
  }
}
 else if (validPkg) {
  intent=null;
  if ((promiseType & ShortcutInfo.FLAG_AUTOINTALL_ICON) != 0) {
    intent=manager.getLaunchIntentForPackage(cn.getPackageName());
    if (intent != null) {
      ContentValues values=new ContentValues();
      values.put(LauncherSettings.Favorites.INTENT,intent.toUri(0));
      updateItem(id,values);
    }
  }
  if (intent == null) {
    Launcher.addDumpLog(TAG,"Invalid component removed: " + cn,true);
    itemsToRemove.add(id);
    continue;
  }
 else {
    restoredRows.add(id);
    restored=false;
  }
}
 else if (restored) {
  Launcher.addDumpLog(TAG,"package not yet restored: " + cn,true);
  if ((promiseType & ShortcutInfo.FLAG_RESTORE_STARTED) != 0) {
  }
 else   if (installingPkgs.containsKey(cn.getPackageName())) {
    promiseType|=ShortcutInfo.FLAG_RESTORE_STARTED;
    ContentValues values=new ContentValues();
    values.put(LauncherSettings.Favorites.RESTORED,promiseType);
    updateItem(id,values);
  }
 else   if ((promiseType & ShortcutInfo.FLAG_RESTORED_APP_TYPE) != 0) {
    int appType=CommonAppTypeParser.decodeItemTypeFromFlag(promiseType);
    CommonAppTypeParser parser=new CommonAppTypeParser(id,appType,context);
    if (parser.findDefaultApp()) {
      intent=parser.parsedIntent;
      cn=intent.getComponent();
      ContentValues values=parser.parsedValues;
      values.put(LauncherSettings.Favorites.RESTORED,0);
      updateItem(id,values);
      restored=false;
      itemReplaced=true;
    }
 else     if (REMOVE_UNRESTORED_ICONS) {
      Launcher.addDumpLog(TAG,"Unrestored package removed: " + cn,true);
      itemsToRemove.add(id);
      continue;
    }
  }
 else   if (REMOVE_UNRESTORED_ICONS) {
    Launcher.addDumpLog(TAG,"Unrestored package removed: " + cn,true);
    itemsToRemove.add(id);
    continue;
  }
}
 else if (launcherApps.isAppEnabled(manager,cn.getPackageName(),PackageManager.GET_UNINSTALLED_PACKAGES)) {
  allowMissingTarget=true;
  disabledState=ShortcutInfo.FLAG_DISABLED_NOT_AVAILABLE;
}
 else if (!isSdCardReady) {
  Launcher.addDumpLog(TAG,"Invalid package: " + cn + " (check again later)",true);
  HashSet<String> pkgs=sPendingPackages.get(user);
  if (pkgs == null) {
    pkgs=new HashSet<String>();
    sPendingPackages.put(user,pkgs);
  }
  pkgs.add(cn.getPackageName());
  allowMissingTarget=true;
}
 else {
  Launcher.addDumpLog(TAG,"Invalid package removed: " + cn,true);
  itemsToRemove.add(id);
  continue;
}
}
 else if (cn == null) {
restoredRows.add(id);
restored=false;
}
}
 catch (URISyntaxException e) {
Launcher.addDumpLog(TAG,"Invalid uri: " + intentDescription,true);
itemsToRemove.add(id);
continue;
}
boolean useLowResIcon=container >= 0 && c.getInt(rankIndex) >= FolderIcon.NUM_ITEMS_IN_PREVIEW;
if (itemReplaced) {
if (user.equals(UserHandleCompat.myUserHandle())) {
info=getAppShortcutInfo(manager,intent,user,context,null,cursorIconInfo.iconIndex,titleIndex,false,useLowResIcon);
}
 else {
itemsToRemove.add(id);
continue;
}
}
 else if (restored) {
if (user.equals(UserHandleCompat.myUserHandle())) {
Launcher.addDumpLog(TAG,"constructing info for partially restored package",true);
info=getRestoredItemInfo(c,titleIndex,intent,promiseType,itemType,cursorIconInfo,context);
intent=getRestoredItemIntent(c,context,intent);
}
 else {
itemsToRemove.add(id);
continue;
}
}
 else if (itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION) {
info=getAppShortcutInfo(manager,intent,user,context,c,cursorIconInfo.iconIndex,titleIndex,allowMissingTarget,useLowResIcon);
}
 else {
info=getShortcutInfo(c,context,titleIndex,cursorIconInfo);
if (intent.getAction() != null && intent.getCategories() != null && intent.getAction().equals(Intent.ACTION_MAIN) && intent.getCategories().contains(Intent.CATEGORY_LAUNCHER)) {
intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
}
}
if (info != null) {
info.id=id;
info.intent=intent;
info.container=container;
info.screenId=c.getInt(screenIndex);
info.cellX=c.getInt(cellXIndex);
info.cellY=c.getInt(cellYIndex);
info.rank=c.getInt(rankIndex);
info.spanX=1;
info.spanY=1;
info.intent.putExtra(ItemInfo.EXTRA_PROFILE,serialNumber);
if (info.promisedIntent != null) {
info.promisedIntent.putExtra(ItemInfo.EXTRA_PROFILE,serialNumber);
}
info.isDisabled=disabledState;
if (isSafeMode && !Utilities.isSystemApp(context,intent)) {
info.isDisabled|=ShortcutInfo.FLAG_DISABLED_SAFEMODE;
}
if (!checkItemPlacement(occupied,info,sBgWorkspaceScreens)) {
itemsToRemove.add(id);
break;
}
if (restored) {
ComponentName cn=info.getTargetComponent();
if (cn != null) {
Integer progress=installingPkgs.get(cn.getPackageName());
if (progress != null) {
info.setInstallProgress(progress);
}
 else {
info.status&=~ShortcutInfo.FLAG_INSTALL_SESSION_ACTIVE;
}
}
}
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
case LauncherSettings.Favorites.CONTAINER_HOTSEAT:
sBgWorkspaceItems.add(info);
break;
default :
FolderInfo folderInfo=findOrMakeFolder(sBgFolders,container);
folderInfo.add(info);
break;
}
sBgItemsIdMap.put(info.id,info);
}
 else {
throw new RuntimeException("Unexpected null ShortcutInfo");
}
break;
case LauncherSettings.Favorites.ITEM_TYPE_FOLDER:
id=c.getLong(idIndex);
FolderInfo folderInfo=findOrMakeFolder(sBgFolders,id);
folderInfo.title=c.getString(titleIndex);
folderInfo.id=id;
folderInfo.container=container;
folderInfo.screenId=c.getInt(screenIndex);
folderInfo.cellX=c.getInt(cellXIndex);
folderInfo.cellY=c.getInt(cellYIndex);
folderInfo.spanX=1;
folderInfo.spanY=1;
folderInfo.options=c.getInt(optionsIndex);
if (!checkItemPlacement(occupied,folderInfo,sBgWorkspaceScreens)) {
itemsToRemove.add(id);
break;
}
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
case LauncherSettings.Favorites.CONTAINER_HOTSEAT:
sBgWorkspaceItems.add(folderInfo);
break;
}
if (restored) {
restoredRows.add(id);
}
sBgItemsIdMap.put(folderInfo.id,folderInfo);
sBgFolders.put(folderInfo.id,folderInfo);
break;
case LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:
case LauncherSettings.Favorites.ITEM_TYPE_CUSTOM_APPWIDGET:
boolean customWidget=itemType == LauncherSettings.Favorites.ITEM_TYPE_CUSTOM_APPWIDGET;
int appWidgetId=c.getInt(appWidgetIdIndex);
serialNumber=c.getLong(profileIdIndex);
String savedProvider=c.getString(appWidgetProviderIndex);
id=c.getLong(idIndex);
user=allUsers.get(serialNumber);
if (user == null) {
itemsToRemove.add(id);
continue;
}
final ComponentName component=ComponentName.unflattenFromString(savedProvider);
final int restoreStatus=c.getInt(restoredIndex);
final boolean isIdValid=(restoreStatus & LauncherAppWidgetInfo.FLAG_ID_NOT_VALID) == 0;
final boolean wasProviderReady=(restoreStatus & LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY) == 0;
final LauncherAppWidgetProviderInfo provider=LauncherModel.getProviderInfo(context,ComponentName.unflattenFromString(savedProvider),user);
final boolean isProviderReady=isValidProvider(provider);
if (!isSafeMode && !customWidget && wasProviderReady&& !isProviderReady) {
String log="Deleting widget that isn't installed anymore: " + "id=" + id + " appWidgetId="+ appWidgetId;
Log.e(TAG,log);
Launcher.addDumpLog(TAG,log,false);
itemsToRemove.add(id);
}
 else {
if (isProviderReady) {
appWidgetInfo=new LauncherAppWidgetInfo(appWidgetId,provider.provider);
int status=restoreStatus & ~LauncherAppWidgetInfo.FLAG_RESTORE_STARTED;
if (!wasProviderReady) {
if (isIdValid) {
status=LauncherAppWidgetInfo.FLAG_UI_NOT_READY;
}
 else {
status&=~LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY;
}
}
appWidgetInfo.restoreStatus=status;
}
 else {
Log.v(TAG,"Widget restore pending id=" + id + " appWidgetId="+ appWidgetId+ " status ="+ restoreStatus);
appWidgetInfo=new LauncherAppWidgetInfo(appWidgetId,component);
appWidgetInfo.restoreStatus=restoreStatus;
Integer installProgress=installingPkgs.get(component.getPackageName());
if ((restoreStatus & LauncherAppWidgetInfo.FLAG_RESTORE_STARTED) != 0) {
}
 else if (installProgress != null) {
appWidgetInfo.restoreStatus|=LauncherAppWidgetInfo.FLAG_RESTORE_STARTED;
}
 else if (REMOVE_UNRESTORED_ICONS && !isSafeMode) {
Launcher.addDumpLog(TAG,"Unrestored widget removed: " + component,true);
itemsToRemove.add(id);
continue;
}
appWidgetInfo.installProgress=installProgress == null ? 0 : installProgress;
}
appWidgetInfo.id=id;
appWidgetInfo.screenId=c.getInt(screenIndex);
appWidgetInfo.cellX=c.getInt(cellXIndex);
appWidgetInfo.cellY=c.getInt(cellYIndex);
appWidgetInfo.spanX=c.getInt(spanXIndex);
appWidgetInfo.spanY=c.getInt(spanYIndex);
appWidgetInfo.user=user;
if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP && container != LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
Log.e(TAG,"Widget found where container != " + "CONTAINER_DESKTOP nor CONTAINER_HOTSEAT - ignoring!");
itemsToRemove.add(id);
continue;
}
appWidgetInfo.container=container;
if (!checkItemPlacement(occupied,appWidgetInfo,sBgWorkspaceScreens)) {
itemsToRemove.add(id);
break;
}
if (!customWidget) {
String providerName=appWidgetInfo.providerName.flattenToString();
if (!providerName.equals(savedProvider) || (appWidgetInfo.restoreStatus != restoreStatus)) {
ContentValues values=new ContentValues();
values.put(LauncherSettings.Favorites.APPWIDGET_PROVIDER,providerName);
values.put(LauncherSettings.Favorites.RESTORED,appWidgetInfo.restoreStatus);
updateItem(id,values);
}
}
sBgItemsIdMap.put(appWidgetInfo.id,appWidgetInfo);
sBgAppWidgets.add(appWidgetInfo);
}
break;
}
}
 catch (Exception e) {
Launcher.addDumpLog(TAG,"Desktop items loading interrupted",e,true);
}
}
}
  finally {
if (c != null) {
c.close();
}
}
if (mStopped) {
clearSBgDataStructures();
return;
}
if (itemsToRemove.size() > 0) {
contentResolver.delete(LauncherSettings.Favorites.CONTENT_URI,Utilities.createDbSelectionQuery(LauncherSettings.Favorites._ID,itemsToRemove),null);
if (DEBUG_LOADERS) {
Log.d(TAG,"Removed = " + Utilities.createDbSelectionQuery(LauncherSettings.Favorites._ID,itemsToRemove));
}
for (long folderId : LauncherAppState.getLauncherProvider().deleteEmptyFolders()) {
sBgWorkspaceItems.remove(sBgFolders.get(folderId));
sBgFolders.remove(folderId);
sBgItemsIdMap.remove(folderId);
}
}
for (FolderInfo folder : sBgFolders) {
Collections.sort(folder.contents,Folder.ITEM_POS_COMPARATOR);
int pos=0;
for (ShortcutInfo info : folder.contents) {
if (info.usingLowResIcon) {
info.updateIcon(mIconCache,false);
}
pos++;
if (pos >= FolderIcon.NUM_ITEMS_IN_PREVIEW) {
break;
}
}
}
if (restoredRows.size() > 0) {
ContentValues values=new ContentValues();
values.put(LauncherSettings.Favorites.RESTORED,0);
contentResolver.update(LauncherSettings.Favorites.CONTENT_URI,values,Utilities.createDbSelectionQuery(LauncherSettings.Favorites._ID,restoredRows),null);
}
if (!isSdCardReady && !sPendingPackages.isEmpty()) {
context.registerReceiver(new AppsAvailabilityCheck(),new IntentFilter(StartupReceiver.SYSTEM_READY),null,sWorker);
}
ArrayList<Long> unusedScreens=new ArrayList<Long>(sBgWorkspaceScreens);
for (ItemInfo item : sBgItemsIdMap) {
long screenId=item.screenId;
if (item.container == LauncherSettings.Favorites.CONTAINER_DESKTOP && unusedScreens.contains(screenId)) {
unusedScreens.remove(screenId);
}
}
if (unusedScreens.size() != 0) {
sBgWorkspaceScreens.removeAll(unusedScreens);
updateWorkspaceScreenOrder(context,sBgWorkspaceScreens);
}
if (DEBUG_LOADERS) {
Log.d(TAG,"loaded workspace in " + (SystemClock.uptimeMillis() - t) + "ms");
Log.d(TAG,"workspace layout: ");
int nScreens=occupied.size();
for (int y=0; y < countY; y++) {
String line="";
for (int i=0; i < nScreens; i++) {
long screenId=occupied.keyAt(i);
if (screenId > 0) {
line+=" | ";
}
ItemInfo[][] screen=occupied.valueAt(i);
for (int x=0; x < countX; x++) {
if (x < screen.length && y < screen[x].length) {
line+=(screen[x][y] != null) ? "#" : ".";
}
 else {
line+="!";
}
}
}
Log.d(TAG,"[ " + line + " ]");
}
}
}
}
