{
  LauncherAppState app=LauncherAppState.getInstance();
  InvariantDeviceProfile profile=app.getInvariantDeviceProfile();
  final int countX=profile.numColumns;
  final int countY=profile.numRows;
  long containerIndex=item.screenId;
  if (item.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
    if (mCallbacks == null || mCallbacks.get().isAllAppsButtonRank((int)item.screenId)) {
      Log.e(TAG,"Error loading shortcut into hotseat " + item + " into position ("+ item.screenId+ ":"+ item.cellX+ ","+ item.cellY+ ") occupied by all apps");
      return false;
    }
    final ItemInfo[][] hotseatItems=occupied.get((long)LauncherSettings.Favorites.CONTAINER_HOTSEAT);
    if (item.screenId >= profile.numHotseatIcons) {
      Log.e(TAG,"Error loading shortcut " + item + " into hotseat position "+ item.screenId+ ", position out of bounds: (0 to "+ (profile.numHotseatIcons - 1)+ ")");
      return false;
    }
    if (hotseatItems != null) {
      if (hotseatItems[(int)item.screenId][0] != null) {
        Log.e(TAG,"Error loading shortcut into hotseat " + item + " into position ("+ item.screenId+ ":"+ item.cellX+ ","+ item.cellY+ ") occupied by "+ occupied.get(LauncherSettings.Favorites.CONTAINER_HOTSEAT)[(int)item.screenId][0]);
        return false;
      }
 else {
        hotseatItems[(int)item.screenId][0]=item;
        return true;
      }
    }
 else {
      final ItemInfo[][] items=new ItemInfo[(int)profile.numHotseatIcons][1];
      items[(int)item.screenId][0]=item;
      occupied.put((long)LauncherSettings.Favorites.CONTAINER_HOTSEAT,items);
      return true;
    }
  }
 else   if (item.container == LauncherSettings.Favorites.CONTAINER_DESKTOP) {
    if (!workspaceScreens.contains((Long)item.screenId)) {
      return false;
    }
  }
 else {
    return true;
  }
  if (item.cellX < 0 || item.cellY < 0 || item.cellX + item.spanX > countX || item.cellY + item.spanY > countY) {
    if (!shouldResizeAndUpdateDB) {
      Log.e(TAG,"Error loading shortcut " + item + " into cell ("+ containerIndex+ "-"+ item.screenId+ ":"+ item.cellX+ ","+ item.cellY+ ") out of screen bounds ( "+ countX+ "x"+ countY+ ")");
      return false;
    }
    if (item.itemType != LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET) {
      item.cellX=0;
      item.cellY=0;
      item.screenId=1;
      item.wasMovedDueToReducedSpace=true;
      item.requiresDbUpdate=true;
    }
 else {
      if (item.minSpanX > countX || item.minSpanY > countY) {
        return false;
      }
      if (item.cellX + item.spanX > countX) {
        item.cellX=0;
        item.spanY=(item.spanY / 2) > 0 ? item.spanY / 2 : 1;
        item.spanX=item.minSpanX;
        item.requiresDbUpdate=true;
        item.wasMovedDueToReducedSpace=true;
      }
      if (item.cellY + item.spanY > countY) {
        item.cellY=0;
        item.spanY=countY;
        item.requiresDbUpdate=true;
        item.wasMovedDueToReducedSpace=true;
      }
      if (item.cellY + item.spanY == countY && item.cellX + item.spanX == countX) {
        item.screenId=sBgWorkspaceScreens.size() + 1;
      }
    }
  }
 else {
    item.wasMovedDueToReducedSpace=false;
    item.requiresDbUpdate=true;
  }
  if (!occupied.containsKey(item.screenId)) {
    ItemInfo[][] items=new ItemInfo[countX][countY];
    occupied.put(item.screenId,items);
  }
  ItemInfo[][] screens=occupied.get(item.screenId);
  for (int x=item.cellX; x < (item.cellX + item.spanX); x++) {
    for (int y=item.cellY; y < (item.cellY + item.spanY); y++) {
      if (screens[x][y] != null) {
        if (!shouldResizeAndUpdateDB) {
          Log.e(TAG,"Error loading shortcut " + item + " into cell ("+ containerIndex+ "-"+ item.screenId+ ":"+ x+ ","+ y+ ") occupied by "+ screens[x][y]);
          return false;
        }
        ItemInfo occupiedItem=screens[x][y];
        if (occupiedItem.wasMovedDueToReducedSpace || item.wasMovedDueToReducedSpace) {
          boolean freeFound=false;
          int nextX=0;
          int nextY=0;
          while (!freeFound) {
            if (screens[nextX][nextY] == null) {
              item.cellX=nextX;
              item.cellY=nextY;
              freeFound=true;
            }
 else {
              if (nextX + item.spanX == countX) {
                if (nextY + item.spanY == countY) {
                  item.screenId+=1;
                  nextY=0;
                  nextX=0;
                  if (!occupied.containsKey(item.screenId)) {
                    ItemInfo[][] items=new ItemInfo[countX][countY];
                    occupied.put(item.screenId,items);
                  }
                  screens=occupied.get(item.screenId);
                }
 else {
                  nextX=0;
                  nextY++;
                }
              }
 else {
                nextX++;
              }
            }
          }
        }
      }
    }
  }
  for (int x=item.cellX; x < (item.cellX + item.spanX); x++) {
    for (int y=item.cellY; y < (item.cellY + item.spanY); y++) {
      screens[x][y]=item;
      if (item.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET && shouldResizeAndUpdateDB) {
        for (int spanX=x; spanX < item.spanX; spanX++) {
          screens[spanX][y]=item;
          for (int spanY=y; spanY < item.spanX; spanY++) {
            screens[spanX][spanY]=item;
          }
        }
      }
    }
  }
  return true;
}
