{
  final Context context=mApp.getContext();
  final String[] packages=mPackages;
  final int N=packages.length;
switch (mOp) {
case OP_ADD:
    for (int i=0; i < N; i++) {
      if (DEBUG_LOADERS)       Log.d(TAG,"mAllAppsList.addPackage " + packages[i]);
      mBgAllAppsList.addPackage(context,packages[i]);
    }
  break;
case OP_UPDATE:
for (int i=0; i < N; i++) {
  if (DEBUG_LOADERS)   Log.d(TAG,"mAllAppsList.updatePackage " + packages[i]);
  mBgAllAppsList.updatePackage(context,packages[i]);
  WidgetPreviewLoader.removePackageFromDb(mApp.getWidgetPreviewCacheDb(),packages[i]);
}
break;
case OP_REMOVE:
case OP_UNAVAILABLE:
for (int i=0; i < N; i++) {
if (DEBUG_LOADERS) Log.d(TAG,"mAllAppsList.removePackage " + packages[i]);
mBgAllAppsList.removePackage(packages[i]);
WidgetPreviewLoader.removePackageFromDb(mApp.getWidgetPreviewCacheDb(),packages[i]);
}
break;
}
ArrayList<AppInfo> added=null;
ArrayList<AppInfo> modified=null;
final ArrayList<AppInfo> removedApps=new ArrayList<AppInfo>();
if (mBgAllAppsList.added.size() > 0) {
added=new ArrayList<AppInfo>(mBgAllAppsList.added);
mBgAllAppsList.added.clear();
}
if (mBgAllAppsList.modified.size() > 0) {
modified=new ArrayList<AppInfo>(mBgAllAppsList.modified);
mBgAllAppsList.modified.clear();
}
if (mBgAllAppsList.removed.size() > 0) {
removedApps.addAll(mBgAllAppsList.removed);
mBgAllAppsList.removed.clear();
}
final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
if (callbacks == null) {
Log.w(TAG,"Nobody to tell about the new app.  Launcher is probably loading.");
return;
}
if (added != null) {
Callbacks cb=mCallbacks != null ? mCallbacks.get() : null;
if (!AppsCustomizePagedView.DISABLE_ALL_APPS) {
addAndBindAddedApps(context,new ArrayList<ItemInfo>(),cb,added);
}
 else {
final ArrayList<ItemInfo> addedInfos=new ArrayList<ItemInfo>(added);
addAndBindAddedApps(context,addedInfos,cb,added);
}
}
if (modified != null) {
final ArrayList<AppInfo> modifiedFinal=modified;
for (AppInfo a : modifiedFinal) {
ArrayList<ItemInfo> infos=getItemInfoForComponentName(a.componentName);
for (ItemInfo i : infos) {
if (isShortcutInfoUpdateable(i)) {
ShortcutInfo info=(ShortcutInfo)i;
info.title=a.title.toString();
updateItemInDatabase(context,info);
}
}
}
mHandler.post(new Runnable(){
public void run(){
Callbacks cb=mCallbacks != null ? mCallbacks.get() : null;
if (callbacks == cb && cb != null) {
callbacks.bindAppsUpdated(modifiedFinal);
}
}
}
);
}
final ArrayList<String> removedPackageNames=new ArrayList<String>();
if (mOp == OP_REMOVE) {
removedPackageNames.addAll(Arrays.asList(packages));
}
 else if (mOp == OP_UPDATE) {
final PackageManager pm=context.getPackageManager();
for (int i=0; i < N; i++) {
if (isPackageDisabled(pm,packages[i])) {
removedPackageNames.add(packages[i]);
}
}
}
for (String pn : removedPackageNames) {
ArrayList<ItemInfo> infos=getItemInfoForPackageName(pn);
for (ItemInfo i : infos) {
deleteItemFromDatabase(context,i);
}
}
for (AppInfo a : removedApps) {
ArrayList<ItemInfo> infos=getItemInfoForComponentName(a.componentName);
for (ItemInfo i : infos) {
deleteItemFromDatabase(context,i);
}
}
if (!removedPackageNames.isEmpty() || !removedApps.isEmpty()) {
String spKey=LauncherAppState.getSharedPreferencesKey();
SharedPreferences sp=context.getSharedPreferences(spKey,Context.MODE_PRIVATE);
InstallShortcutReceiver.removeFromInstallQueue(sp,removedPackageNames);
mHandler.post(new Runnable(){
public void run(){
Callbacks cb=mCallbacks != null ? mCallbacks.get() : null;
if (callbacks == cb && cb != null) {
callbacks.bindComponentsRemoved(removedPackageNames,removedApps);
}
}
}
);
}
final ArrayList<Object> widgetsAndShortcuts=getSortedWidgetsAndShortcuts(context);
mHandler.post(new Runnable(){
@Override public void run(){
Callbacks cb=mCallbacks != null ? mCallbacks.get() : null;
if (callbacks == cb && cb != null) {
callbacks.bindPackagesUpdated(widgetsAndShortcuts);
}
}
}
);
mHandler.post(new Runnable(){
public void run(){
Callbacks cb=mCallbacks != null ? mCallbacks.get() : null;
if (callbacks == cb && cb != null) {
callbacks.dumpLogsToLocalData();
}
}
}
);
}
