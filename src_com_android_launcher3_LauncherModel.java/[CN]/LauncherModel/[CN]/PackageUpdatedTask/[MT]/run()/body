{
  final Context context=mApp.getContext();
  final String[] packages=mPackages;
  final int N=packages.length;
switch (mOp) {
case OP_ADD:
    for (int i=0; i < N; i++) {
      if (DEBUG_LOADERS)       Log.d(TAG,"mAllAppsList.addPackage " + packages[i]);
      mIconCache.updateIconsForPkg(packages[i],mUser);
      mBgAllAppsList.addPackage(context,packages[i],mUser);
    }
  if (ADD_MANAGED_PROFILE_SHORTCUTS && !UserHandleCompat.myUserHandle().equals(mUser)) {
    SharedPreferences prefs=context.getSharedPreferences(LauncherAppState.getSharedPreferencesKey(),Context.MODE_PRIVATE);
    String shortcutsSetKey=INSTALLED_SHORTCUTS_SET_PREFIX + mUserManager.getSerialNumberForUser(mUser);
    Set<String> shortcutSet=new HashSet<String>(prefs.getStringSet(shortcutsSetKey,Collections.EMPTY_SET));
    for (int i=0; i < N; i++) {
      if (!shortcutSet.contains(packages[i])) {
        shortcutSet.add(packages[i]);
        List<LauncherActivityInfoCompat> activities=mLauncherApps.getActivityList(packages[i],mUser);
        if (activities != null && !activities.isEmpty()) {
          InstallShortcutReceiver.queueInstallShortcut(activities.get(0),context);
        }
      }
    }
    prefs.edit().putStringSet(shortcutsSetKey,shortcutSet).commit();
  }
break;
case OP_UPDATE:
for (int i=0; i < N; i++) {
if (DEBUG_LOADERS) Log.d(TAG,"mAllAppsList.updatePackage " + packages[i]);
mIconCache.updateIconsForPkg(packages[i],mUser);
mBgAllAppsList.updatePackage(context,packages[i],mUser);
WidgetPreviewLoader.removePackageFromDb(mApp.getWidgetPreviewCacheDb(),packages[i]);
}
break;
case OP_REMOVE:
if (ADD_MANAGED_PROFILE_SHORTCUTS && !UserHandleCompat.myUserHandle().equals(mUser)) {
SharedPreferences prefs=context.getSharedPreferences(LauncherAppState.getSharedPreferencesKey(),Context.MODE_PRIVATE);
String shortcutsSetKey=INSTALLED_SHORTCUTS_SET_PREFIX + mUserManager.getSerialNumberForUser(mUser);
HashSet<String> shortcutSet=new HashSet<String>(prefs.getStringSet(shortcutsSetKey,Collections.EMPTY_SET));
shortcutSet.removeAll(Arrays.asList(mPackages));
prefs.edit().putStringSet(shortcutsSetKey,shortcutSet).commit();
}
for (int i=0; i < N; i++) {
if (DEBUG_LOADERS) Log.d(TAG,"mAllAppsList.removePackage " + packages[i]);
mIconCache.removeIconsForPkg(packages[i],mUser);
}
case OP_UNAVAILABLE:
for (int i=0; i < N; i++) {
if (DEBUG_LOADERS) Log.d(TAG,"mAllAppsList.removePackage " + packages[i]);
mBgAllAppsList.removePackage(packages[i],mUser);
WidgetPreviewLoader.removePackageFromDb(mApp.getWidgetPreviewCacheDb(),packages[i]);
}
break;
}
ArrayList<AppInfo> added=null;
ArrayList<AppInfo> modified=null;
final ArrayList<AppInfo> removedApps=new ArrayList<AppInfo>();
if (mBgAllAppsList.added.size() > 0) {
added=new ArrayList<AppInfo>(mBgAllAppsList.added);
mBgAllAppsList.added.clear();
}
if (mBgAllAppsList.modified.size() > 0) {
modified=new ArrayList<AppInfo>(mBgAllAppsList.modified);
mBgAllAppsList.modified.clear();
}
if (mBgAllAppsList.removed.size() > 0) {
removedApps.addAll(mBgAllAppsList.removed);
mBgAllAppsList.removed.clear();
}
final Callbacks callbacks=getCallback();
if (callbacks == null) {
Log.w(TAG,"Nobody to tell about the new app.  Launcher is probably loading.");
return;
}
final HashMap<ComponentName,AppInfo> addedOrUpdatedApps=new HashMap<ComponentName,AppInfo>();
if (added != null) {
if (LauncherAppState.isDisableAllApps()) {
final ArrayList<ItemInfo> addedInfos=new ArrayList<ItemInfo>(added);
addAndBindAddedWorkspaceApps(context,addedInfos);
}
 else {
addAppsToAllApps(context,added);
}
for (AppInfo ai : added) {
addedOrUpdatedApps.put(ai.componentName,ai);
}
}
if (modified != null) {
final ArrayList<AppInfo> modifiedFinal=modified;
for (AppInfo ai : modified) {
addedOrUpdatedApps.put(ai.componentName,ai);
}
mHandler.post(new Runnable(){
public void run(){
Callbacks cb=getCallback();
if (callbacks == cb && cb != null) {
callbacks.bindAppsUpdated(modifiedFinal);
}
}
}
);
}
if (mOp == OP_ADD || mOp == OP_UPDATE) {
final ArrayList<ShortcutInfo> updatedShortcuts=new ArrayList<ShortcutInfo>();
final ArrayList<ShortcutInfo> removedShortcuts=new ArrayList<ShortcutInfo>();
final ArrayList<LauncherAppWidgetInfo> widgets=new ArrayList<LauncherAppWidgetInfo>();
HashSet<String> packageSet=new HashSet<String>(Arrays.asList(packages));
synchronized (sBgLock) {
for (ItemInfo info : sBgItemsIdMap.values()) {
if (info instanceof ShortcutInfo && mUser.equals(info.user)) {
ShortcutInfo si=(ShortcutInfo)info;
boolean infoUpdated=false;
boolean shortcutUpdated=false;
if ((si.iconResource != null) && packageSet.contains(si.iconResource.packageName)) {
Bitmap icon=Utilities.createIconBitmap(si.iconResource.packageName,si.iconResource.resourceName,mIconCache,context);
if (icon != null) {
si.setIcon(icon);
si.usingFallbackIcon=false;
infoUpdated=true;
}
}
ComponentName cn=si.getTargetComponent();
if (cn != null && packageSet.contains(cn.getPackageName())) {
AppInfo appInfo=addedOrUpdatedApps.get(cn);
if (si.isPromise()) {
if (si.hasStatusFlag(ShortcutInfo.FLAG_AUTOINTALL_ICON)) {
PackageManager pm=context.getPackageManager();
ResolveInfo matched=pm.resolveActivity(new Intent(Intent.ACTION_MAIN).setComponent(cn).addCategory(Intent.CATEGORY_LAUNCHER),PackageManager.MATCH_DEFAULT_ONLY);
if (matched == null) {
Intent intent=pm.getLaunchIntentForPackage(cn.getPackageName());
if (intent != null) {
  cn=intent.getComponent();
  appInfo=addedOrUpdatedApps.get(cn);
}
if ((intent == null) || (appInfo == null)) {
  removedShortcuts.add(si);
  continue;
}
si.promisedIntent=intent;
}
}
si.intent=si.promisedIntent;
si.promisedIntent=null;
si.status&=~ShortcutInfo.FLAG_RESTORED_ICON & ~ShortcutInfo.FLAG_AUTOINTALL_ICON & ~ShortcutInfo.FLAG_INSTALL_SESSION_ACTIVE;
infoUpdated=true;
si.updateIcon(mIconCache);
}
if (appInfo != null && Intent.ACTION_MAIN.equals(si.intent.getAction()) && si.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION) {
si.updateIcon(mIconCache);
si.title=appInfo.title.toString();
si.contentDescription=appInfo.contentDescription;
infoUpdated=true;
}
if ((si.isDisabled & ShortcutInfo.FLAG_DISABLED_NOT_AVAILABLE) != 0) {
si.isDisabled&=~ShortcutInfo.FLAG_DISABLED_NOT_AVAILABLE;
shortcutUpdated=true;
}
}
if (infoUpdated || shortcutUpdated) {
updatedShortcuts.add(si);
}
if (infoUpdated) {
updateItemInDatabase(context,si);
}
}
 else if (info instanceof LauncherAppWidgetInfo) {
LauncherAppWidgetInfo widgetInfo=(LauncherAppWidgetInfo)info;
if (mUser.equals(widgetInfo.user) && widgetInfo.hasRestoreFlag(LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY) && packageSet.contains(widgetInfo.providerName.getPackageName())) {
widgetInfo.restoreStatus&=~LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY;
widgets.add(widgetInfo);
updateItemInDatabase(context,widgetInfo);
}
}
}
}
if (!updatedShortcuts.isEmpty() || !removedShortcuts.isEmpty()) {
mHandler.post(new Runnable(){
public void run(){
Callbacks cb=getCallback();
if (callbacks == cb && cb != null) {
callbacks.bindShortcutsChanged(updatedShortcuts,removedShortcuts,mUser);
}
}
}
);
if (!removedShortcuts.isEmpty()) {
deleteItemsFromDatabase(context,removedShortcuts);
}
}
if (!widgets.isEmpty()) {
mHandler.post(new Runnable(){
public void run(){
Callbacks cb=getCallback();
if (callbacks == cb && cb != null) {
callbacks.bindWidgetsRestored(widgets);
}
}
}
);
}
}
final ArrayList<String> removedPackageNames=new ArrayList<String>();
if (mOp == OP_REMOVE || mOp == OP_UNAVAILABLE) {
removedPackageNames.addAll(Arrays.asList(packages));
}
 else if (mOp == OP_UPDATE) {
for (int i=0; i < N; i++) {
if (isPackageDisabled(context,packages[i],mUser)) {
removedPackageNames.add(packages[i]);
}
}
}
if (!removedPackageNames.isEmpty() || !removedApps.isEmpty()) {
final int removeReason;
if (mOp == OP_UNAVAILABLE) {
removeReason=ShortcutInfo.FLAG_DISABLED_NOT_AVAILABLE;
}
 else {
for (String pn : removedPackageNames) {
deletePackageFromDatabase(context,pn,mUser);
}
for (AppInfo a : removedApps) {
ArrayList<ItemInfo> infos=getItemInfoForComponentName(a.componentName,mUser);
deleteItemsFromDatabase(context,infos);
}
removeReason=0;
}
InstallShortcutReceiver.removeFromInstallQueue(context,removedPackageNames,mUser);
mHandler.post(new Runnable(){
public void run(){
Callbacks cb=getCallback();
if (callbacks == cb && cb != null) {
callbacks.bindComponentsRemoved(removedPackageNames,removedApps,mUser,removeReason);
}
}
}
);
}
final ArrayList<Object> widgetsAndShortcuts=getSortedWidgetsAndShortcuts(context);
mHandler.post(new Runnable(){
@Override public void run(){
Callbacks cb=getCallback();
if (callbacks == cb && cb != null) {
callbacks.bindPackagesUpdated(widgetsAndShortcuts);
}
}
}
);
mHandler.post(new Runnable(){
public void run(){
Callbacks cb=getCallback();
if (callbacks == cb && cb != null) {
callbacks.dumpLogsToLocalData();
}
}
}
);
}
