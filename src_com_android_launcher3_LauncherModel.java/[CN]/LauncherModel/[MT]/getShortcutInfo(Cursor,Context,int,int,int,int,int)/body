{
  Bitmap icon=null;
  final ShortcutInfo info=new ShortcutInfo();
  info.user=UserHandleCompat.myUserHandle();
  info.itemType=LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT;
  info.title=c.getString(titleIndex);
  int iconType=c.getInt(iconTypeIndex);
switch (iconType) {
case LauncherSettings.Favorites.ICON_TYPE_RESOURCE:
    String packageName=c.getString(iconPackageIndex);
  String resourceName=c.getString(iconResourceIndex);
PackageManager packageManager=context.getPackageManager();
info.customIcon=false;
try {
Resources resources=packageManager.getResourcesForApplication(packageName);
if (resources != null) {
final int id=resources.getIdentifier(resourceName,null,null);
icon=Utilities.createIconBitmap(mIconCache.getFullResIcon(resources,id),context);
}
}
 catch (Exception e) {
}
if (icon == null) {
icon=getIconFromCursor(c,iconIndex,context);
}
if (icon == null) {
icon=mIconCache.getDefaultIcon(info.user);
info.usingFallbackIcon=true;
}
break;
case LauncherSettings.Favorites.ICON_TYPE_BITMAP:
icon=getIconFromCursor(c,iconIndex,context);
if (icon == null) {
icon=mIconCache.getDefaultIcon(info.user);
info.customIcon=false;
info.usingFallbackIcon=true;
}
 else {
info.customIcon=true;
}
break;
default :
icon=mIconCache.getDefaultIcon(info.user);
info.usingFallbackIcon=true;
info.customIcon=false;
break;
}
info.setIcon(icon);
return info;
}
