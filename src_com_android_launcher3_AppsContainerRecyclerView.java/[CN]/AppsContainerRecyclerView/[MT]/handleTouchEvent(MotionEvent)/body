{
  ViewConfiguration config=ViewConfiguration.get(getContext());
  int action=ev.getAction();
  int x=(int)ev.getX();
  int y=(int)ev.getY();
switch (action) {
case MotionEvent.ACTION_DOWN:
    mDownX=mLastX=x;
  mDownY=mLastY=y;
stopScroll();
break;
case MotionEvent.ACTION_MOVE:
if (!mDraggingFastScroller && isPointNearScrollbar(mDownX,mDownY) && Math.abs(y - mDownY) > config.getScaledTouchSlop()) {
getParent().requestDisallowInterceptTouchEvent(true);
mDraggingFastScroller=true;
animateFastScrollerVisibility(true);
}
if (mDraggingFastScroller) {
mLastX=x;
mLastY=y;
int top=getPaddingTop() + (mFastScrollerBg.getBounds().height() / 2);
int bottom=getHeight() - getPaddingBottom() - (mFastScrollerBg.getBounds().height() / 2);
float boundedY=(float)Math.max(top,Math.min(bottom,y));
mFastScrollSectionName=scrollToPositionAtProgress((boundedY - top) / (bottom - top));
invalidateFastScroller();
}
break;
case MotionEvent.ACTION_UP:
ViewConfiguration viewConfig=ViewConfiguration.get(getContext());
float dx=ev.getX() - mDownX;
float dy=ev.getY() - mDownY;
float distance=(float)Math.sqrt(dx * dx + dy * dy);
if (distance < viewConfig.getScaledTouchSlop()) {
Rect backgroundPadding=new Rect();
getBackground().getPadding(backgroundPadding);
boolean isOutsideBounds=ev.getX() < backgroundPadding.left || ev.getX() > (getWidth() - backgroundPadding.right);
if (isOutsideBounds) {
Launcher launcher=(Launcher)getContext();
launcher.showWorkspace(true);
}
}
case MotionEvent.ACTION_CANCEL:
mDraggingFastScroller=false;
animateFastScrollerVisibility(false);
break;
}
return mDraggingFastScroller;
}
