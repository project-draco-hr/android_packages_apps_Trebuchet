{
  int x;
  int y;
  boolean isRtl=(getResources().getConfiguration().getLayoutDirection() == LAYOUT_DIRECTION_RTL);
  if (mApps.getApps().isEmpty()) {
    mVerticalScrollbarBounds.setEmpty();
    return;
  }
  int rowIndex=-1;
  int rowTopOffset=-1;
  int rowHeight=-1;
  int rowCount=getNumRows();
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    int position=getChildPosition(child);
    if (position != NO_POSITION) {
      AppInfo info=mApps.getApps().get(position);
      if (info != AlphabeticalAppsList.SECTION_BREAK_INFO) {
        int appIndex=mApps.getAppsWithoutSectionBreaks().indexOf(info);
        rowIndex=findRowForAppIndex(appIndex);
        rowTopOffset=getLayoutManager().getDecoratedTop(child);
        rowHeight=child.getHeight();
        break;
      }
    }
  }
  if (rowIndex != -1) {
    int height=getHeight() - getPaddingTop() - getPaddingBottom();
    int totalScrollHeight=rowCount * rowHeight;
    if (totalScrollHeight > height) {
      int scrollbarHeight=Math.max(mScrollbarMinHeight,(int)(height / ((float)totalScrollHeight / height)));
      if (isRtl) {
        x=getPaddingLeft();
      }
 else {
        x=getWidth() - getPaddingRight() - mScrollbarWidth;
      }
      int availableY=totalScrollHeight - height;
      int availableScrollY=height - scrollbarHeight;
      y=(rowIndex * rowHeight) - rowTopOffset;
      y=getPaddingTop() + (int)(((float)(getPaddingTop() + y) / availableY) * availableScrollY);
      mVerticalScrollbarBounds.set(x,y,x + mScrollbarWidth,y + scrollbarHeight);
      return;
    }
  }
  mVerticalScrollbarBounds.setEmpty();
}
