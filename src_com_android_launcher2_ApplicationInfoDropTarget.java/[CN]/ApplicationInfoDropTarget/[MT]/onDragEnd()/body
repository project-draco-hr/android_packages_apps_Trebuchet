{
  if (!mDragAndDropEnabled)   return;
  if (mActive)   mActive=false;
  if (mFadeAnimator != null)   mFadeAnimator.cancel();
  mFadeAnimator=new AnimatorSet();
  Animator infoButtonAnimator=ObjectAnimator.ofFloat(this,"alpha",0.0f);
  infoButtonAnimator.setDuration(sFadeOutAnimationDuration);
  mFadeAnimator.addListener(new AnimatorListener(){
    public void onAnimationStart(    Animator animation){
    }
    public void onAnimationRepeat(    Animator animation){
    }
    public void onAnimationEnd(    Animator animation){
      onEndOrCancel();
    }
    public void onAnimationCancel(    Animator animation){
      onEndOrCancel();
    }
    private void onEndOrCancel(){
      setVisibility(GONE);
      mFadeAnimator=null;
    }
  }
);
  mFadeAnimator.play(infoButtonAnimator);
  if (mOverlappingViews != null) {
    for (    View view : mOverlappingViews) {
      if (view.isEnabled()) {
        ObjectAnimator oa=ObjectAnimator.ofFloat(view,"alpha",1.0f);
        oa.setDuration(sFadeInAnimationDuration);
        mFadeAnimator.play(oa);
        view.setVisibility(VISIBLE);
      }
    }
  }
  mFadeAnimator.start();
}
