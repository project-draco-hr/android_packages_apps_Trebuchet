{
  if (info != null && mDragAndDropEnabled) {
    final int itemType=((ItemInfo)info).itemType;
    mActive=(itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION);
    if (mActive) {
      if (mFadeAnimator != null)       mFadeAnimator.cancel();
      mFadeAnimator=new AnimatorSet();
      Animator infoButtonAnimator=ObjectAnimator.ofFloat(this,"alpha",0.0f,1.0f);
      infoButtonAnimator.setDuration(sFadeInAnimationDuration);
      if (mHandle == mLauncher.findViewById(R.id.configure_button)) {
        final View divider=mLauncher.findViewById(R.id.divider_during_drag);
        divider.setVisibility(VISIBLE);
        Animator dividerAnimator=ObjectAnimator.ofFloat(divider,"alpha",1.0f);
        dividerAnimator.setDuration(sFadeInAnimationDuration);
        mFadeAnimator.play(infoButtonAnimator).with(dividerAnimator);
      }
 else {
        mFadeAnimator.play(infoButtonAnimator);
      }
      mFadeAnimator.start();
      setVisibility(VISIBLE);
      if (mHandle != null) {
        mHandleWasVisibleOnDragStart=mHandle.getVisibility() == VISIBLE;
        if (mHandleFadeAnimator != null)         mHandleFadeAnimator.cancel();
        mHandleFadeAnimator=ObjectAnimator.ofFloat(mHandle,"alpha",0.0f);
        mHandleFadeAnimator.setDuration(sFadeOutAnimationDuration);
        mHandleFadeAnimator.addListener(new AnimatorListener(){
          public void onAnimationStart(          Animator animation){
          }
          public void onAnimationRepeat(          Animator animation){
          }
          public void onAnimationEnd(          Animator animation){
            onEndOrCancel();
          }
          public void onAnimationCancel(          Animator animation){
            onEndOrCancel();
          }
          private void onEndOrCancel(){
            mHandle.setVisibility(INVISIBLE);
            mHandleFadeAnimator=null;
          }
        }
);
        mHandleFadeAnimator.start();
      }
    }
  }
}
