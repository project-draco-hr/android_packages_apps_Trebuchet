{
  mTempWallpaperTiles.add(uri);
  final FrameLayout pickedImageThumbnail=(FrameLayout)getLayoutInflater().inflate(R.layout.wallpaper_picker_item,mWallpapersView,false);
  pickedImageThumbnail.setVisibility(View.GONE);
  setWallpaperItemPaddingToZero(pickedImageThumbnail);
  mWallpapersView.addView(pickedImageThumbnail,0);
  final ImageView image=(ImageView)pickedImageThumbnail.findViewById(R.id.wallpaper_image);
  final Point defaultSize=getDefaultThumbnailSize(this.getResources());
  final Context context=this;
  new AsyncTask<Void,Bitmap,Bitmap>(){
    protected Bitmap doInBackground(    Void... args){
      int rotation=WallpaperCropActivity.getRotationFromExif(context,uri);
      return createThumbnail(defaultSize,context,uri,null,null,0,rotation,false);
    }
    protected void onPostExecute(    Bitmap thumb){
      if (thumb != null) {
        image.setImageBitmap(thumb);
        Drawable thumbDrawable=image.getDrawable();
        thumbDrawable.setDither(true);
        pickedImageThumbnail.setVisibility(View.VISIBLE);
      }
 else {
        Log.e(TAG,"Error loading thumbnail for uri=" + uri);
      }
    }
  }
.execute();
  UriWallpaperInfo info=new UriWallpaperInfo(uri);
  pickedImageThumbnail.setTag(info);
  info.setView(pickedImageThumbnail);
  addLongPressHandler(pickedImageThumbnail);
  updateTileIndices();
  pickedImageThumbnail.setOnClickListener(mThumbnailOnClickListener);
  if (!fromRestore) {
    mThumbnailOnClickListener.onClick(pickedImageThumbnail);
  }
}
