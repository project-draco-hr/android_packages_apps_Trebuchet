{
  int action=event.getActionMasked();
  final boolean pointerUp=action == MotionEvent.ACTION_POINTER_UP;
  final int skipIndex=pointerUp ? event.getActionIndex() : -1;
  float sumX=0, sumY=0;
  final int count=event.getPointerCount();
  for (int i=0; i < count; i++) {
    if (skipIndex == i)     continue;
    sumX+=event.getX(i);
    sumY+=event.getY(i);
  }
  final int div=pointerUp ? count - 1 : count;
  float x=sumX / div;
  float y=sumY / div;
synchronized (mLock) {
    mScaleGestureDetector.onTouchEvent(event);
switch (action) {
case MotionEvent.ACTION_MOVE:
      mRenderer.centerX+=(mLastX - x) / mRenderer.scale;
    mRenderer.centerY+=(mLastY - y) / mRenderer.scale;
  invalidate();
break;
}
if (mRenderer.source != null) {
final float width=getWidth();
final float height=getHeight();
final float imageWidth=mRenderer.source.getImageWidth();
final float imageHeight=mRenderer.source.getImageHeight();
final float scale=mRenderer.scale;
float centerX=(width / 2f - mRenderer.centerX + (imageWidth - width) / 2f) * scale + width / 2f;
float centerY=(height / 2f - mRenderer.centerY + (imageHeight - height) / 2f) * scale + height / 2f;
float leftEdge=centerX - imageWidth / 2f * scale;
float rightEdge=centerX + imageWidth / 2f * scale;
float topEdge=centerY - imageHeight / 2f * scale;
float bottomEdge=centerY + imageHeight / 2f * scale;
if (leftEdge > 0) {
mRenderer.centerX+=Math.ceil(leftEdge / scale);
}
if (rightEdge < getWidth()) {
mRenderer.centerX+=(rightEdge - getWidth()) / scale;
}
if (topEdge > 0) {
mRenderer.centerY+=Math.ceil(topEdge / scale);
}
if (bottomEdge < getHeight()) {
mRenderer.centerY+=(bottomEdge - getHeight()) / scale;
}
}
}
mLastX=x;
mLastY=y;
return true;
}
