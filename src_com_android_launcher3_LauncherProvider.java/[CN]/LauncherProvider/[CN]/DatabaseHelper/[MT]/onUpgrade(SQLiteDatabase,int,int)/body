{
  if (LOGD)   Log.d(TAG,"onUpgrade triggered: " + oldVersion);
  int version=oldVersion;
  if (version < 3) {
    db.beginTransaction();
    try {
      db.execSQL("ALTER TABLE favorites " + "ADD COLUMN appWidgetId INTEGER NOT NULL DEFAULT -1;");
      db.setTransactionSuccessful();
      version=3;
    }
 catch (    SQLException ex) {
      Log.e(TAG,ex.getMessage(),ex);
    }
 finally {
      db.endTransaction();
    }
    if (version == 3) {
      convertWidgets(db);
    }
  }
  if (version < 4) {
    version=4;
  }
  if (version < 6) {
    db.beginTransaction();
    try {
      db.execSQL("UPDATE favorites SET screen=(screen + 1);");
      db.setTransactionSuccessful();
    }
 catch (    SQLException ex) {
      Log.e(TAG,ex.getMessage(),ex);
    }
 finally {
      db.endTransaction();
    }
    if (updateContactsShortcuts(db)) {
      version=6;
    }
  }
  if (version < 7) {
    convertWidgets(db);
    version=7;
  }
  if (version < 8) {
    normalizeIcons(db);
    version=8;
  }
  if (version < 9) {
    if (mMaxItemId == -1) {
      mMaxItemId=initializeMaxItemId(db);
    }
    loadFavorites(db,R.xml.update_workspace);
    version=9;
  }
  if (version < 12) {
    updateContactsShortcuts(db);
    version=12;
  }
  if (version < 13) {
    mMaxScreenId=0;
    sJustLoadedFromOldDb=true;
    addWorkspacesTable(db);
    version=13;
  }
  if (version < 14) {
    db.beginTransaction();
    try {
      db.execSQL("ALTER TABLE favorites " + "ADD COLUMN appWidgetProvider TEXT;");
      db.setTransactionSuccessful();
      version=14;
    }
 catch (    SQLException ex) {
      Log.e(TAG,ex.getMessage(),ex);
    }
 finally {
      db.endTransaction();
    }
  }
  if (version < 15) {
    db.beginTransaction();
    try {
      db.execSQL("ALTER TABLE favorites " + "ADD COLUMN modified INTEGER NOT NULL DEFAULT 0;");
      db.execSQL("ALTER TABLE workspaceScreens " + "ADD COLUMN modified INTEGER NOT NULL DEFAULT 0;");
      db.setTransactionSuccessful();
      version=15;
    }
 catch (    SQLException ex) {
      Log.e(TAG,ex.getMessage(),ex);
    }
 finally {
      db.endTransaction();
    }
  }
  if (version < 16) {
    db.beginTransaction();
    try {
      db.execSQL("ALTER TABLE favorites " + "ADD COLUMN restored INTEGER NOT NULL DEFAULT 0;");
      db.setTransactionSuccessful();
      version=16;
    }
 catch (    SQLException ex) {
      Log.e(TAG,ex.getMessage(),ex);
    }
 finally {
      db.endTransaction();
    }
  }
  if (version < 17) {
    LauncherClings.synchonouslyMarkFirstRunClingDismissed(mContext);
    version=17;
  }
  if (version < 18) {
    version=18;
  }
  if (version < 19) {
    removeOrphanedItems(db);
    version=19;
  }
  if (version < 20) {
    if (addProfileColumn(db)) {
      version=20;
    }
  }
  if (version != DATABASE_VERSION) {
    Log.w(TAG,"Destroying all old data.");
    db.execSQL("DROP TABLE IF EXISTS " + TABLE_FAVORITES);
    db.execSQL("DROP TABLE IF EXISTS " + TABLE_WORKSPACE_SCREENS);
    onCreate(db);
  }
}
