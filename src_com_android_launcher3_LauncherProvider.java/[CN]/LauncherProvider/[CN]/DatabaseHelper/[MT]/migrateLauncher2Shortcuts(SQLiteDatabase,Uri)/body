{
  final ContentResolver resolver=mContext.getContentResolver();
  Cursor c=null;
  int count=0;
  int curScreen=0;
  try {
    c=resolver.query(uri,null,null,null,"title ASC");
  }
 catch (  Exception e) {
  }
  if (c != null) {
    try {
      if (c.getCount() > 0) {
        final int idIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites._ID);
        final int intentIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.INTENT);
        final int titleIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.TITLE);
        final int iconTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_TYPE);
        final int iconIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON);
        final int iconPackageIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_PACKAGE);
        final int iconResourceIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_RESOURCE);
        final int containerIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CONTAINER);
        final int itemTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ITEM_TYPE);
        final int screenIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SCREEN);
        final int cellXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLX);
        final int cellYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLY);
        final int uriIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.URI);
        final int displayModeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.DISPLAY_MODE);
        int i=0;
        int curX=0;
        int curY=0;
        final LauncherAppState app=LauncherAppState.getInstance();
        final DeviceProfile grid=app.getDynamicGrid().getDeviceProfile();
        final int width=(int)grid.numColumns;
        final int height=(int)grid.numRows;
        final int hotseatWidth=(int)grid.numHotseatIcons;
        PackageManager pm=mContext.getPackageManager();
        final HashSet<String> seenIntents=new HashSet<String>(c.getCount());
        final ArrayList<ContentValues> shortcuts=new ArrayList<ContentValues>();
        final ArrayList<ContentValues> folders=new ArrayList<ContentValues>();
        final SparseArray<ContentValues> hotseat=new SparseArray<ContentValues>();
        while (c.moveToNext()) {
          final int itemType=c.getInt(itemTypeIndex);
          if (itemType != Favorites.ITEM_TYPE_APPLICATION && itemType != Favorites.ITEM_TYPE_SHORTCUT && itemType != Favorites.ITEM_TYPE_FOLDER) {
            continue;
          }
          final int cellX=c.getInt(cellXIndex);
          final int cellY=c.getInt(cellYIndex);
          final int screen=c.getInt(screenIndex);
          int container=c.getInt(containerIndex);
          final String intentStr=c.getString(intentIndex);
          Launcher.addDumpLog(TAG,"migrating \"" + c.getString(titleIndex) + "\" ("+ cellX+ ","+ cellY+ "@"+ LauncherSettings.Favorites.containerToString(container)+ "/"+ screen+ "): "+ intentStr,true);
          if (itemType != Favorites.ITEM_TYPE_FOLDER) {
            final Intent intent;
            final ComponentName cn;
            try {
              intent=Intent.parseUri(intentStr,0);
            }
 catch (            URISyntaxException e) {
              Launcher.addDumpLog(TAG,"skipping invalid intent uri",true);
              continue;
            }
            cn=intent.getComponent();
            if (TextUtils.isEmpty(intentStr)) {
              Launcher.addDumpLog(TAG,"skipping empty intent",true);
              continue;
            }
 else             if (cn != null && !LauncherModel.isValidPackageComponent(pm,cn)) {
              Launcher.addDumpLog(TAG,"skipping item whose component " + "no longer exists.",true);
              continue;
            }
 else             if (container == LauncherSettings.Favorites.CONTAINER_DESKTOP) {
              intent.setPackage(null);
              final String key=intent.toUri(0);
              if (seenIntents.contains(key)) {
                Launcher.addDumpLog(TAG,"skipping duplicate",true);
                continue;
              }
 else {
                seenIntents.add(key);
              }
            }
          }
          ContentValues values=new ContentValues(c.getColumnCount());
          values.put(LauncherSettings.Favorites._ID,c.getInt(idIndex));
          values.put(LauncherSettings.Favorites.INTENT,intentStr);
          values.put(LauncherSettings.Favorites.TITLE,c.getString(titleIndex));
          values.put(LauncherSettings.Favorites.ICON_TYPE,c.getInt(iconTypeIndex));
          values.put(LauncherSettings.Favorites.ICON,c.getBlob(iconIndex));
          values.put(LauncherSettings.Favorites.ICON_PACKAGE,c.getString(iconPackageIndex));
          values.put(LauncherSettings.Favorites.ICON_RESOURCE,c.getString(iconResourceIndex));
          values.put(LauncherSettings.Favorites.ITEM_TYPE,itemType);
          values.put(LauncherSettings.Favorites.APPWIDGET_ID,-1);
          values.put(LauncherSettings.Favorites.URI,c.getString(uriIndex));
          values.put(LauncherSettings.Favorites.DISPLAY_MODE,c.getInt(displayModeIndex));
          if (container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
            hotseat.put(screen,values);
          }
          if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP) {
            values.put(LauncherSettings.Favorites.SCREEN,screen);
            values.put(LauncherSettings.Favorites.CELLX,cellX);
            values.put(LauncherSettings.Favorites.CELLY,cellY);
          }
 else {
          }
          values.put(LauncherSettings.Favorites.CONTAINER,container);
          if (itemType != Favorites.ITEM_TYPE_FOLDER) {
            shortcuts.add(values);
          }
 else {
            folders.add(values);
          }
        }
        final int N=hotseat.size();
        for (int idx=0; idx < N; idx++) {
          int hotseatX=hotseat.keyAt(idx);
          ContentValues values=hotseat.valueAt(idx);
          if (hotseatX == grid.hotseatAllAppsRank) {
            while (++hotseatX < hotseatWidth) {
              if (hotseat.get(hotseatX) == null) {
                values.put(LauncherSettings.Favorites.SCREEN,hotseatX);
                break;
              }
            }
          }
          if (hotseatX >= hotseatWidth) {
            values.put(LauncherSettings.Favorites.CONTAINER,Favorites.CONTAINER_DESKTOP);
          }
        }
        final ArrayList<ContentValues> allItems=new ArrayList<ContentValues>();
        allItems.addAll(folders);
        allItems.addAll(shortcuts);
        for (        ContentValues values : allItems) {
          if (values.getAsInteger(LauncherSettings.Favorites.CONTAINER) != LauncherSettings.Favorites.CONTAINER_DESKTOP) {
            continue;
          }
          values.put(LauncherSettings.Favorites.SCREEN,curScreen);
          values.put(LauncherSettings.Favorites.CELLX,curX);
          values.put(LauncherSettings.Favorites.CELLY,curY);
          curX=(curX + 1) % width;
          if (curX == 0) {
            curY=(curY + 1);
          }
          if (curY == height - 1) {
            curScreen=(int)generateNewScreenId();
            curY=0;
          }
        }
        if (allItems.size() > 0) {
          db.beginTransaction();
          try {
            for (            ContentValues row : allItems) {
              if (row == null)               continue;
              if (dbInsertAndCheck(this,db,TABLE_FAVORITES,null,row) < 0) {
                return;
              }
 else {
                count++;
              }
            }
            db.setTransactionSuccessful();
          }
  finally {
            db.endTransaction();
          }
        }
        db.beginTransaction();
        try {
          for (i=0; i <= curScreen; i++) {
            final ContentValues values=new ContentValues();
            values.put(LauncherSettings.WorkspaceScreens._ID,i);
            values.put(LauncherSettings.WorkspaceScreens.SCREEN_RANK,i);
            if (dbInsertAndCheck(this,db,TABLE_WORKSPACE_SCREENS,null,values) < 0) {
              return;
            }
          }
          db.setTransactionSuccessful();
        }
  finally {
          db.endTransaction();
        }
      }
    }
  finally {
      c.close();
    }
  }
  Launcher.addDumpLog(TAG,"migrated " + count + " icons from Launcher2 into "+ (curScreen + 1)+ " screens",true);
  setFlagJustLoadedOldDb();
  mMaxItemId=initializeMaxItemId(db);
  mMaxScreenId=initializeMaxScreenId(db);
  if (LOGD)   Log.d(TAG,"mMaxItemId: " + mMaxItemId + " mMaxScreenId: "+ mMaxScreenId);
}
