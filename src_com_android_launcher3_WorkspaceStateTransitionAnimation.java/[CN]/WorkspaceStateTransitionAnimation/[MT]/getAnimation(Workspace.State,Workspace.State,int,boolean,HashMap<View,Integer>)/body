{
  AccessibilityManager am=(AccessibilityManager)mLauncher.getSystemService(Context.ACCESSIBILITY_SERVICE);
  final boolean accessibilityEnabled=am.isEnabled();
  reinitializeAnimationArrays();
  cancelAnimation();
  if (animated) {
    mStateAnimator=LauncherAnimUtils.createAnimatorSet();
  }
  final boolean oldStateIsNormal=(fromState == Workspace.State.NORMAL);
  final boolean oldStateIsSpringLoaded=(fromState == Workspace.State.SPRING_LOADED);
  final boolean oldStateIsNormalHidden=(fromState == Workspace.State.NORMAL_HIDDEN);
  final boolean oldStateIsOverviewHidden=(fromState == Workspace.State.OVERVIEW_HIDDEN);
  final boolean oldStateIsOverview=(fromState == Workspace.State.OVERVIEW);
  final boolean stateIsNormal=(toState == Workspace.State.NORMAL);
  final boolean stateIsSpringLoaded=(toState == Workspace.State.SPRING_LOADED);
  final boolean stateIsNormalHidden=(toState == Workspace.State.NORMAL_HIDDEN);
  final boolean stateIsOverviewHidden=(toState == Workspace.State.OVERVIEW_HIDDEN);
  final boolean stateIsOverview=(toState == Workspace.State.OVERVIEW);
  final boolean workspaceToAllApps=(oldStateIsNormal && stateIsNormalHidden);
  final boolean overviewToAllApps=(oldStateIsOverview && stateIsOverviewHidden);
  final boolean allAppsToWorkspace=(stateIsNormalHidden && stateIsNormal);
  final boolean workspaceToOverview=(oldStateIsNormal && stateIsOverview);
  final boolean overviewToWorkspace=(oldStateIsOverview && stateIsNormal);
  float finalBackgroundAlpha=(stateIsSpringLoaded || stateIsOverview) ? 1.0f : 0f;
  float finalHotseatAndPageIndicatorAlpha=(stateIsNormal || stateIsSpringLoaded) ? 1f : 0f;
  float finalOverviewPanelAlpha=stateIsOverview ? 1f : 0f;
  boolean showSearchBar=stateIsNormal || (mLauncher.isAllAppsSearchOverridden() && stateIsNormalHidden);
  float finalSearchBarAlpha=showSearchBar ? 1f : 0f;
  float finalWorkspaceTranslationY=stateIsOverview || stateIsOverviewHidden ? mWorkspace.getOverviewModeTranslationY() : 0;
  final int childCount=mWorkspace.getChildCount();
  final int customPageCount=mWorkspace.numCustomPages();
  mNewScale=1.0f;
  if (oldStateIsOverview) {
    mWorkspace.disableFreeScroll();
  }
 else   if (stateIsOverview) {
    mWorkspace.enableFreeScroll();
  }
  if (!stateIsNormal) {
    if (stateIsSpringLoaded) {
      mNewScale=mSpringLoadedShrinkFactor;
    }
 else     if (stateIsOverview || stateIsOverviewHidden) {
      mNewScale=mOverviewModeShrinkFactor;
    }
  }
  final int duration;
  if (workspaceToAllApps || overviewToAllApps) {
    duration=mAllAppsTransitionTime;
  }
 else   if (workspaceToOverview || overviewToWorkspace) {
    duration=mOverviewTransitionTime;
  }
 else {
    duration=mOverlayTransitionTime;
  }
  if (toPage == SCROLL_TO_CURRENT_PAGE) {
    toPage=mWorkspace.getPageNearestToCenterOfScreen();
  }
  mWorkspace.snapToPage(toPage,duration,mZoomInInterpolator);
  for (int i=0; i < childCount; i++) {
    final CellLayout cl=(CellLayout)mWorkspace.getChildAt(i);
    boolean isCurrentPage=(i == toPage);
    float initialAlpha=cl.getShortcutsAndWidgets().getAlpha();
    float finalAlpha;
    if (stateIsNormalHidden || stateIsOverviewHidden) {
      finalAlpha=0f;
    }
 else     if (stateIsNormal && mWorkspaceFadeInAdjacentScreens) {
      finalAlpha=(i == toPage || i < customPageCount) ? 1f : 0f;
    }
 else {
      finalAlpha=1f;
    }
    if (!mWorkspace.isSwitchingState()) {
      if (workspaceToAllApps || allAppsToWorkspace) {
        if (allAppsToWorkspace && isCurrentPage) {
          initialAlpha=0f;
        }
 else         if (!isCurrentPage) {
          initialAlpha=finalAlpha=0f;
        }
        cl.setShortcutAndWidgetAlpha(initialAlpha);
      }
    }
    mOldAlphas[i]=initialAlpha;
    mNewAlphas[i]=finalAlpha;
    if (animated) {
      mOldBackgroundAlphas[i]=cl.getBackgroundAlpha();
      mNewBackgroundAlphas[i]=finalBackgroundAlpha;
    }
 else {
      cl.setBackgroundAlpha(finalBackgroundAlpha);
      cl.setShortcutAndWidgetAlpha(finalAlpha);
    }
  }
  final View searchBar=mLauncher.getOrCreateQsbBar();
  final ViewGroup overviewPanel=mLauncher.getOverviewPanel();
  final View hotseat=mLauncher.getHotseat();
  final View pageIndicator=mWorkspace.getPageIndicator();
  if (animated) {
    LauncherViewPropertyAnimator scale=new LauncherViewPropertyAnimator(mWorkspace);
    scale.scaleX(mNewScale).scaleY(mNewScale).translationY(finalWorkspaceTranslationY).setDuration(duration).setInterpolator(mZoomInInterpolator);
    mStateAnimator.play(scale);
    for (int index=0; index < childCount; index++) {
      final int i=index;
      final CellLayout cl=(CellLayout)mWorkspace.getChildAt(i);
      float currentAlpha=cl.getShortcutsAndWidgets().getAlpha();
      if (mOldAlphas[i] == 0 && mNewAlphas[i] == 0) {
        cl.setBackgroundAlpha(mNewBackgroundAlphas[i]);
        cl.setShortcutAndWidgetAlpha(mNewAlphas[i]);
      }
 else {
        if (layerViews != null) {
          layerViews.put(cl,LauncherStateTransitionAnimation.BUILD_LAYER);
        }
        if (mOldAlphas[i] != mNewAlphas[i] || currentAlpha != mNewAlphas[i]) {
          LauncherViewPropertyAnimator alphaAnim=new LauncherViewPropertyAnimator(cl.getShortcutsAndWidgets());
          alphaAnim.alpha(mNewAlphas[i]).setDuration(duration).setInterpolator(mZoomInInterpolator);
          mStateAnimator.play(alphaAnim);
        }
        if (mOldBackgroundAlphas[i] != 0 || mNewBackgroundAlphas[i] != 0) {
          ValueAnimator bgAnim=ObjectAnimator.ofFloat(cl,"backgroundAlpha",mOldBackgroundAlphas[i],mNewBackgroundAlphas[i]);
          LauncherAnimUtils.ofFloat(cl,0f,1f);
          bgAnim.setInterpolator(mZoomInInterpolator);
          bgAnim.setDuration(duration);
          mStateAnimator.play(bgAnim);
        }
      }
    }
    Animator pageIndicatorAlpha=null;
    if (pageIndicator != null) {
      pageIndicatorAlpha=new LauncherViewPropertyAnimator(pageIndicator).alpha(finalHotseatAndPageIndicatorAlpha).withLayer();
      pageIndicatorAlpha.addListener(new AlphaUpdateListener(pageIndicator,accessibilityEnabled));
    }
 else {
      pageIndicatorAlpha=ValueAnimator.ofFloat(0,0);
    }
    LauncherViewPropertyAnimator hotseatAlpha=new LauncherViewPropertyAnimator(hotseat).alpha(finalHotseatAndPageIndicatorAlpha);
    hotseatAlpha.addListener(new AlphaUpdateListener(hotseat,accessibilityEnabled));
    LauncherViewPropertyAnimator overviewPanelAlpha=new LauncherViewPropertyAnimator(overviewPanel).alpha(finalOverviewPanelAlpha);
    overviewPanelAlpha.addListener(new AlphaUpdateListener(overviewPanel,accessibilityEnabled));
    hotseat.setLayerType(View.LAYER_TYPE_HARDWARE,null);
    overviewPanel.setLayerType(View.LAYER_TYPE_HARDWARE,null);
    if (layerViews != null) {
      layerViews.put(hotseat,LauncherStateTransitionAnimation.BUILD_AND_SET_LAYER);
      layerViews.put(overviewPanel,LauncherStateTransitionAnimation.BUILD_AND_SET_LAYER);
    }
 else {
      hotseatAlpha.withLayer();
      overviewPanelAlpha.withLayer();
    }
    if (workspaceToOverview) {
      pageIndicatorAlpha.setInterpolator(new DecelerateInterpolator(2));
      hotseatAlpha.setInterpolator(new DecelerateInterpolator(2));
      overviewPanelAlpha.setInterpolator(null);
    }
 else     if (overviewToWorkspace) {
      pageIndicatorAlpha.setInterpolator(null);
      hotseatAlpha.setInterpolator(null);
      overviewPanelAlpha.setInterpolator(new DecelerateInterpolator(2));
    }
    overviewPanelAlpha.setDuration(duration);
    pageIndicatorAlpha.setDuration(duration);
    hotseatAlpha.setDuration(duration);
    if (searchBar != null) {
      LauncherViewPropertyAnimator searchBarAlpha=new LauncherViewPropertyAnimator(searchBar).alpha(finalSearchBarAlpha);
      searchBarAlpha.addListener(new AlphaUpdateListener(searchBar,accessibilityEnabled));
      searchBar.setLayerType(View.LAYER_TYPE_HARDWARE,null);
      if (layerViews != null) {
        layerViews.put(searchBar,LauncherStateTransitionAnimation.BUILD_AND_SET_LAYER);
      }
 else {
        searchBarAlpha.withLayer();
      }
      searchBarAlpha.setDuration(duration);
      mStateAnimator.play(searchBarAlpha);
    }
    mStateAnimator.play(overviewPanelAlpha);
    mStateAnimator.play(hotseatAlpha);
    mStateAnimator.play(pageIndicatorAlpha);
    mStateAnimator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        mStateAnimator=null;
        if (accessibilityEnabled && overviewPanel.getVisibility() == View.VISIBLE) {
          overviewPanel.getChildAt(0).performAccessibilityAction(AccessibilityNodeInfo.ACTION_ACCESSIBILITY_FOCUS,null);
        }
      }
    }
);
  }
 else {
    overviewPanel.setAlpha(finalOverviewPanelAlpha);
    AlphaUpdateListener.updateVisibility(overviewPanel,accessibilityEnabled);
    hotseat.setAlpha(finalHotseatAndPageIndicatorAlpha);
    AlphaUpdateListener.updateVisibility(hotseat,accessibilityEnabled);
    if (pageIndicator != null) {
      pageIndicator.setAlpha(finalHotseatAndPageIndicatorAlpha);
      AlphaUpdateListener.updateVisibility(pageIndicator,accessibilityEnabled);
    }
    if (searchBar != null) {
      searchBar.setAlpha(finalSearchBarAlpha);
      AlphaUpdateListener.updateVisibility(searchBar,accessibilityEnabled);
    }
    mWorkspace.updateCustomContentVisibility();
    mWorkspace.setScaleX(mNewScale);
    mWorkspace.setScaleY(mNewScale);
    mWorkspace.setTranslationY(finalWorkspaceTranslationY);
    if (accessibilityEnabled && overviewPanel.getVisibility() == View.VISIBLE) {
      overviewPanel.getChildAt(0).performAccessibilityAction(AccessibilityNodeInfo.ACTION_ACCESSIBILITY_FOCUS,null);
    }
  }
  if (stateIsNormal) {
    animateBackgroundGradient(0f,animated);
  }
 else {
    animateBackgroundGradient(mWorkspaceScrimAlpha,animated);
  }
}
